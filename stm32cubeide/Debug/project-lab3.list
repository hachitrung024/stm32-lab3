
project-lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d2c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e5c  08002e5c  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002e5c  08002e5c  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e5c  08002e5c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  20000024  08002e88  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002e88  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c68  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  00029cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017476  00000000  00000000  0002cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5e1  00000000  00000000  000443ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825ea  00000000  00000000  000519af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028bc  00000000  00000000  000d3fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e20 	.word	0x08002e20

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002e20 	.word	0x08002e20

0800014c <buttonRun>:

static uint8_t button_press_flags[MAX_BUTTONS];
static uint8_t button_hold_flags[MAX_BUTTONS];

static uint16_t button_hold_counters[MAX_BUTTONS];
void buttonRun(){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < MAX_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonRun+0xe4>
		//BEGIN for
		button_buffers0[i] = button_buffers1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonRun+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonRun+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		button_buffers1[i] = button_buffers2[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonRun+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonRun+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		button_buffers2[i] = HAL_GPIO_ReadPin( button_ports[i], button_pins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonRun+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonRun+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f001 fe15 	bl	8001db4 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonRun+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if((button_buffers0[i] == button_buffers1[i]) && (button_buffers1[i] == button_buffers2[i])){
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2b      	ldr	r2, [pc, #172]	; (8000244 <buttonRun+0xf8>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonRun+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d13d      	bne.n	800021e <buttonRun+0xd2>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a26      	ldr	r2, [pc, #152]	; (8000240 <buttonRun+0xf4>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4927      	ldr	r1, [pc, #156]	; (8000248 <buttonRun+0xfc>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d135      	bne.n	800021e <buttonRun+0xd2>
			//BEGIN stable condition
			if(button_buffers2[i] != button_buffers3[i]){
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a24      	ldr	r2, [pc, #144]	; (8000248 <buttonRun+0xfc>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <buttonRun+0x108>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonRun+0xa0>
				//BEGIN trigger edge
				button_buffers3[i] = button_buffers2[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonRun+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonRun+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if(button_buffers2[i]==BUTTON_PRESSED){
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a1d      	ldr	r2, [pc, #116]	; (8000248 <buttonRun+0xfc>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d127      	bne.n	8000228 <buttonRun+0xdc>
					//Edge down
					button_press_flags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonRun+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					button_hold_counters[i] = BUTTON_HOLD_DUR;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonRun+0x110>)
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(button_buffers2[i] != button_buffers3[i]){
 80001ea:	e01d      	b.n	8000228 <buttonRun+0xdc>
				}
				//END trigger edge
			}else if(button_buffers3[i] == BUTTON_PRESSED){
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonRun+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d118      	bne.n	8000228 <buttonRun+0xdc>
				//Stable pressed condition
				button_hold_counters[i]--;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonRun+0x110>)
 80001fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001fe:	3a01      	subs	r2, #1
 8000200:	b291      	uxth	r1, r2
 8000202:	4a16      	ldr	r2, [pc, #88]	; (800025c <buttonRun+0x110>)
 8000204:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(button_hold_counters[i]==0) button_hold_flags[i] = 1;
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a14      	ldr	r2, [pc, #80]	; (800025c <buttonRun+0x110>)
 800020c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d109      	bne.n	8000228 <buttonRun+0xdc>
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <buttonRun+0x114>)
 8000218:	2101      	movs	r1, #1
 800021a:	54d1      	strb	r1, [r2, r3]
			if(button_buffers2[i] != button_buffers3[i]){
 800021c:	e004      	b.n	8000228 <buttonRun+0xdc>
			}
			//END stable condition
		} else{
			button_hold_flags[i] = 0;
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <buttonRun+0x114>)
 8000222:	2100      	movs	r1, #0
 8000224:	54d1      	strb	r1, [r2, r3]
 8000226:	e000      	b.n	800022a <buttonRun+0xde>
			if(button_buffers2[i] != button_buffers3[i]){
 8000228:	bf00      	nop
	for(uint8_t i=0; i < MAX_BUTTONS; i++){
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b02      	cmp	r3, #2
 8000234:	d990      	bls.n	8000158 <buttonRun+0xc>
		}
		//END for
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	20000044 	.word	0x20000044
 8000244:	20000040 	.word	0x20000040
 8000248:	20000048 	.word	0x20000048
 800024c:	20000000 	.word	0x20000000
 8000250:	2000000c 	.word	0x2000000c
 8000254:	2000004c 	.word	0x2000004c
 8000258:	20000050 	.word	0x20000050
 800025c:	20000058 	.word	0x20000058
 8000260:	20000054 	.word	0x20000054

08000264 <isButtonPressed>:
uint8_t isButtonPressed(uint8_t index){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_BUTTONS) return 0;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d901      	bls.n	8000278 <isButtonPressed+0x14>
 8000274:	2300      	movs	r3, #0
 8000276:	e00b      	b.n	8000290 <isButtonPressed+0x2c>
	if(button_press_flags[index] == 1){
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <isButtonPressed+0x38>)
 800027c:	5cd3      	ldrb	r3, [r2, r3]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d105      	bne.n	800028e <isButtonPressed+0x2a>
		button_press_flags[index] = 0;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <isButtonPressed+0x38>)
 8000286:	2100      	movs	r1, #0
 8000288:	54d1      	strb	r1, [r2, r3]
		return 1;
 800028a:	2301      	movs	r3, #1
 800028c:	e000      	b.n	8000290 <isButtonPressed+0x2c>
	}
	return 0;
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000050 	.word	0x20000050

080002a0 <isButtonHolding>:
uint8_t isButtonHolding(uint8_t index){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_BUTTONS) return 0;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d901      	bls.n	80002b4 <isButtonHolding+0x14>
 80002b0:	2300      	movs	r3, #0
 80002b2:	e002      	b.n	80002ba <isButtonHolding+0x1a>
	return button_hold_flags[index];
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <isButtonHolding+0x24>)
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000054 	.word	0x20000054

080002c8 <setCounter>:

#include "counter.h"

uint8_t counters[MAX_COUNTER];
uint8_t red_duration, amber_duration, green_duration;
void setCounter(uint8_t index, uint8_t value){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
	setTimer(0, 1000);
 80002d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fc9d 	bl	8000c1c <setTimer>
	counters[index] = value;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <setCounter+0x3c>)
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	54ca      	strb	r2, [r1, r3]
	updateBuffer7SEG(counters[0], counters[1]);
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <setCounter+0x3c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4a05      	ldr	r2, [pc, #20]	; (8000304 <setCounter+0x3c>)
 80002f0:	7852      	ldrb	r2, [r2, #1]
 80002f2:	4611      	mov	r1, r2
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f8bb 	bl	8000470 <updateBuffer7SEG>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000074 	.word	0x20000074

08000308 <counterRun>:
void counterRun(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(isFlagTimer(0) && counters[0]>0 && counters[1]>0){
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fc75 	bl	8000bfc <isFlagTimer>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d020      	beq.n	800035a <counterRun+0x52>
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <counterRun+0x58>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d01c      	beq.n	800035a <counterRun+0x52>
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <counterRun+0x58>)
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d018      	beq.n	800035a <counterRun+0x52>
		setTimer(0, 1000);
 8000328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fc75 	bl	8000c1c <setTimer>
		counters[0]--;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <counterRun+0x58>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	3b01      	subs	r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <counterRun+0x58>)
 800033c:	701a      	strb	r2, [r3, #0]
		counters[1]--;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <counterRun+0x58>)
 8000340:	785b      	ldrb	r3, [r3, #1]
 8000342:	3b01      	subs	r3, #1
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <counterRun+0x58>)
 8000348:	705a      	strb	r2, [r3, #1]
		updateBuffer7SEG(counters[0], counters[1]);
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <counterRun+0x58>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4a04      	ldr	r2, [pc, #16]	; (8000360 <counterRun+0x58>)
 8000350:	7852      	ldrb	r2, [r2, #1]
 8000352:	4611      	mov	r1, r2
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f88b 	bl	8000470 <updateBuffer7SEG>
	}
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000074 	.word	0x20000074

08000364 <increaseDuration>:
void increaseDuration(uint8_t index){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	if(index == 0){
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d118      	bne.n	80003a6 <increaseDuration+0x42>
		red_duration++;
 8000374:	4b2b      	ldr	r3, [pc, #172]	; (8000424 <increaseDuration+0xc0>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b29      	ldr	r3, [pc, #164]	; (8000424 <increaseDuration+0xc0>)
 800037e:	701a      	strb	r2, [r3, #0]
		if(red_duration > 99) red_duration = green_duration + amber_duration;
 8000380:	4b28      	ldr	r3, [pc, #160]	; (8000424 <increaseDuration+0xc0>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b63      	cmp	r3, #99	; 0x63
 8000386:	d907      	bls.n	8000398 <increaseDuration+0x34>
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <increaseDuration+0xc4>)
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	4b27      	ldr	r3, [pc, #156]	; (800042c <increaseDuration+0xc8>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4413      	add	r3, r2
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b23      	ldr	r3, [pc, #140]	; (8000424 <increaseDuration+0xc0>)
 8000396:	701a      	strb	r2, [r3, #0]
		updateBuffer7SEG(red_duration, 1);
 8000398:	4b22      	ldr	r3, [pc, #136]	; (8000424 <increaseDuration+0xc0>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2101      	movs	r1, #1
 800039e:	4618      	mov	r0, r3
 80003a0:	f000 f866 	bl	8000470 <updateBuffer7SEG>
	}else if(index == 2){
		green_duration++;
		if(green_duration >= red_duration) green_duration = red_duration - amber_duration;
		updateBuffer7SEG(green_duration, 3);
	}
}
 80003a4:	e03a      	b.n	800041c <increaseDuration+0xb8>
	}else if(index == 1){
 80003a6:	79fb      	ldrb	r3, [r7, #7]
 80003a8:	2b01      	cmp	r3, #1
 80003aa:	d11a      	bne.n	80003e2 <increaseDuration+0x7e>
		amber_duration++;
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <increaseDuration+0xc8>)
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	3301      	adds	r3, #1
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <increaseDuration+0xc8>)
 80003b6:	701a      	strb	r2, [r3, #0]
		if(amber_duration >= red_duration) amber_duration = red_duration - green_duration;
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <increaseDuration+0xc8>)
 80003ba:	781a      	ldrb	r2, [r3, #0]
 80003bc:	4b19      	ldr	r3, [pc, #100]	; (8000424 <increaseDuration+0xc0>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	429a      	cmp	r2, r3
 80003c2:	d307      	bcc.n	80003d4 <increaseDuration+0x70>
 80003c4:	4b17      	ldr	r3, [pc, #92]	; (8000424 <increaseDuration+0xc0>)
 80003c6:	781a      	ldrb	r2, [r3, #0]
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <increaseDuration+0xc4>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	1ad3      	subs	r3, r2, r3
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	4b16      	ldr	r3, [pc, #88]	; (800042c <increaseDuration+0xc8>)
 80003d2:	701a      	strb	r2, [r3, #0]
		updateBuffer7SEG(amber_duration, 2);
 80003d4:	4b15      	ldr	r3, [pc, #84]	; (800042c <increaseDuration+0xc8>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	2102      	movs	r1, #2
 80003da:	4618      	mov	r0, r3
 80003dc:	f000 f848 	bl	8000470 <updateBuffer7SEG>
}
 80003e0:	e01c      	b.n	800041c <increaseDuration+0xb8>
	}else if(index == 2){
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	2b02      	cmp	r3, #2
 80003e6:	d119      	bne.n	800041c <increaseDuration+0xb8>
		green_duration++;
 80003e8:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <increaseDuration+0xc4>)
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <increaseDuration+0xc4>)
 80003f2:	701a      	strb	r2, [r3, #0]
		if(green_duration >= red_duration) green_duration = red_duration - amber_duration;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <increaseDuration+0xc4>)
 80003f6:	781a      	ldrb	r2, [r3, #0]
 80003f8:	4b0a      	ldr	r3, [pc, #40]	; (8000424 <increaseDuration+0xc0>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	429a      	cmp	r2, r3
 80003fe:	d307      	bcc.n	8000410 <increaseDuration+0xac>
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <increaseDuration+0xc0>)
 8000402:	781a      	ldrb	r2, [r3, #0]
 8000404:	4b09      	ldr	r3, [pc, #36]	; (800042c <increaseDuration+0xc8>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	1ad3      	subs	r3, r2, r3
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <increaseDuration+0xc4>)
 800040e:	701a      	strb	r2, [r3, #0]
		updateBuffer7SEG(green_duration, 3);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <increaseDuration+0xc4>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2103      	movs	r1, #3
 8000416:	4618      	mov	r0, r3
 8000418:	f000 f82a 	bl	8000470 <updateBuffer7SEG>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20000076 	.word	0x20000076
 8000428:	20000070 	.word	0x20000070
 800042c:	20000071 	.word	0x20000071

08000430 <run7SEG>:
#include "display7SEG.h"

uint8_t led7SEG_index = 0;
uint8_t led7SEG_buffer[MAX_LED7SEG];

void run7SEG(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	if(isFlagTimer(1)){
 8000434:	2001      	movs	r0, #1
 8000436:	f000 fbe1 	bl	8000bfc <isFlagTimer>
 800043a:	4603      	mov	r3, r0
 800043c:	2b00      	cmp	r3, #0
 800043e:	d013      	beq.n	8000468 <run7SEG+0x38>
		setTimer(1, 100);
 8000440:	2164      	movs	r1, #100	; 0x64
 8000442:	2001      	movs	r0, #1
 8000444:	f000 fbea 	bl	8000c1c <setTimer>
		if(led7SEG_index >= MAX_LED7SEG) led7SEG_index = 0;
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <run7SEG+0x3c>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b03      	cmp	r3, #3
 800044e:	d902      	bls.n	8000456 <run7SEG+0x26>
 8000450:	4b06      	ldr	r3, [pc, #24]	; (800046c <run7SEG+0x3c>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
		update7SEG(led7SEG_index++);
 8000456:	4b05      	ldr	r3, [pc, #20]	; (800046c <run7SEG+0x3c>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	b2d1      	uxtb	r1, r2
 800045e:	4a03      	ldr	r2, [pc, #12]	; (800046c <run7SEG+0x3c>)
 8000460:	7011      	strb	r1, [r2, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f840 	bl	80004e8 <update7SEG>
	}
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	2000005e 	.word	0x2000005e

08000470 <updateBuffer7SEG>:
void updateBuffer7SEG(uint8_t num1, uint8_t num2){
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	led7SEG_buffer[0] = num1/10;
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	4a17      	ldr	r2, [pc, #92]	; (80004e0 <updateBuffer7SEG+0x70>)
 8000484:	fba2 2303 	umull	r2, r3, r2, r3
 8000488:	08db      	lsrs	r3, r3, #3
 800048a:	b2da      	uxtb	r2, r3
 800048c:	4b15      	ldr	r3, [pc, #84]	; (80004e4 <updateBuffer7SEG+0x74>)
 800048e:	701a      	strb	r2, [r3, #0]
	led7SEG_buffer[1] = num1%10;
 8000490:	79fa      	ldrb	r2, [r7, #7]
 8000492:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <updateBuffer7SEG+0x70>)
 8000494:	fba3 1302 	umull	r1, r3, r3, r2
 8000498:	08d9      	lsrs	r1, r3, #3
 800049a:	460b      	mov	r3, r1
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	440b      	add	r3, r1
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	1ad3      	subs	r3, r2, r3
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <updateBuffer7SEG+0x74>)
 80004a8:	705a      	strb	r2, [r3, #1]
	led7SEG_buffer[2] = num2/10;
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	4a0c      	ldr	r2, [pc, #48]	; (80004e0 <updateBuffer7SEG+0x70>)
 80004ae:	fba2 2303 	umull	r2, r3, r2, r3
 80004b2:	08db      	lsrs	r3, r3, #3
 80004b4:	b2da      	uxtb	r2, r3
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <updateBuffer7SEG+0x74>)
 80004b8:	709a      	strb	r2, [r3, #2]
	led7SEG_buffer[3] = num2%10;
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <updateBuffer7SEG+0x70>)
 80004be:	fba3 1302 	umull	r1, r3, r3, r2
 80004c2:	08d9      	lsrs	r1, r3, #3
 80004c4:	460b      	mov	r3, r1
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	440b      	add	r3, r1
 80004ca:	005b      	lsls	r3, r3, #1
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <updateBuffer7SEG+0x74>)
 80004d2:	70da      	strb	r2, [r3, #3]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	cccccccd 	.word	0xcccccccd
 80004e4:	20000078 	.word	0x20000078

080004e8 <update7SEG>:
void update7SEG(uint8_t num){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d873      	bhi.n	80005e0 <update7SEG+0xf8>
 80004f8:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <update7SEG+0x18>)
 80004fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fe:	bf00      	nop
 8000500:	08000511 	.word	0x08000511
 8000504:	08000545 	.word	0x08000545
 8000508:	08000579 	.word	0x08000579
 800050c:	080005ad 	.word	0x080005ad
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2102      	movs	r1, #2
 8000514:	483f      	ldr	r0, [pc, #252]	; (8000614 <update7SEG+0x12c>)
 8000516:	f001 fc64 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800051a:	2201      	movs	r2, #1
 800051c:	2104      	movs	r1, #4
 800051e:	483d      	ldr	r0, [pc, #244]	; (8000614 <update7SEG+0x12c>)
 8000520:	f001 fc5f 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2108      	movs	r1, #8
 8000528:	483a      	ldr	r0, [pc, #232]	; (8000614 <update7SEG+0x12c>)
 800052a:	f001 fc5a 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2110      	movs	r1, #16
 8000532:	4838      	ldr	r0, [pc, #224]	; (8000614 <update7SEG+0x12c>)
 8000534:	f001 fc55 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[0]);
 8000538:	4b37      	ldr	r3, [pc, #220]	; (8000618 <update7SEG+0x130>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	4618      	mov	r0, r3
 800053e:	f000 f86d 	bl	800061c <display7SEG>
			break;
 8000542:	e062      	b.n	800060a <update7SEG+0x122>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2102      	movs	r1, #2
 8000548:	4832      	ldr	r0, [pc, #200]	; (8000614 <update7SEG+0x12c>)
 800054a:	f001 fc4a 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	2104      	movs	r1, #4
 8000552:	4830      	ldr	r0, [pc, #192]	; (8000614 <update7SEG+0x12c>)
 8000554:	f001 fc45 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000558:	2201      	movs	r2, #1
 800055a:	2108      	movs	r1, #8
 800055c:	482d      	ldr	r0, [pc, #180]	; (8000614 <update7SEG+0x12c>)
 800055e:	f001 fc40 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000562:	2201      	movs	r2, #1
 8000564:	2110      	movs	r1, #16
 8000566:	482b      	ldr	r0, [pc, #172]	; (8000614 <update7SEG+0x12c>)
 8000568:	f001 fc3b 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[1]);
 800056c:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <update7SEG+0x130>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	4618      	mov	r0, r3
 8000572:	f000 f853 	bl	800061c <display7SEG>
			break;
 8000576:	e048      	b.n	800060a <update7SEG+0x122>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000578:	2201      	movs	r2, #1
 800057a:	2102      	movs	r1, #2
 800057c:	4825      	ldr	r0, [pc, #148]	; (8000614 <update7SEG+0x12c>)
 800057e:	f001 fc30 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000582:	2201      	movs	r2, #1
 8000584:	2104      	movs	r1, #4
 8000586:	4823      	ldr	r0, [pc, #140]	; (8000614 <update7SEG+0x12c>)
 8000588:	f001 fc2b 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800058c:	2200      	movs	r2, #0
 800058e:	2108      	movs	r1, #8
 8000590:	4820      	ldr	r0, [pc, #128]	; (8000614 <update7SEG+0x12c>)
 8000592:	f001 fc26 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000596:	2201      	movs	r2, #1
 8000598:	2110      	movs	r1, #16
 800059a:	481e      	ldr	r0, [pc, #120]	; (8000614 <update7SEG+0x12c>)
 800059c:	f001 fc21 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[2]);
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <update7SEG+0x130>)
 80005a2:	789b      	ldrb	r3, [r3, #2]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 f839 	bl	800061c <display7SEG>
			break;
 80005aa:	e02e      	b.n	800060a <update7SEG+0x122>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	2102      	movs	r1, #2
 80005b0:	4818      	ldr	r0, [pc, #96]	; (8000614 <update7SEG+0x12c>)
 80005b2:	f001 fc16 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005b6:	2201      	movs	r2, #1
 80005b8:	2104      	movs	r1, #4
 80005ba:	4816      	ldr	r0, [pc, #88]	; (8000614 <update7SEG+0x12c>)
 80005bc:	f001 fc11 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2108      	movs	r1, #8
 80005c4:	4813      	ldr	r0, [pc, #76]	; (8000614 <update7SEG+0x12c>)
 80005c6:	f001 fc0c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2110      	movs	r1, #16
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <update7SEG+0x12c>)
 80005d0:	f001 fc07 	bl	8001de2 <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[3]);
 80005d4:	4b10      	ldr	r3, [pc, #64]	; (8000618 <update7SEG+0x130>)
 80005d6:	78db      	ldrb	r3, [r3, #3]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f81f 	bl	800061c <display7SEG>
			break;
 80005de:	e014      	b.n	800060a <update7SEG+0x122>
		default:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	2102      	movs	r1, #2
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <update7SEG+0x12c>)
 80005e6:	f001 fbfc 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005ea:	2201      	movs	r2, #1
 80005ec:	2104      	movs	r1, #4
 80005ee:	4809      	ldr	r0, [pc, #36]	; (8000614 <update7SEG+0x12c>)
 80005f0:	f001 fbf7 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2108      	movs	r1, #8
 80005f8:	4806      	ldr	r0, [pc, #24]	; (8000614 <update7SEG+0x12c>)
 80005fa:	f001 fbf2 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2110      	movs	r1, #16
 8000602:	4804      	ldr	r0, [pc, #16]	; (8000614 <update7SEG+0x12c>)
 8000604:	f001 fbed 	bl	8001de2 <HAL_GPIO_WritePin>
			break;
 8000608:	bf00      	nop
	}
}
 800060a:	bf00      	nop
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010800 	.word	0x40010800
 8000618:	20000078 	.word	0x20000078

0800061c <display7SEG>:
void display7SEG(uint8_t num){
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  switch(num){
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b09      	cmp	r3, #9
 800062a:	f200 817f 	bhi.w	800092c <display7SEG+0x310>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <display7SEG+0x18>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	0800065d 	.word	0x0800065d
 8000638:	080006a5 	.word	0x080006a5
 800063c:	080006ed 	.word	0x080006ed
 8000640:	08000735 	.word	0x08000735
 8000644:	0800077d 	.word	0x0800077d
 8000648:	080007c5 	.word	0x080007c5
 800064c:	0800080d 	.word	0x0800080d
 8000650:	08000855 	.word	0x08000855
 8000654:	0800089d 	.word	0x0800089d
 8000658:	080008e5 	.word	0x080008e5
	  case 0:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2101      	movs	r1, #1
 8000660:	48c6      	ldr	r0, [pc, #792]	; (800097c <display7SEG+0x360>)
 8000662:	f001 fbbe 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2102      	movs	r1, #2
 800066a:	48c4      	ldr	r0, [pc, #784]	; (800097c <display7SEG+0x360>)
 800066c:	f001 fbb9 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2104      	movs	r1, #4
 8000674:	48c1      	ldr	r0, [pc, #772]	; (800097c <display7SEG+0x360>)
 8000676:	f001 fbb4 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2108      	movs	r1, #8
 800067e:	48bf      	ldr	r0, [pc, #764]	; (800097c <display7SEG+0x360>)
 8000680:	f001 fbaf 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2110      	movs	r1, #16
 8000688:	48bc      	ldr	r0, [pc, #752]	; (800097c <display7SEG+0x360>)
 800068a:	f001 fbaa 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	48ba      	ldr	r0, [pc, #744]	; (800097c <display7SEG+0x360>)
 8000694:	f001 fba5 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2140      	movs	r1, #64	; 0x40
 800069c:	48b7      	ldr	r0, [pc, #732]	; (800097c <display7SEG+0x360>)
 800069e:	f001 fba0 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 80006a2:	e167      	b.n	8000974 <display7SEG+0x358>
	  case 1:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2101      	movs	r1, #1
 80006a8:	48b4      	ldr	r0, [pc, #720]	; (800097c <display7SEG+0x360>)
 80006aa:	f001 fb9a 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2102      	movs	r1, #2
 80006b2:	48b2      	ldr	r0, [pc, #712]	; (800097c <display7SEG+0x360>)
 80006b4:	f001 fb95 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2104      	movs	r1, #4
 80006bc:	48af      	ldr	r0, [pc, #700]	; (800097c <display7SEG+0x360>)
 80006be:	f001 fb90 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2108      	movs	r1, #8
 80006c6:	48ad      	ldr	r0, [pc, #692]	; (800097c <display7SEG+0x360>)
 80006c8:	f001 fb8b 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	2110      	movs	r1, #16
 80006d0:	48aa      	ldr	r0, [pc, #680]	; (800097c <display7SEG+0x360>)
 80006d2:	f001 fb86 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	48a8      	ldr	r0, [pc, #672]	; (800097c <display7SEG+0x360>)
 80006dc:	f001 fb81 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	48a5      	ldr	r0, [pc, #660]	; (800097c <display7SEG+0x360>)
 80006e6:	f001 fb7c 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 80006ea:	e143      	b.n	8000974 <display7SEG+0x358>
	  case 2:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80006ec:	2200      	movs	r2, #0
 80006ee:	2101      	movs	r1, #1
 80006f0:	48a2      	ldr	r0, [pc, #648]	; (800097c <display7SEG+0x360>)
 80006f2:	f001 fb76 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2102      	movs	r1, #2
 80006fa:	48a0      	ldr	r0, [pc, #640]	; (800097c <display7SEG+0x360>)
 80006fc:	f001 fb71 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2104      	movs	r1, #4
 8000704:	489d      	ldr	r0, [pc, #628]	; (800097c <display7SEG+0x360>)
 8000706:	f001 fb6c 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2108      	movs	r1, #8
 800070e:	489b      	ldr	r0, [pc, #620]	; (800097c <display7SEG+0x360>)
 8000710:	f001 fb67 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2110      	movs	r1, #16
 8000718:	4898      	ldr	r0, [pc, #608]	; (800097c <display7SEG+0x360>)
 800071a:	f001 fb62 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800071e:	2201      	movs	r2, #1
 8000720:	2120      	movs	r1, #32
 8000722:	4896      	ldr	r0, [pc, #600]	; (800097c <display7SEG+0x360>)
 8000724:	f001 fb5d 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	4893      	ldr	r0, [pc, #588]	; (800097c <display7SEG+0x360>)
 800072e:	f001 fb58 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 8000732:	e11f      	b.n	8000974 <display7SEG+0x358>
	  case 3:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	4890      	ldr	r0, [pc, #576]	; (800097c <display7SEG+0x360>)
 800073a:	f001 fb52 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2102      	movs	r1, #2
 8000742:	488e      	ldr	r0, [pc, #568]	; (800097c <display7SEG+0x360>)
 8000744:	f001 fb4d 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2104      	movs	r1, #4
 800074c:	488b      	ldr	r0, [pc, #556]	; (800097c <display7SEG+0x360>)
 800074e:	f001 fb48 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2108      	movs	r1, #8
 8000756:	4889      	ldr	r0, [pc, #548]	; (800097c <display7SEG+0x360>)
 8000758:	f001 fb43 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2110      	movs	r1, #16
 8000760:	4886      	ldr	r0, [pc, #536]	; (800097c <display7SEG+0x360>)
 8000762:	f001 fb3e 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000766:	2201      	movs	r2, #1
 8000768:	2120      	movs	r1, #32
 800076a:	4884      	ldr	r0, [pc, #528]	; (800097c <display7SEG+0x360>)
 800076c:	f001 fb39 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2140      	movs	r1, #64	; 0x40
 8000774:	4881      	ldr	r0, [pc, #516]	; (800097c <display7SEG+0x360>)
 8000776:	f001 fb34 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 800077a:	e0fb      	b.n	8000974 <display7SEG+0x358>
	  case 4:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	487e      	ldr	r0, [pc, #504]	; (800097c <display7SEG+0x360>)
 8000782:	f001 fb2e 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	487c      	ldr	r0, [pc, #496]	; (800097c <display7SEG+0x360>)
 800078c:	f001 fb29 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2104      	movs	r1, #4
 8000794:	4879      	ldr	r0, [pc, #484]	; (800097c <display7SEG+0x360>)
 8000796:	f001 fb24 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800079a:	2201      	movs	r2, #1
 800079c:	2108      	movs	r1, #8
 800079e:	4877      	ldr	r0, [pc, #476]	; (800097c <display7SEG+0x360>)
 80007a0:	f001 fb1f 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2110      	movs	r1, #16
 80007a8:	4874      	ldr	r0, [pc, #464]	; (800097c <display7SEG+0x360>)
 80007aa:	f001 fb1a 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	4872      	ldr	r0, [pc, #456]	; (800097c <display7SEG+0x360>)
 80007b4:	f001 fb15 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	486f      	ldr	r0, [pc, #444]	; (800097c <display7SEG+0x360>)
 80007be:	f001 fb10 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 80007c2:	e0d7      	b.n	8000974 <display7SEG+0x358>
	  case 5:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2101      	movs	r1, #1
 80007c8:	486c      	ldr	r0, [pc, #432]	; (800097c <display7SEG+0x360>)
 80007ca:	f001 fb0a 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80007ce:	2201      	movs	r2, #1
 80007d0:	2102      	movs	r1, #2
 80007d2:	486a      	ldr	r0, [pc, #424]	; (800097c <display7SEG+0x360>)
 80007d4:	f001 fb05 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	2104      	movs	r1, #4
 80007dc:	4867      	ldr	r0, [pc, #412]	; (800097c <display7SEG+0x360>)
 80007de:	f001 fb00 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4865      	ldr	r0, [pc, #404]	; (800097c <display7SEG+0x360>)
 80007e8:	f001 fafb 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2110      	movs	r1, #16
 80007f0:	4862      	ldr	r0, [pc, #392]	; (800097c <display7SEG+0x360>)
 80007f2:	f001 faf6 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2120      	movs	r1, #32
 80007fa:	4860      	ldr	r0, [pc, #384]	; (800097c <display7SEG+0x360>)
 80007fc:	f001 faf1 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000800:	2200      	movs	r2, #0
 8000802:	2140      	movs	r1, #64	; 0x40
 8000804:	485d      	ldr	r0, [pc, #372]	; (800097c <display7SEG+0x360>)
 8000806:	f001 faec 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 800080a:	e0b3      	b.n	8000974 <display7SEG+0x358>
	  case 6:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2101      	movs	r1, #1
 8000810:	485a      	ldr	r0, [pc, #360]	; (800097c <display7SEG+0x360>)
 8000812:	f001 fae6 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	4858      	ldr	r0, [pc, #352]	; (800097c <display7SEG+0x360>)
 800081c:	f001 fae1 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2104      	movs	r1, #4
 8000824:	4855      	ldr	r0, [pc, #340]	; (800097c <display7SEG+0x360>)
 8000826:	f001 fadc 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	2108      	movs	r1, #8
 800082e:	4853      	ldr	r0, [pc, #332]	; (800097c <display7SEG+0x360>)
 8000830:	f001 fad7 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	2110      	movs	r1, #16
 8000838:	4850      	ldr	r0, [pc, #320]	; (800097c <display7SEG+0x360>)
 800083a:	f001 fad2 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	484e      	ldr	r0, [pc, #312]	; (800097c <display7SEG+0x360>)
 8000844:	f001 facd 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	484b      	ldr	r0, [pc, #300]	; (800097c <display7SEG+0x360>)
 800084e:	f001 fac8 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 8000852:	e08f      	b.n	8000974 <display7SEG+0x358>
	  case 7:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2101      	movs	r1, #1
 8000858:	4848      	ldr	r0, [pc, #288]	; (800097c <display7SEG+0x360>)
 800085a:	f001 fac2 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2102      	movs	r1, #2
 8000862:	4846      	ldr	r0, [pc, #280]	; (800097c <display7SEG+0x360>)
 8000864:	f001 fabd 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000868:	2200      	movs	r2, #0
 800086a:	2104      	movs	r1, #4
 800086c:	4843      	ldr	r0, [pc, #268]	; (800097c <display7SEG+0x360>)
 800086e:	f001 fab8 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2108      	movs	r1, #8
 8000876:	4841      	ldr	r0, [pc, #260]	; (800097c <display7SEG+0x360>)
 8000878:	f001 fab3 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2110      	movs	r1, #16
 8000880:	483e      	ldr	r0, [pc, #248]	; (800097c <display7SEG+0x360>)
 8000882:	f001 faae 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2120      	movs	r1, #32
 800088a:	483c      	ldr	r0, [pc, #240]	; (800097c <display7SEG+0x360>)
 800088c:	f001 faa9 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000890:	2201      	movs	r2, #1
 8000892:	2140      	movs	r1, #64	; 0x40
 8000894:	4839      	ldr	r0, [pc, #228]	; (800097c <display7SEG+0x360>)
 8000896:	f001 faa4 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 800089a:	e06b      	b.n	8000974 <display7SEG+0x358>
	  case 8:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	2101      	movs	r1, #1
 80008a0:	4836      	ldr	r0, [pc, #216]	; (800097c <display7SEG+0x360>)
 80008a2:	f001 fa9e 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2102      	movs	r1, #2
 80008aa:	4834      	ldr	r0, [pc, #208]	; (800097c <display7SEG+0x360>)
 80008ac:	f001 fa99 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80008b0:	2200      	movs	r2, #0
 80008b2:	2104      	movs	r1, #4
 80008b4:	4831      	ldr	r0, [pc, #196]	; (800097c <display7SEG+0x360>)
 80008b6:	f001 fa94 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2108      	movs	r1, #8
 80008be:	482f      	ldr	r0, [pc, #188]	; (800097c <display7SEG+0x360>)
 80008c0:	f001 fa8f 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	2110      	movs	r1, #16
 80008c8:	482c      	ldr	r0, [pc, #176]	; (800097c <display7SEG+0x360>)
 80008ca:	f001 fa8a 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	482a      	ldr	r0, [pc, #168]	; (800097c <display7SEG+0x360>)
 80008d4:	f001 fa85 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2140      	movs	r1, #64	; 0x40
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <display7SEG+0x360>)
 80008de:	f001 fa80 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 80008e2:	e047      	b.n	8000974 <display7SEG+0x358>
	  case 9:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2101      	movs	r1, #1
 80008e8:	4824      	ldr	r0, [pc, #144]	; (800097c <display7SEG+0x360>)
 80008ea:	f001 fa7a 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2102      	movs	r1, #2
 80008f2:	4822      	ldr	r0, [pc, #136]	; (800097c <display7SEG+0x360>)
 80008f4:	f001 fa75 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	2104      	movs	r1, #4
 80008fc:	481f      	ldr	r0, [pc, #124]	; (800097c <display7SEG+0x360>)
 80008fe:	f001 fa70 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000902:	2200      	movs	r2, #0
 8000904:	2108      	movs	r1, #8
 8000906:	481d      	ldr	r0, [pc, #116]	; (800097c <display7SEG+0x360>)
 8000908:	f001 fa6b 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 800090c:	2201      	movs	r2, #1
 800090e:	2110      	movs	r1, #16
 8000910:	481a      	ldr	r0, [pc, #104]	; (800097c <display7SEG+0x360>)
 8000912:	f001 fa66 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2120      	movs	r1, #32
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <display7SEG+0x360>)
 800091c:	f001 fa61 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000920:	2200      	movs	r2, #0
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	4815      	ldr	r0, [pc, #84]	; (800097c <display7SEG+0x360>)
 8000926:	f001 fa5c 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 800092a:	e023      	b.n	8000974 <display7SEG+0x358>
	  default:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <display7SEG+0x360>)
 8000932:	f001 fa56 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2102      	movs	r1, #2
 800093a:	4810      	ldr	r0, [pc, #64]	; (800097c <display7SEG+0x360>)
 800093c:	f001 fa51 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 8000940:	2201      	movs	r2, #1
 8000942:	2104      	movs	r1, #4
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <display7SEG+0x360>)
 8000946:	f001 fa4c 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800094a:	2201      	movs	r2, #1
 800094c:	2108      	movs	r1, #8
 800094e:	480b      	ldr	r0, [pc, #44]	; (800097c <display7SEG+0x360>)
 8000950:	f001 fa47 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000954:	2201      	movs	r2, #1
 8000956:	2110      	movs	r1, #16
 8000958:	4808      	ldr	r0, [pc, #32]	; (800097c <display7SEG+0x360>)
 800095a:	f001 fa42 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800095e:	2201      	movs	r2, #1
 8000960:	2120      	movs	r1, #32
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <display7SEG+0x360>)
 8000964:	f001 fa3d 	bl	8001de2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2140      	movs	r1, #64	; 0x40
 800096c:	4803      	ldr	r0, [pc, #12]	; (800097c <display7SEG+0x360>)
 800096e:	f001 fa38 	bl	8001de2 <HAL_GPIO_WritePin>
		  break;
 8000972:	bf00      	nop
  }
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40010c00 	.word	0x40010c00

08000980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000984:	f000 ff2c 	bl	80017e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000988:	f000 f834 	bl	80009f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098c:	f000 f8c2 	bl	8000b14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000990:	f000 f86c 	bl	8000a6c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 );
 8000994:	4813      	ldr	r0, [pc, #76]	; (80009e4 <main+0x64>)
 8000996:	f001 fe8b 	bl	80026b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 2000);
 800099a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f93c 	bl	8000c1c <setTimer>
  setTimer(1, 1000);
 80009a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009a8:	2001      	movs	r0, #1
 80009aa:	f000 f937 	bl	8000c1c <setTimer>
  setTimer(2, 1000);
 80009ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b2:	2002      	movs	r0, #2
 80009b4:	f000 f932 	bl	8000c1c <setTimer>
  red_duration = 5;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <main+0x68>)
 80009ba:	2205      	movs	r2, #5
 80009bc:	701a      	strb	r2, [r3, #0]
  amber_duration = 2;
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <main+0x6c>)
 80009c0:	2202      	movs	r2, #2
 80009c2:	701a      	strb	r2, [r3, #0]
  green_duration = 3;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <main+0x70>)
 80009c6:	2203      	movs	r2, #3
 80009c8:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  traffic_light_fsm_sel();
 80009ca:	f000 fc07 	bl	80011dc <traffic_light_fsm_sel>
	  traffic_light_fsm_auto();
 80009ce:	f000 fa1d 	bl	8000e0c <traffic_light_fsm_auto>
	  traffic_light_fsm_man();
 80009d2:	f000 fb21 	bl	8001018 <traffic_light_fsm_man>
	  traffic_light_fsm_set();
 80009d6:	f000 fdfd 	bl	80015d4 <traffic_light_fsm_set>
	  run7SEG();
 80009da:	f7ff fd29 	bl	8000430 <run7SEG>
	  counterRun();
 80009de:	f7ff fc93 	bl	8000308 <counterRun>
	  traffic_light_fsm_sel();
 80009e2:	e7f2      	b.n	80009ca <main+0x4a>
 80009e4:	20000080 	.word	0x20000080
 80009e8:	20000076 	.word	0x20000076
 80009ec:	20000071 	.word	0x20000071
 80009f0:	20000070 	.word	0x20000070

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b090      	sub	sp, #64	; 0x40
 80009f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	2228      	movs	r2, #40	; 0x28
 8000a00:	2100      	movs	r1, #0
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fa04 	bl	8002e10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	601a      	str	r2, [r3, #0]
 8000a0e:	605a      	str	r2, [r3, #4]
 8000a10:	609a      	str	r2, [r3, #8]
 8000a12:	60da      	str	r2, [r3, #12]
 8000a14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a16:	2302      	movs	r3, #2
 8000a18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a1e:	2310      	movs	r3, #16
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0318 	add.w	r3, r7, #24
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fa0a 	bl	8001e44 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a36:	f000 f8db 	bl	8000bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f001 fc76 	bl	8002344 <HAL_RCC_ClockConfig>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a5e:	f000 f8c7 	bl	8000bf0 <Error_Handler>
  }
}
 8000a62:	bf00      	nop
 8000a64:	3740      	adds	r7, #64	; 0x40
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0308 	add.w	r3, r7, #8
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	463b      	mov	r3, r7
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a88:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000a8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000a92:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000aa0:	2209      	movs	r2, #9
 8000aa2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ab0:	4817      	ldr	r0, [pc, #92]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000ab2:	f001 fdad 	bl	8002610 <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000abc:	f000 f898 	bl	8000bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4619      	mov	r1, r3
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000ace:	f001 ff2b 	bl	8002928 <HAL_TIM_ConfigClockSource>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ad8:	f000 f88a 	bl	8000bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4809      	ldr	r0, [pc, #36]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000aea:	f002 f903 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000af4:	f000 f87c 	bl	8000bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  timerInit(htim2.Init.Prescaler, htim2.Init.Period);
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <MX_TIM2_Init+0xa4>)
 8000afe:	68d2      	ldr	r2, [r2, #12]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f8a2 	bl	8000c4c <timerInit>
  /* USER CODE END TIM2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	3718      	adds	r7, #24
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	20000080 	.word	0x20000080

08000b14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0308 	add.w	r3, r7, #8
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_GPIO_Init+0xb8>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <MX_GPIO_Init+0xb8>)
 8000b2e:	f043 0304 	orr.w	r3, r3, #4
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_GPIO_Init+0xb8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0304 	and.w	r3, r3, #4
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <MX_GPIO_Init+0xb8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <MX_GPIO_Init+0xb8>)
 8000b46:	f043 0308 	orr.w	r3, r3, #8
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_GPIO_Init+0xb8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0308 	and.w	r3, r3, #8
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000b5e:	481c      	ldr	r0, [pc, #112]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b60:	f001 f93f 	bl	8001de2 <HAL_GPIO_WritePin>
                          |LED_RED0_Pin|LED_AMBER0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
                          |LED_AMBER1_Pin|LED_GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000b64:	2200      	movs	r2, #0
 8000b66:	217f      	movs	r1, #127	; 0x7f
 8000b68:	481a      	ldr	r0, [pc, #104]	; (8000bd4 <MX_GPIO_Init+0xc0>)
 8000b6a:	f001 f93a 	bl	8001de2 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED0_Pin LED_AMBER0_Pin LED_GREEN0_Pin LED_RED1_Pin
                           LED_AMBER1_Pin LED_GREEN1_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b6e:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000b72:	60bb      	str	r3, [r7, #8]
                          |LED_RED0_Pin|LED_AMBER0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
                          |LED_AMBER1_Pin|LED_GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	4619      	mov	r1, r3
 8000b86:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000b88:	f000 ff9a 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000b8c:	237f      	movs	r3, #127	; 0x7f
 8000b8e:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480c      	ldr	r0, [pc, #48]	; (8000bd4 <MX_GPIO_Init+0xc0>)
 8000ba4:	f000 ff8c 	bl	8001ac0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MODE_Pin BT_SET_Pin BT_OK_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin|BT_SET_Pin|BT_OK_Pin;
 8000ba8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_GPIO_Init+0xbc>)
 8000bbe:	f000 ff7f 	bl	8001ac0 <HAL_GPIO_Init>

}
 8000bc2:	bf00      	nop
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00

08000bd8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
	timerRun();
 8000be0:	f000 f852 	bl	8000c88 <timerRun>
	buttonRun();
 8000be4:	f7ff fab2 	bl	800014c <buttonRun>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf4:	b672      	cpsid	i
}
 8000bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <Error_Handler+0x8>
	...

08000bfc <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <isFlagTimer+0x1c>)
 8000c0a:	5cd3      	ldrb	r3, [r2, r3]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000006c 	.word	0x2000006c

08000c1c <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <setTimer+0x28>)
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration;
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	4905      	ldr	r1, [pc, #20]	; (8000c48 <setTimer+0x2c>)
 8000c34:	683a      	ldr	r2, [r7, #0]
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	2000006c 	.word	0x2000006c
 8000c48:	20000060 	.word	0x20000060

08000c4c <timerInit>:
void timerInit(uint32_t prescaler, uint32_t period){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
 8000c56:	f001 fcb3 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8000c5a:	60f8      	str	r0, [r7, #12]
	interrupt_duration  = (prescaler+1)*(period+1)*1000/frequency;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	3201      	adds	r2, #1
 8000c64:	fb02 f303 	mul.w	r3, r2, r3
 8000c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c6c:	fb02 f203 	mul.w	r2, r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <timerInit+0x38>)
 8000c78:	6013      	str	r3, [r2, #0]
//	interrupt_duration = 10;
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000014 	.word	0x20000014

08000c88 <timerRun>:
void timerRun(){
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8000c8e:	2300      	movs	r3, #0
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e01d      	b.n	8000cd0 <timerRun+0x48>
		if(timer_counters[i] > 0){
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	4a13      	ldr	r2, [pc, #76]	; (8000ce4 <timerRun+0x5c>)
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d014      	beq.n	8000cca <timerRun+0x42>
			timer_counters[i] -= interrupt_duration;
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a10      	ldr	r2, [pc, #64]	; (8000ce4 <timerRun+0x5c>)
 8000ca4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <timerRun+0x60>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	1a8a      	subs	r2, r1, r2
 8000cb0:	490c      	ldr	r1, [pc, #48]	; (8000ce4 <timerRun+0x5c>)
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <timerRun+0x5c>)
 8000cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <timerRun+0x42>
				timer_flags[i] = 1;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4a09      	ldr	r2, [pc, #36]	; (8000cec <timerRun+0x64>)
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	71fb      	strb	r3, [r7, #7]
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d9de      	bls.n	8000c94 <timerRun+0xc>
			}
		}
	}

}
 8000cd6:	bf00      	nop
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000060 	.word	0x20000060
 8000ce8:	20000014 	.word	0x20000014
 8000cec:	2000006c 	.word	0x2000006c

08000cf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b085      	sub	sp, #20
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <HAL_MspInit+0x5c>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	4a14      	ldr	r2, [pc, #80]	; (8000d4c <HAL_MspInit+0x5c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6193      	str	r3, [r2, #24]
 8000d02:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d10:	69db      	ldr	r3, [r3, #28]
 8000d12:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	61d3      	str	r3, [r2, #28]
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HAL_MspInit+0x5c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_MspInit+0x60>)
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4a04      	ldr	r2, [pc, #16]	; (8000d50 <HAL_MspInit+0x60>)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	3714      	adds	r7, #20
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010000 	.word	0x40010000

08000d54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d64:	d113      	bne.n	8000d8e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_TIM_Base_MspInit+0x44>)
 8000d68:	69db      	ldr	r3, [r3, #28]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_TIM_Base_MspInit+0x44>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	61d3      	str	r3, [r2, #28]
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HAL_TIM_Base_MspInit+0x44>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2100      	movs	r1, #0
 8000d82:	201c      	movs	r0, #28
 8000d84:	f000 fe65 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d88:	201c      	movs	r0, #28
 8000d8a:	f000 fe7e 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr

08000dc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de2:	f000 fd43 	bl	800186c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM2_IRQHandler+0x10>)
 8000df2:	f001 fca9 	bl	8002748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000080 	.word	0x20000080

08000e00 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <traffic_light_fsm_auto>:
 */


#include "traffic_light_fsm_auto.h"

void traffic_light_fsm_auto(){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	switch (status) {
 8000e10:	4b7b      	ldr	r3, [pc, #492]	; (8001000 <traffic_light_fsm_auto+0x1f4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	3b06      	subs	r3, #6
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	f200 80e7 	bhi.w	8000fea <traffic_light_fsm_auto+0x1de>
 8000e1c:	a201      	add	r2, pc, #4	; (adr r2, 8000e24 <traffic_light_fsm_auto+0x18>)
 8000e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e22:	bf00      	nop
 8000e24:	08000e35 	.word	0x08000e35
 8000e28:	08000ea9 	.word	0x08000ea9
 8000e2c:	08000f1b 	.word	0x08000f1b
 8000e30:	08000f79 	.word	0x08000f79
		case AUTO_RED_GREEN:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2120      	movs	r1, #32
 8000e38:	4872      	ldr	r0, [pc, #456]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000e3a:	f000 ffd2 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8000e3e:	2201      	movs	r2, #1
 8000e40:	2140      	movs	r1, #64	; 0x40
 8000e42:	4870      	ldr	r0, [pc, #448]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000e44:	f000 ffcd 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	486d      	ldr	r0, [pc, #436]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000e4e:	f000 ffc8 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e58:	486a      	ldr	r0, [pc, #424]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000e5a:	f000 ffc2 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e64:	4867      	ldr	r0, [pc, #412]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000e66:	f000 ffbc 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e70:	4864      	ldr	r0, [pc, #400]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000e72:	f000 ffb6 	bl	8001de2 <HAL_GPIO_WritePin>
			if(counters[1] == 0){
 8000e76:	4b64      	ldr	r3, [pc, #400]	; (8001008 <traffic_light_fsm_auto+0x1fc>)
 8000e78:	785b      	ldrb	r3, [r3, #1]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d109      	bne.n	8000e92 <traffic_light_fsm_auto+0x86>
				status = AUTO_RED_AMBER;
 8000e7e:	4b60      	ldr	r3, [pc, #384]	; (8001000 <traffic_light_fsm_auto+0x1f4>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	701a      	strb	r2, [r3, #0]
				setCounter(1, amber_duration);
 8000e84:	4b61      	ldr	r3, [pc, #388]	; (800100c <traffic_light_fsm_auto+0x200>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fa1c 	bl	80002c8 <setCounter>
			}else if(isButtonPressed(0)){
				status = INIT;
			}
			break;
 8000e90:	e0ad      	b.n	8000fee <traffic_light_fsm_auto+0x1e2>
			}else if(isButtonPressed(0)){
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff f9e6 	bl	8000264 <isButtonPressed>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	f000 80a7 	beq.w	8000fee <traffic_light_fsm_auto+0x1e2>
				status = INIT;
 8000ea0:	4b57      	ldr	r3, [pc, #348]	; (8001000 <traffic_light_fsm_auto+0x1f4>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	701a      	strb	r2, [r3, #0]
			break;
 8000ea6:	e0a2      	b.n	8000fee <traffic_light_fsm_auto+0x1e2>
		case AUTO_RED_AMBER:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4855      	ldr	r0, [pc, #340]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000eae:	f000 ff98 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2140      	movs	r1, #64	; 0x40
 8000eb6:	4853      	ldr	r0, [pc, #332]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000eb8:	f000 ff93 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2180      	movs	r1, #128	; 0x80
 8000ec0:	4850      	ldr	r0, [pc, #320]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000ec2:	f000 ff8e 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ecc:	484d      	ldr	r0, [pc, #308]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000ece:	f000 ff88 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ed8:	484a      	ldr	r0, [pc, #296]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000eda:	f000 ff82 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee4:	4847      	ldr	r0, [pc, #284]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000ee6:	f000 ff7c 	bl	8001de2 <HAL_GPIO_WritePin>
			if(counters[1]==0 || counters[0]==0){
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <traffic_light_fsm_auto+0x1fc>)
 8000eec:	785b      	ldrb	r3, [r3, #1]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <traffic_light_fsm_auto+0xee>
 8000ef2:	4b45      	ldr	r3, [pc, #276]	; (8001008 <traffic_light_fsm_auto+0x1fc>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d17b      	bne.n	8000ff2 <traffic_light_fsm_auto+0x1e6>
				status = AUTO_GREEN_RED;
 8000efa:	4b41      	ldr	r3, [pc, #260]	; (8001000 <traffic_light_fsm_auto+0x1f4>)
 8000efc:	2208      	movs	r2, #8
 8000efe:	701a      	strb	r2, [r3, #0]
				setCounter(0, green_duration);
 8000f00:	4b43      	ldr	r3, [pc, #268]	; (8001010 <traffic_light_fsm_auto+0x204>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	2000      	movs	r0, #0
 8000f08:	f7ff f9de 	bl	80002c8 <setCounter>
				setCounter(1, red_duration);
 8000f0c:	4b41      	ldr	r3, [pc, #260]	; (8001014 <traffic_light_fsm_auto+0x208>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	2001      	movs	r0, #1
 8000f14:	f7ff f9d8 	bl	80002c8 <setCounter>
			}
			break;
 8000f18:	e06b      	b.n	8000ff2 <traffic_light_fsm_auto+0x1e6>
		case AUTO_GREEN_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	2120      	movs	r1, #32
 8000f1e:	4839      	ldr	r0, [pc, #228]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f20:	f000 ff5f 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2140      	movs	r1, #64	; 0x40
 8000f28:	4836      	ldr	r0, [pc, #216]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f2a:	f000 ff5a 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2180      	movs	r1, #128	; 0x80
 8000f32:	4834      	ldr	r0, [pc, #208]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f34:	f000 ff55 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3e:	4831      	ldr	r0, [pc, #196]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f40:	f000 ff4f 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4a:	482e      	ldr	r0, [pc, #184]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f4c:	f000 ff49 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f56:	482b      	ldr	r0, [pc, #172]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f58:	f000 ff43 	bl	8001de2 <HAL_GPIO_WritePin>
			if(counters[0]==0){
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <traffic_light_fsm_auto+0x1fc>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d148      	bne.n	8000ff6 <traffic_light_fsm_auto+0x1ea>
				status = AUTO_AMBER_RED;
 8000f64:	4b26      	ldr	r3, [pc, #152]	; (8001000 <traffic_light_fsm_auto+0x1f4>)
 8000f66:	2209      	movs	r2, #9
 8000f68:	701a      	strb	r2, [r3, #0]
				setCounter(0, amber_duration);
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <traffic_light_fsm_auto+0x200>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2000      	movs	r0, #0
 8000f72:	f7ff f9a9 	bl	80002c8 <setCounter>
			}
			break;
 8000f76:	e03e      	b.n	8000ff6 <traffic_light_fsm_auto+0x1ea>
		case AUTO_AMBER_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8000f78:	2201      	movs	r2, #1
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	4821      	ldr	r0, [pc, #132]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f7e:	f000 ff30 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, RESET);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2140      	movs	r1, #64	; 0x40
 8000f86:	481f      	ldr	r0, [pc, #124]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f88:	f000 ff2b 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2180      	movs	r1, #128	; 0x80
 8000f90:	481c      	ldr	r0, [pc, #112]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f92:	f000 ff26 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9c:	4819      	ldr	r0, [pc, #100]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000f9e:	f000 ff20 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa8:	4816      	ldr	r0, [pc, #88]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000faa:	f000 ff1a 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb4:	4813      	ldr	r0, [pc, #76]	; (8001004 <traffic_light_fsm_auto+0x1f8>)
 8000fb6:	f000 ff14 	bl	8001de2 <HAL_GPIO_WritePin>
			if(counters[0]==0 || counters[1] == 0){
 8000fba:	4b13      	ldr	r3, [pc, #76]	; (8001008 <traffic_light_fsm_auto+0x1fc>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <traffic_light_fsm_auto+0x1be>
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <traffic_light_fsm_auto+0x1fc>)
 8000fc4:	785b      	ldrb	r3, [r3, #1]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d117      	bne.n	8000ffa <traffic_light_fsm_auto+0x1ee>
				status = AUTO_RED_GREEN;
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <traffic_light_fsm_auto+0x1f4>)
 8000fcc:	2206      	movs	r2, #6
 8000fce:	701a      	strb	r2, [r3, #0]
				setCounter(0, red_duration);
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <traffic_light_fsm_auto+0x208>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f7ff f976 	bl	80002c8 <setCounter>
				setCounter(1, green_duration);
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <traffic_light_fsm_auto+0x204>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff f970 	bl	80002c8 <setCounter>
			}
			break;
 8000fe8:	e007      	b.n	8000ffa <traffic_light_fsm_auto+0x1ee>
		default:
			break;
 8000fea:	bf00      	nop
 8000fec:	e006      	b.n	8000ffc <traffic_light_fsm_auto+0x1f0>
			break;
 8000fee:	bf00      	nop
 8000ff0:	e004      	b.n	8000ffc <traffic_light_fsm_auto+0x1f0>
			break;
 8000ff2:	bf00      	nop
 8000ff4:	e002      	b.n	8000ffc <traffic_light_fsm_auto+0x1f0>
			break;
 8000ff6:	bf00      	nop
 8000ff8:	e000      	b.n	8000ffc <traffic_light_fsm_auto+0x1f0>
			break;
 8000ffa:	bf00      	nop
	}
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000007c 	.word	0x2000007c
 8001004:	40010800 	.word	0x40010800
 8001008:	20000074 	.word	0x20000074
 800100c:	20000071 	.word	0x20000071
 8001010:	20000070 	.word	0x20000070
 8001014:	20000076 	.word	0x20000076

08001018 <traffic_light_fsm_man>:
 *      Author: hachi
 */

#include "traffic_light_fsm_man.h"

void traffic_light_fsm_man(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	switch (status) {
 800101c:	4b6d      	ldr	r3, [pc, #436]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	3b0b      	subs	r3, #11
 8001022:	2b03      	cmp	r3, #3
 8001024:	f200 80ca 	bhi.w	80011bc <traffic_light_fsm_man+0x1a4>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <traffic_light_fsm_man+0x18>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001041 	.word	0x08001041
 8001034:	080010cb 	.word	0x080010cb
 8001038:	0800110d 	.word	0x0800110d
 800103c:	08001181 	.word	0x08001181
		break;
		case MAN_RED_GREEN:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2120      	movs	r1, #32
 8001044:	4864      	ldr	r0, [pc, #400]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001046:	f000 fecc 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 800104a:	2201      	movs	r2, #1
 800104c:	2140      	movs	r1, #64	; 0x40
 800104e:	4862      	ldr	r0, [pc, #392]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001050:	f000 fec7 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	485f      	ldr	r0, [pc, #380]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 800105a:	f000 fec2 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001064:	485c      	ldr	r0, [pc, #368]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001066:	f000 febc 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001070:	4859      	ldr	r0, [pc, #356]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001072:	f000 feb6 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800107c:	4856      	ldr	r0, [pc, #344]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 800107e:	f000 feb0 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 8001082:	2000      	movs	r0, #0
 8001084:	f7ff fdba 	bl	8000bfc <isFlagTimer>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <traffic_light_fsm_man+0x7e>
				status = INIT;
 800108e:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
				status = SEL_MAN;
			}else if(isButtonPressed(1)){
				status = MAN_RED_AMBER;
				setTimer(0, 2000);
			}
			break;
 8001094:	e094      	b.n	80011c0 <traffic_light_fsm_man+0x1a8>
			}else if(isButtonPressed(0)){
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff f8e4 	bl	8000264 <isButtonPressed>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <traffic_light_fsm_man+0x92>
				status = SEL_MAN;
 80010a2:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 80010a4:	2202      	movs	r2, #2
 80010a6:	701a      	strb	r2, [r3, #0]
			break;
 80010a8:	e08a      	b.n	80011c0 <traffic_light_fsm_man+0x1a8>
			}else if(isButtonPressed(1)){
 80010aa:	2001      	movs	r0, #1
 80010ac:	f7ff f8da 	bl	8000264 <isButtonPressed>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8084 	beq.w	80011c0 <traffic_light_fsm_man+0x1a8>
				status = MAN_RED_AMBER;
 80010b8:	4b46      	ldr	r3, [pc, #280]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	701a      	strb	r2, [r3, #0]
				setTimer(0, 2000);
 80010be:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010c2:	2000      	movs	r0, #0
 80010c4:	f7ff fdaa 	bl	8000c1c <setTimer>
			break;
 80010c8:	e07a      	b.n	80011c0 <traffic_light_fsm_man+0x1a8>
		case MAN_RED_AMBER:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80010ca:	2201      	movs	r2, #1
 80010cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d0:	4841      	ldr	r0, [pc, #260]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 80010d2:	f000 fe86 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010dc:	483e      	ldr	r0, [pc, #248]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 80010de:	f000 fe80 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	483b      	ldr	r0, [pc, #236]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 80010ea:	f000 fe7a 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 80010ee:	2000      	movs	r0, #0
 80010f0:	f7ff fd84 	bl	8000bfc <isFlagTimer>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d064      	beq.n	80011c4 <traffic_light_fsm_man+0x1ac>
				status = MAN_GREEN_RED;
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 80010fc:	220d      	movs	r2, #13
 80010fe:	701a      	strb	r2, [r3, #0]
				setTimer(0, 10000);
 8001100:	f242 7110 	movw	r1, #10000	; 0x2710
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff fd89 	bl	8000c1c <setTimer>
			}
			break;
 800110a:	e05b      	b.n	80011c4 <traffic_light_fsm_man+0x1ac>
		case MAN_GREEN_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2120      	movs	r1, #32
 8001110:	4831      	ldr	r0, [pc, #196]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001112:	f000 fe66 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001116:	2201      	movs	r2, #1
 8001118:	2140      	movs	r1, #64	; 0x40
 800111a:	482f      	ldr	r0, [pc, #188]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 800111c:	f000 fe61 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2180      	movs	r1, #128	; 0x80
 8001124:	482c      	ldr	r0, [pc, #176]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001126:	f000 fe5c 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001130:	4829      	ldr	r0, [pc, #164]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001132:	f000 fe56 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8001136:	2201      	movs	r2, #1
 8001138:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113c:	4826      	ldr	r0, [pc, #152]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 800113e:	f000 fe50 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001148:	4823      	ldr	r0, [pc, #140]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 800114a:	f000 fe4a 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 800114e:	2000      	movs	r0, #0
 8001150:	f7ff fd54 	bl	8000bfc <isFlagTimer>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <traffic_light_fsm_man+0x14a>
				status = INIT;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
			}else if(isButtonPressed(1)){
				status = MAN_AMBER_RED;
				setTimer(0, 2000);
			}
			break;
 8001160:	e032      	b.n	80011c8 <traffic_light_fsm_man+0x1b0>
			}else if(isButtonPressed(1)){
 8001162:	2001      	movs	r0, #1
 8001164:	f7ff f87e 	bl	8000264 <isButtonPressed>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d02c      	beq.n	80011c8 <traffic_light_fsm_man+0x1b0>
				status = MAN_AMBER_RED;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 8001170:	220e      	movs	r2, #14
 8001172:	701a      	strb	r2, [r3, #0]
				setTimer(0, 2000);
 8001174:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fd4f 	bl	8000c1c <setTimer>
			break;
 800117e:	e023      	b.n	80011c8 <traffic_light_fsm_man+0x1b0>
		case MAN_AMBER_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	4814      	ldr	r0, [pc, #80]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001186:	f000 fe2c 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2140      	movs	r1, #64	; 0x40
 800118e:	4812      	ldr	r0, [pc, #72]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 8001190:	f000 fe27 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8001194:	2201      	movs	r2, #1
 8001196:	2180      	movs	r1, #128	; 0x80
 8001198:	480f      	ldr	r0, [pc, #60]	; (80011d8 <traffic_light_fsm_man+0x1c0>)
 800119a:	f000 fe22 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fd2c 	bl	8000bfc <isFlagTimer>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d010      	beq.n	80011cc <traffic_light_fsm_man+0x1b4>
				status = MAN_RED_GREEN;
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <traffic_light_fsm_man+0x1bc>)
 80011ac:	220b      	movs	r2, #11
 80011ae:	701a      	strb	r2, [r3, #0]
				setTimer(0, 10000);
 80011b0:	f242 7110 	movw	r1, #10000	; 0x2710
 80011b4:	2000      	movs	r0, #0
 80011b6:	f7ff fd31 	bl	8000c1c <setTimer>
			}
			break;
 80011ba:	e007      	b.n	80011cc <traffic_light_fsm_man+0x1b4>
		default:
			break;
 80011bc:	bf00      	nop
 80011be:	e006      	b.n	80011ce <traffic_light_fsm_man+0x1b6>
			break;
 80011c0:	bf00      	nop
 80011c2:	e004      	b.n	80011ce <traffic_light_fsm_man+0x1b6>
			break;
 80011c4:	bf00      	nop
 80011c6:	e002      	b.n	80011ce <traffic_light_fsm_man+0x1b6>
			break;
 80011c8:	bf00      	nop
 80011ca:	e000      	b.n	80011ce <traffic_light_fsm_man+0x1b6>
			break;
 80011cc:	bf00      	nop
	}
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000007c 	.word	0x2000007c
 80011d8:	40010800 	.word	0x40010800

080011dc <traffic_light_fsm_sel>:
 */


#include "traffic_light_fsm_sel.h"

void traffic_light_fsm_sel(){
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	switch (status) {
 80011e0:	4bbf      	ldr	r3, [pc, #764]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b05      	cmp	r3, #5
 80011e6:	f200 81e1 	bhi.w	80015ac <traffic_light_fsm_sel+0x3d0>
 80011ea:	a201      	add	r2, pc, #4	; (adr r2, 80011f0 <traffic_light_fsm_sel+0x14>)
 80011ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011f0:	08001209 	.word	0x08001209
 80011f4:	0800122b 	.word	0x0800122b
 80011f8:	080012cb 	.word	0x080012cb
 80011fc:	0800136d 	.word	0x0800136d
 8001200:	08001427 	.word	0x08001427
 8001204:	080014f5 	.word	0x080014f5
		case INIT:
			if(1){
				status = SEL_AUTO;
 8001208:	4bb5      	ldr	r3, [pc, #724]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
				setCounter(0, 0);
 800120e:	2100      	movs	r1, #0
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff f859 	bl	80002c8 <setCounter>
				setCounter(1, 0);
 8001216:	2100      	movs	r1, #0
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff f855 	bl	80002c8 <setCounter>
				setTimer(0, 5000);
 800121e:	f241 3188 	movw	r1, #5000	; 0x1388
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fcfa 	bl	8000c1c <setTimer>
			}
			break;
 8001228:	e1cb      	b.n	80015c2 <traffic_light_fsm_sel+0x3e6>
		case SEL_AUTO:
			display7SEG(1);
 800122a:	2001      	movs	r0, #1
 800122c:	f7ff f9f6 	bl	800061c <display7SEG>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	2120      	movs	r1, #32
 8001234:	48ab      	ldr	r0, [pc, #684]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001236:	f000 fdd4 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2140      	movs	r1, #64	; 0x40
 800123e:	48a9      	ldr	r0, [pc, #676]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001240:	f000 fdcf 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	48a6      	ldr	r0, [pc, #664]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800124a:	f000 fdca 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001254:	48a3      	ldr	r0, [pc, #652]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001256:	f000 fdc4 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001260:	48a0      	ldr	r0, [pc, #640]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001262:	f000 fdbe 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800126c:	489d      	ldr	r0, [pc, #628]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800126e:	f000 fdb8 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(0) || isButtonPressed(2)){
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fcc2 	bl	8000bfc <isFlagTimer>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d105      	bne.n	800128a <traffic_light_fsm_sel+0xae>
 800127e:	2002      	movs	r0, #2
 8001280:	f7fe fff0 	bl	8000264 <isButtonPressed>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00f      	beq.n	80012aa <traffic_light_fsm_sel+0xce>
				status = AUTO_RED_GREEN;
 800128a:	4b95      	ldr	r3, [pc, #596]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 800128c:	2206      	movs	r2, #6
 800128e:	701a      	strb	r2, [r3, #0]
				setCounter(0, red_duration);
 8001290:	4b95      	ldr	r3, [pc, #596]	; (80014e8 <traffic_light_fsm_sel+0x30c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	4619      	mov	r1, r3
 8001296:	2000      	movs	r0, #0
 8001298:	f7ff f816 	bl	80002c8 <setCounter>
				setCounter(1, green_duration);
 800129c:	4b93      	ldr	r3, [pc, #588]	; (80014ec <traffic_light_fsm_sel+0x310>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff f810 	bl	80002c8 <setCounter>
			}else if(isButtonPressed(0)){
				status = SEL_MAN;
				setTimer(0, 5000);
			}
			break;
 80012a8:	e182      	b.n	80015b0 <traffic_light_fsm_sel+0x3d4>
			}else if(isButtonPressed(0)){
 80012aa:	2000      	movs	r0, #0
 80012ac:	f7fe ffda 	bl	8000264 <isButtonPressed>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 817c 	beq.w	80015b0 <traffic_light_fsm_sel+0x3d4>
				status = SEL_MAN;
 80012b8:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 80012ba:	2202      	movs	r2, #2
 80012bc:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 80012be:	f241 3188 	movw	r1, #5000	; 0x1388
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcaa 	bl	8000c1c <setTimer>
			break;
 80012c8:	e172      	b.n	80015b0 <traffic_light_fsm_sel+0x3d4>
		case SEL_MAN:
			display7SEG(2);
 80012ca:	2002      	movs	r0, #2
 80012cc:	f7ff f9a6 	bl	800061c <display7SEG>
			if(isFlagTimer(2)){
 80012d0:	2002      	movs	r0, #2
 80012d2:	f7ff fc93 	bl	8000bfc <isFlagTimer>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d01f      	beq.n	800131c <traffic_light_fsm_sel+0x140>
				setTimer(2, 500);
 80012dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012e0:	2002      	movs	r0, #2
 80012e2:	f7ff fc9b 	bl	8000c1c <setTimer>
				HAL_GPIO_TogglePin(LED_RED0_GPIO_Port, LED_RED0_Pin);
 80012e6:	2120      	movs	r1, #32
 80012e8:	487e      	ldr	r0, [pc, #504]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 80012ea:	f000 fd92 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin);
 80012ee:	2140      	movs	r1, #64	; 0x40
 80012f0:	487c      	ldr	r0, [pc, #496]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 80012f2:	f000 fd8e 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin);
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	487a      	ldr	r0, [pc, #488]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 80012fa:	f000 fd8a 	bl	8001e12 <HAL_GPIO_TogglePin>

				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	4878      	ldr	r0, [pc, #480]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001304:	f000 fd85 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin);
 8001308:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130c:	4875      	ldr	r0, [pc, #468]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800130e:	f000 fd80 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8001312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001316:	4873      	ldr	r0, [pc, #460]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001318:	f000 fd7b 	bl	8001e12 <HAL_GPIO_TogglePin>
			}

			if(isFlagTimer(0)){
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fc6d 	bl	8000bfc <isFlagTimer>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <traffic_light_fsm_sel+0x152>
				status = INIT;
 8001328:	4b6d      	ldr	r3, [pc, #436]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 800132e:	2002      	movs	r0, #2
 8001330:	f7fe ff98 	bl	8000264 <isButtonPressed>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d008      	beq.n	800134c <traffic_light_fsm_sel+0x170>
				status = MAN_RED_GREEN;
 800133a:	4b69      	ldr	r3, [pc, #420]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 800133c:	220b      	movs	r2, #11
 800133e:	701a      	strb	r2, [r3, #0]
				setTimer(0, 10000);
 8001340:	f242 7110 	movw	r1, #10000	; 0x2710
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff fc69 	bl	8000c1c <setTimer>
			}else if(isButtonPressed(0)){
				status = SEL_RED;
				setTimer(0, 5000);
			}
			break;
 800134a:	e133      	b.n	80015b4 <traffic_light_fsm_sel+0x3d8>
			}else if(isButtonPressed(0)){
 800134c:	2000      	movs	r0, #0
 800134e:	f7fe ff89 	bl	8000264 <isButtonPressed>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 812d 	beq.w	80015b4 <traffic_light_fsm_sel+0x3d8>
				status = SEL_RED;
 800135a:	4b61      	ldr	r3, [pc, #388]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 800135c:	2203      	movs	r2, #3
 800135e:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 8001360:	f241 3188 	movw	r1, #5000	; 0x1388
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fc59 	bl	8000c1c <setTimer>
			break;
 800136a:	e123      	b.n	80015b4 <traffic_light_fsm_sel+0x3d8>
		case SEL_RED:
			display7SEG(3);
 800136c:	2003      	movs	r0, #3
 800136e:	f7ff f955 	bl	800061c <display7SEG>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	485b      	ldr	r0, [pc, #364]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001378:	f000 fd33 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 800137c:	2201      	movs	r2, #1
 800137e:	2180      	movs	r1, #128	; 0x80
 8001380:	4858      	ldr	r0, [pc, #352]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001382:	f000 fd2e 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8001386:	2201      	movs	r2, #1
 8001388:	f44f 7100 	mov.w	r1, #512	; 0x200
 800138c:	4855      	ldr	r0, [pc, #340]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800138e:	f000 fd28 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001398:	4852      	ldr	r0, [pc, #328]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800139a:	f000 fd22 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(2)){
 800139e:	2002      	movs	r0, #2
 80013a0:	f7ff fc2c 	bl	8000bfc <isFlagTimer>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00d      	beq.n	80013c6 <traffic_light_fsm_sel+0x1ea>
				setTimer(2, 500);
 80013aa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ae:	2002      	movs	r0, #2
 80013b0:	f7ff fc34 	bl	8000c1c <setTimer>
				HAL_GPIO_TogglePin(LED_RED0_GPIO_Port, LED_RED0_Pin);
 80013b4:	2120      	movs	r1, #32
 80013b6:	484b      	ldr	r0, [pc, #300]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 80013b8:	f000 fd2b 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80013bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c0:	4848      	ldr	r0, [pc, #288]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 80013c2:	f000 fd26 	bl	8001e12 <HAL_GPIO_TogglePin>
			}
			if(isFlagTimer(0)){
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fc18 	bl	8000bfc <isFlagTimer>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d002      	beq.n	80013d8 <traffic_light_fsm_sel+0x1fc>
				status = INIT;
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 80013d8:	2002      	movs	r0, #2
 80013da:	f7fe ff43 	bl	8000264 <isButtonPressed>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d010      	beq.n	8001406 <traffic_light_fsm_sel+0x22a>
				status = SET_RED;
 80013e4:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 80013e6:	2214      	movs	r2, #20
 80013e8:	701a      	strb	r2, [r3, #0]
				setTimer(0, 20000);
 80013ea:	f644 6120 	movw	r1, #20000	; 0x4e20
 80013ee:	2000      	movs	r0, #0
 80013f0:	f7ff fc14 	bl	8000c1c <setTimer>
				updateBuffer7SEG(red_duration, red_duration);
 80013f4:	4b3c      	ldr	r3, [pc, #240]	; (80014e8 <traffic_light_fsm_sel+0x30c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4a3b      	ldr	r2, [pc, #236]	; (80014e8 <traffic_light_fsm_sel+0x30c>)
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f836 	bl	8000470 <updateBuffer7SEG>
			}else if(isButtonPressed(0)){
				status = SEL_AMBER;
				setTimer(0, 5000);
			}
			break;
 8001404:	e0d8      	b.n	80015b8 <traffic_light_fsm_sel+0x3dc>
			}else if(isButtonPressed(0)){
 8001406:	2000      	movs	r0, #0
 8001408:	f7fe ff2c 	bl	8000264 <isButtonPressed>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 80d2 	beq.w	80015b8 <traffic_light_fsm_sel+0x3dc>
				status = SEL_AMBER;
 8001414:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 8001416:	2204      	movs	r2, #4
 8001418:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 800141a:	f241 3188 	movw	r1, #5000	; 0x1388
 800141e:	2000      	movs	r0, #0
 8001420:	f7ff fbfc 	bl	8000c1c <setTimer>
			break;
 8001424:	e0c8      	b.n	80015b8 <traffic_light_fsm_sel+0x3dc>
		case SEL_AMBER:
			display7SEG(4);
 8001426:	2004      	movs	r0, #4
 8001428:	f7ff f8f8 	bl	800061c <display7SEG>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 800142c:	2201      	movs	r2, #1
 800142e:	2120      	movs	r1, #32
 8001430:	482c      	ldr	r0, [pc, #176]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001432:	f000 fcd6 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2180      	movs	r1, #128	; 0x80
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800143c:	f000 fcd1 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001448:	f000 fccb 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001452:	4824      	ldr	r0, [pc, #144]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001454:	f000 fcc5 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(2)){
 8001458:	2002      	movs	r0, #2
 800145a:	f7ff fbcf 	bl	8000bfc <isFlagTimer>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00d      	beq.n	8001480 <traffic_light_fsm_sel+0x2a4>
				setTimer(2, 500);
 8001464:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001468:	2002      	movs	r0, #2
 800146a:	f7ff fbd7 	bl	8000c1c <setTimer>
				HAL_GPIO_TogglePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin);
 800146e:	2140      	movs	r1, #64	; 0x40
 8001470:	481c      	ldr	r0, [pc, #112]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 8001472:	f000 fcce 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin);
 8001476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800147a:	481a      	ldr	r0, [pc, #104]	; (80014e4 <traffic_light_fsm_sel+0x308>)
 800147c:	f000 fcc9 	bl	8001e12 <HAL_GPIO_TogglePin>
			}
			if(isFlagTimer(0)){
 8001480:	2000      	movs	r0, #0
 8001482:	f7ff fbbb 	bl	8000bfc <isFlagTimer>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <traffic_light_fsm_sel+0x2b6>
				status = INIT;
 800148c:	4b14      	ldr	r3, [pc, #80]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 8001492:	2002      	movs	r0, #2
 8001494:	f7fe fee6 	bl	8000264 <isButtonPressed>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d010      	beq.n	80014c0 <traffic_light_fsm_sel+0x2e4>
				status = SET_AMBER;
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 80014a0:	2215      	movs	r2, #21
 80014a2:	701a      	strb	r2, [r3, #0]
				setTimer(0, 20000);
 80014a4:	f644 6120 	movw	r1, #20000	; 0x4e20
 80014a8:	2000      	movs	r0, #0
 80014aa:	f7ff fbb7 	bl	8000c1c <setTimer>
				updateBuffer7SEG(amber_duration, amber_duration);
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <traffic_light_fsm_sel+0x314>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <traffic_light_fsm_sel+0x314>)
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	4611      	mov	r1, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7fe ffd9 	bl	8000470 <updateBuffer7SEG>
			}else if(isButtonPressed(0)){
				status = SEL_GREEN;
				setTimer(0, 5000);
			}
			break;
 80014be:	e07d      	b.n	80015bc <traffic_light_fsm_sel+0x3e0>
			}else if(isButtonPressed(0)){
 80014c0:	2000      	movs	r0, #0
 80014c2:	f7fe fecf 	bl	8000264 <isButtonPressed>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d077      	beq.n	80015bc <traffic_light_fsm_sel+0x3e0>
				status = SEL_GREEN;
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <traffic_light_fsm_sel+0x304>)
 80014ce:	2205      	movs	r2, #5
 80014d0:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 80014d2:	f241 3188 	movw	r1, #5000	; 0x1388
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fba0 	bl	8000c1c <setTimer>
			break;
 80014dc:	e06e      	b.n	80015bc <traffic_light_fsm_sel+0x3e0>
 80014de:	bf00      	nop
 80014e0:	2000007c 	.word	0x2000007c
 80014e4:	40010800 	.word	0x40010800
 80014e8:	20000076 	.word	0x20000076
 80014ec:	20000070 	.word	0x20000070
 80014f0:	20000071 	.word	0x20000071
		case SEL_GREEN:
			display7SEG(5);
 80014f4:	2005      	movs	r0, #5
 80014f6:	f7ff f891 	bl	800061c <display7SEG>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2120      	movs	r1, #32
 80014fe:	4832      	ldr	r0, [pc, #200]	; (80015c8 <traffic_light_fsm_sel+0x3ec>)
 8001500:	f000 fc6f 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001504:	2201      	movs	r2, #1
 8001506:	2140      	movs	r1, #64	; 0x40
 8001508:	482f      	ldr	r0, [pc, #188]	; (80015c8 <traffic_light_fsm_sel+0x3ec>)
 800150a:	f000 fc6a 	bl	8001de2 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800150e:	2201      	movs	r2, #1
 8001510:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001514:	482c      	ldr	r0, [pc, #176]	; (80015c8 <traffic_light_fsm_sel+0x3ec>)
 8001516:	f000 fc64 	bl	8001de2 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001520:	4829      	ldr	r0, [pc, #164]	; (80015c8 <traffic_light_fsm_sel+0x3ec>)
 8001522:	f000 fc5e 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isFlagTimer(2)){
 8001526:	2002      	movs	r0, #2
 8001528:	f7ff fb68 	bl	8000bfc <isFlagTimer>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00d      	beq.n	800154e <traffic_light_fsm_sel+0x372>
				setTimer(2, 500);
 8001532:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001536:	2002      	movs	r0, #2
 8001538:	f7ff fb70 	bl	8000c1c <setTimer>
				HAL_GPIO_TogglePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin);
 800153c:	2180      	movs	r1, #128	; 0x80
 800153e:	4822      	ldr	r0, [pc, #136]	; (80015c8 <traffic_light_fsm_sel+0x3ec>)
 8001540:	f000 fc67 	bl	8001e12 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	481f      	ldr	r0, [pc, #124]	; (80015c8 <traffic_light_fsm_sel+0x3ec>)
 800154a:	f000 fc62 	bl	8001e12 <HAL_GPIO_TogglePin>
			}
			if(isFlagTimer(0)){
 800154e:	2000      	movs	r0, #0
 8001550:	f7ff fb54 	bl	8000bfc <isFlagTimer>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d002      	beq.n	8001560 <traffic_light_fsm_sel+0x384>
				status = INIT;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <traffic_light_fsm_sel+0x3f0>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 8001560:	2002      	movs	r0, #2
 8001562:	f7fe fe7f 	bl	8000264 <isButtonPressed>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d010      	beq.n	800158e <traffic_light_fsm_sel+0x3b2>
				status = SET_GREEN;
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <traffic_light_fsm_sel+0x3f0>)
 800156e:	2216      	movs	r2, #22
 8001570:	701a      	strb	r2, [r3, #0]
				setTimer(0, 20000);
 8001572:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff fb50 	bl	8000c1c <setTimer>
				updateBuffer7SEG(green_duration, green_duration);
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <traffic_light_fsm_sel+0x3f4>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	4a13      	ldr	r2, [pc, #76]	; (80015d0 <traffic_light_fsm_sel+0x3f4>)
 8001582:	7812      	ldrb	r2, [r2, #0]
 8001584:	4611      	mov	r1, r2
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe ff72 	bl	8000470 <updateBuffer7SEG>
			}else if(isButtonPressed(0)){
				status = SEL_AUTO;
				setTimer(0, 5000);
			}
			break;
 800158c:	e018      	b.n	80015c0 <traffic_light_fsm_sel+0x3e4>
			}else if(isButtonPressed(0)){
 800158e:	2000      	movs	r0, #0
 8001590:	f7fe fe68 	bl	8000264 <isButtonPressed>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d012      	beq.n	80015c0 <traffic_light_fsm_sel+0x3e4>
				status = SEL_AUTO;
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <traffic_light_fsm_sel+0x3f0>)
 800159c:	2201      	movs	r2, #1
 800159e:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 80015a0:	f241 3188 	movw	r1, #5000	; 0x1388
 80015a4:	2000      	movs	r0, #0
 80015a6:	f7ff fb39 	bl	8000c1c <setTimer>
			break;
 80015aa:	e009      	b.n	80015c0 <traffic_light_fsm_sel+0x3e4>
		default:
			break;
 80015ac:	bf00      	nop
 80015ae:	e008      	b.n	80015c2 <traffic_light_fsm_sel+0x3e6>
			break;
 80015b0:	bf00      	nop
 80015b2:	e006      	b.n	80015c2 <traffic_light_fsm_sel+0x3e6>
			break;
 80015b4:	bf00      	nop
 80015b6:	e004      	b.n	80015c2 <traffic_light_fsm_sel+0x3e6>
			break;
 80015b8:	bf00      	nop
 80015ba:	e002      	b.n	80015c2 <traffic_light_fsm_sel+0x3e6>
			break;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <traffic_light_fsm_sel+0x3e6>
			break;
 80015c0:	bf00      	nop
	}
}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40010800 	.word	0x40010800
 80015cc:	2000007c 	.word	0x2000007c
 80015d0:	20000070 	.word	0x20000070

080015d4 <traffic_light_fsm_set>:
 *      Author: hachi
 */

#include "traffic_light_fsm_set.h"

void traffic_light_fsm_set(){
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	switch (status) {
 80015d8:	4b69      	ldr	r3, [pc, #420]	; (8001780 <traffic_light_fsm_set+0x1ac>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b16      	cmp	r3, #22
 80015de:	f000 8087 	beq.w	80016f0 <traffic_light_fsm_set+0x11c>
 80015e2:	2b16      	cmp	r3, #22
 80015e4:	f300 80c3 	bgt.w	800176e <traffic_light_fsm_set+0x19a>
 80015e8:	2b14      	cmp	r3, #20
 80015ea:	d002      	beq.n	80015f2 <traffic_light_fsm_set+0x1e>
 80015ec:	2b15      	cmp	r3, #21
 80015ee:	d040      	beq.n	8001672 <traffic_light_fsm_set+0x9e>
				amber_duration = red_duration - green_duration;
				status = INIT;
			}
			break;
		default:
			break;
 80015f0:	e0bd      	b.n	800176e <traffic_light_fsm_set+0x19a>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2120      	movs	r1, #32
 80015f6:	4863      	ldr	r0, [pc, #396]	; (8001784 <traffic_light_fsm_set+0x1b0>)
 80015f8:	f000 fbf3 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isButtonPressed(1)){
 80015fc:	2001      	movs	r0, #1
 80015fe:	f7fe fe31 	bl	8000264 <isButtonPressed>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <traffic_light_fsm_set+0x44>
				increaseDuration(0);
 8001608:	2000      	movs	r0, #0
 800160a:	f7fe feab 	bl	8000364 <increaseDuration>
				setTimer(0, 20000);
 800160e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fb02 	bl	8000c1c <setTimer>
			if(isButtonHolding(1)){
 8001618:	2001      	movs	r0, #1
 800161a:	f7fe fe41 	bl	80002a0 <isButtonHolding>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00d      	beq.n	8001640 <traffic_light_fsm_set+0x6c>
				if(isFlagTimer(2)){
 8001624:	2002      	movs	r0, #2
 8001626:	f7ff fae9 	bl	8000bfc <isFlagTimer>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d007      	beq.n	8001640 <traffic_light_fsm_set+0x6c>
					setTimer(2, 500);
 8001630:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001634:	2002      	movs	r0, #2
 8001636:	f7ff faf1 	bl	8000c1c <setTimer>
					increaseDuration(0);
 800163a:	2000      	movs	r0, #0
 800163c:	f7fe fe92 	bl	8000364 <increaseDuration>
			if(isButtonPressed(2)|| isFlagTimer(0)){
 8001640:	2002      	movs	r0, #2
 8001642:	f7fe fe0f 	bl	8000264 <isButtonPressed>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <traffic_light_fsm_set+0x86>
 800164c:	2000      	movs	r0, #0
 800164e:	f7ff fad5 	bl	8000bfc <isFlagTimer>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 808c 	beq.w	8001772 <traffic_light_fsm_set+0x19e>
				green_duration = red_duration - amber_duration;
 800165a:	4b4b      	ldr	r3, [pc, #300]	; (8001788 <traffic_light_fsm_set+0x1b4>)
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <traffic_light_fsm_set+0x1b8>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <traffic_light_fsm_set+0x1bc>)
 8001668:	701a      	strb	r2, [r3, #0]
				status = INIT;
 800166a:	4b45      	ldr	r3, [pc, #276]	; (8001780 <traffic_light_fsm_set+0x1ac>)
 800166c:	2200      	movs	r2, #0
 800166e:	701a      	strb	r2, [r3, #0]
			break;
 8001670:	e07f      	b.n	8001772 <traffic_light_fsm_set+0x19e>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001672:	2201      	movs	r2, #1
 8001674:	2140      	movs	r1, #64	; 0x40
 8001676:	4843      	ldr	r0, [pc, #268]	; (8001784 <traffic_light_fsm_set+0x1b0>)
 8001678:	f000 fbb3 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isButtonPressed(1)){
 800167c:	2001      	movs	r0, #1
 800167e:	f7fe fdf1 	bl	8000264 <isButtonPressed>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d007      	beq.n	8001698 <traffic_light_fsm_set+0xc4>
				increaseDuration(1);
 8001688:	2001      	movs	r0, #1
 800168a:	f7fe fe6b 	bl	8000364 <increaseDuration>
				setTimer(0, 20000);
 800168e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001692:	2000      	movs	r0, #0
 8001694:	f7ff fac2 	bl	8000c1c <setTimer>
			if(isButtonHolding(1)){
 8001698:	2001      	movs	r0, #1
 800169a:	f7fe fe01 	bl	80002a0 <isButtonHolding>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d00d      	beq.n	80016c0 <traffic_light_fsm_set+0xec>
				if(isFlagTimer(2)){
 80016a4:	2002      	movs	r0, #2
 80016a6:	f7ff faa9 	bl	8000bfc <isFlagTimer>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <traffic_light_fsm_set+0xec>
					setTimer(2, 500);
 80016b0:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff fab1 	bl	8000c1c <setTimer>
					increaseDuration(1);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7fe fe52 	bl	8000364 <increaseDuration>
			if(isButtonPressed(2)|| isFlagTimer(0)){
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7fe fdcf 	bl	8000264 <isButtonPressed>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <traffic_light_fsm_set+0x104>
 80016cc:	2000      	movs	r0, #0
 80016ce:	f7ff fa95 	bl	8000bfc <isFlagTimer>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d04e      	beq.n	8001776 <traffic_light_fsm_set+0x1a2>
				green_duration = red_duration - amber_duration;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <traffic_light_fsm_set+0x1b4>)
 80016da:	781a      	ldrb	r2, [r3, #0]
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <traffic_light_fsm_set+0x1b8>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <traffic_light_fsm_set+0x1bc>)
 80016e6:	701a      	strb	r2, [r3, #0]
				status = INIT;
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <traffic_light_fsm_set+0x1ac>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	701a      	strb	r2, [r3, #0]
			break;
 80016ee:	e042      	b.n	8001776 <traffic_light_fsm_set+0x1a2>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2180      	movs	r1, #128	; 0x80
 80016f4:	4823      	ldr	r0, [pc, #140]	; (8001784 <traffic_light_fsm_set+0x1b0>)
 80016f6:	f000 fb74 	bl	8001de2 <HAL_GPIO_WritePin>
			if(isButtonPressed(1)){
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7fe fdb2 	bl	8000264 <isButtonPressed>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <traffic_light_fsm_set+0x142>
				increaseDuration(2);
 8001706:	2002      	movs	r0, #2
 8001708:	f7fe fe2c 	bl	8000364 <increaseDuration>
				setTimer(0, 20000);
 800170c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fa83 	bl	8000c1c <setTimer>
			if(isButtonHolding(1)){
 8001716:	2001      	movs	r0, #1
 8001718:	f7fe fdc2 	bl	80002a0 <isButtonHolding>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00d      	beq.n	800173e <traffic_light_fsm_set+0x16a>
				if(isFlagTimer(2)){
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff fa6a 	bl	8000bfc <isFlagTimer>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <traffic_light_fsm_set+0x16a>
					setTimer(2, 500);
 800172e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001732:	2002      	movs	r0, #2
 8001734:	f7ff fa72 	bl	8000c1c <setTimer>
					increaseDuration(2);
 8001738:	2002      	movs	r0, #2
 800173a:	f7fe fe13 	bl	8000364 <increaseDuration>
			if(isButtonPressed(2)|| isFlagTimer(0)){
 800173e:	2002      	movs	r0, #2
 8001740:	f7fe fd90 	bl	8000264 <isButtonPressed>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d105      	bne.n	8001756 <traffic_light_fsm_set+0x182>
 800174a:	2000      	movs	r0, #0
 800174c:	f7ff fa56 	bl	8000bfc <isFlagTimer>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d011      	beq.n	800177a <traffic_light_fsm_set+0x1a6>
				amber_duration = red_duration - green_duration;
 8001756:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <traffic_light_fsm_set+0x1b4>)
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	4b0d      	ldr	r3, [pc, #52]	; (8001790 <traffic_light_fsm_set+0x1bc>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <traffic_light_fsm_set+0x1b8>)
 8001764:	701a      	strb	r2, [r3, #0]
				status = INIT;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <traffic_light_fsm_set+0x1ac>)
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
			break;
 800176c:	e005      	b.n	800177a <traffic_light_fsm_set+0x1a6>
			break;
 800176e:	bf00      	nop
 8001770:	e004      	b.n	800177c <traffic_light_fsm_set+0x1a8>
			break;
 8001772:	bf00      	nop
 8001774:	e002      	b.n	800177c <traffic_light_fsm_set+0x1a8>
			break;
 8001776:	bf00      	nop
 8001778:	e000      	b.n	800177c <traffic_light_fsm_set+0x1a8>
			break;
 800177a:	bf00      	nop
	}
}
 800177c:	bf00      	nop
 800177e:	bd80      	pop	{r7, pc}
 8001780:	2000007c 	.word	0x2000007c
 8001784:	40010800 	.word	0x40010800
 8001788:	20000076 	.word	0x20000076
 800178c:	20000071 	.word	0x20000071
 8001790:	20000070 	.word	0x20000070

08001794 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001794:	f7ff fb34 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480b      	ldr	r0, [pc, #44]	; (80017c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800179a:	490c      	ldr	r1, [pc, #48]	; (80017cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800179c:	4a0c      	ldr	r2, [pc, #48]	; (80017d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a09      	ldr	r2, [pc, #36]	; (80017d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017b0:	4c09      	ldr	r4, [pc, #36]	; (80017d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f001 fb03 	bl	8002dc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017c2:	f7ff f8dd 	bl	8000980 <main>
  bx lr
 80017c6:	4770      	bx	lr
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017d0:	08002e64 	.word	0x08002e64
  ldr r2, =_sbss
 80017d4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80017d8:	200000cc 	.word	0x200000cc

080017dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_2_IRQHandler>
	...

080017e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_Init+0x28>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a07      	ldr	r2, [pc, #28]	; (8001808 <HAL_Init+0x28>)
 80017ea:	f043 0310 	orr.w	r3, r3, #16
 80017ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f0:	2003      	movs	r0, #3
 80017f2:	f000 f923 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017f6:	200f      	movs	r0, #15
 80017f8:	f000 f808 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017fc:	f7ff fa78 	bl	8000cf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_InitTick+0x54>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	4b12      	ldr	r3, [pc, #72]	; (8001864 <HAL_InitTick+0x58>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001822:	fbb3 f3f1 	udiv	r3, r3, r1
 8001826:	fbb2 f3f3 	udiv	r3, r2, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f000 f93b 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e00e      	b.n	8001858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2b0f      	cmp	r3, #15
 800183e:	d80a      	bhi.n	8001856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001840:	2200      	movs	r2, #0
 8001842:	6879      	ldr	r1, [r7, #4]
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f000 f903 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800184c:	4a06      	ldr	r2, [pc, #24]	; (8001868 <HAL_InitTick+0x5c>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000018 	.word	0x20000018
 8001864:	20000020 	.word	0x20000020
 8001868:	2000001c 	.word	0x2000001c

0800186c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <HAL_IncTick+0x1c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_IncTick+0x20>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4413      	add	r3, r2
 800187c:	4a03      	ldr	r2, [pc, #12]	; (800188c <HAL_IncTick+0x20>)
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	20000020 	.word	0x20000020
 800188c:	200000c8 	.word	0x200000c8

08001890 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return uwTick;
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <HAL_GetTick+0x10>)
 8001896:	681b      	ldr	r3, [r3, #0]
}
 8001898:	4618      	mov	r0, r3
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	200000c8 	.word	0x200000c8

080018a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b085      	sub	sp, #20
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ba:	68ba      	ldr	r2, [r7, #8]
 80018bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c0:	4013      	ands	r3, r2
 80018c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x44>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f0:	4b04      	ldr	r3, [pc, #16]	; (8001904 <__NVIC_GetPriorityGrouping+0x18>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f003 0307 	and.w	r3, r3, #7
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	2b00      	cmp	r3, #0
 8001918:	db0b      	blt.n	8001932 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	f003 021f 	and.w	r2, r3, #31
 8001920:	4906      	ldr	r1, [pc, #24]	; (800193c <__NVIC_EnableIRQ+0x34>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	2001      	movs	r0, #1
 800192a:	fa00 f202 	lsl.w	r2, r0, r2
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100

08001940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	6039      	str	r1, [r7, #0]
 800194a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	db0a      	blt.n	800196a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	b2da      	uxtb	r2, r3
 8001958:	490c      	ldr	r1, [pc, #48]	; (800198c <__NVIC_SetPriority+0x4c>)
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	0112      	lsls	r2, r2, #4
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	440b      	add	r3, r1
 8001964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001968:	e00a      	b.n	8001980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <__NVIC_SetPriority+0x50>)
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	3b04      	subs	r3, #4
 8001978:	0112      	lsls	r2, r2, #4
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	440b      	add	r3, r1
 800197e:	761a      	strb	r2, [r3, #24]
}
 8001980:	bf00      	nop
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000e100 	.word	0xe000e100
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001994:	b480      	push	{r7}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f1c3 0307 	rsb	r3, r3, #7
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	bf28      	it	cs
 80019b2:	2304      	movcs	r3, #4
 80019b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2b06      	cmp	r3, #6
 80019bc:	d902      	bls.n	80019c4 <NVIC_EncodePriority+0x30>
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3b03      	subs	r3, #3
 80019c2:	e000      	b.n	80019c6 <NVIC_EncodePriority+0x32>
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43da      	mvns	r2, r3
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	401a      	ands	r2, r3
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	fa01 f303 	lsl.w	r3, r1, r3
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ec:	4313      	orrs	r3, r2
         );
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3724      	adds	r7, #36	; 0x24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff90 	bl	8001940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff2d 	bl	80018a4 <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff42 	bl	80018ec <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff90 	bl	8001994 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5f 	bl	8001940 <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff35 	bl	8001908 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b08b      	sub	sp, #44	; 0x2c
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad2:	e148      	b.n	8001d66 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f040 8137 	bne.w	8001d60 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4aa3      	ldr	r2, [pc, #652]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d05e      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001afc:	4aa1      	ldr	r2, [pc, #644]	; (8001d84 <HAL_GPIO_Init+0x2c4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d875      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b02:	4aa1      	ldr	r2, [pc, #644]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d058      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b08:	4a9f      	ldr	r2, [pc, #636]	; (8001d88 <HAL_GPIO_Init+0x2c8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d86f      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b0e:	4a9f      	ldr	r2, [pc, #636]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d052      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b14:	4a9d      	ldr	r2, [pc, #628]	; (8001d8c <HAL_GPIO_Init+0x2cc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d869      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b1a:	4a9d      	ldr	r2, [pc, #628]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d04c      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b20:	4a9b      	ldr	r2, [pc, #620]	; (8001d90 <HAL_GPIO_Init+0x2d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d863      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b26:	4a9b      	ldr	r2, [pc, #620]	; (8001d94 <HAL_GPIO_Init+0x2d4>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d046      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
 8001b2c:	4a99      	ldr	r2, [pc, #612]	; (8001d94 <HAL_GPIO_Init+0x2d4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d85d      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b32:	2b12      	cmp	r3, #18
 8001b34:	d82a      	bhi.n	8001b8c <HAL_GPIO_Init+0xcc>
 8001b36:	2b12      	cmp	r3, #18
 8001b38:	d859      	bhi.n	8001bee <HAL_GPIO_Init+0x12e>
 8001b3a:	a201      	add	r2, pc, #4	; (adr r2, 8001b40 <HAL_GPIO_Init+0x80>)
 8001b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001b95 	.word	0x08001b95
 8001b48:	08001ba7 	.word	0x08001ba7
 8001b4c:	08001be9 	.word	0x08001be9
 8001b50:	08001bef 	.word	0x08001bef
 8001b54:	08001bef 	.word	0x08001bef
 8001b58:	08001bef 	.word	0x08001bef
 8001b5c:	08001bef 	.word	0x08001bef
 8001b60:	08001bef 	.word	0x08001bef
 8001b64:	08001bef 	.word	0x08001bef
 8001b68:	08001bef 	.word	0x08001bef
 8001b6c:	08001bef 	.word	0x08001bef
 8001b70:	08001bef 	.word	0x08001bef
 8001b74:	08001bef 	.word	0x08001bef
 8001b78:	08001bef 	.word	0x08001bef
 8001b7c:	08001bef 	.word	0x08001bef
 8001b80:	08001bef 	.word	0x08001bef
 8001b84:	08001b9d 	.word	0x08001b9d
 8001b88:	08001bb1 	.word	0x08001bb1
 8001b8c:	4a82      	ldr	r2, [pc, #520]	; (8001d98 <HAL_GPIO_Init+0x2d8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b92:	e02c      	b.n	8001bee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	623b      	str	r3, [r7, #32]
          break;
 8001b9a:	e029      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e024      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	3308      	adds	r3, #8
 8001bac:	623b      	str	r3, [r7, #32]
          break;
 8001bae:	e01f      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	330c      	adds	r3, #12
 8001bb6:	623b      	str	r3, [r7, #32]
          break;
 8001bb8:	e01a      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d102      	bne.n	8001bc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e013      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	611a      	str	r2, [r3, #16]
          break;
 8001bda:	e009      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	615a      	str	r2, [r3, #20]
          break;
 8001be6:	e003      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001be8:	2300      	movs	r3, #0
 8001bea:	623b      	str	r3, [r7, #32]
          break;
 8001bec:	e000      	b.n	8001bf0 <HAL_GPIO_Init+0x130>
          break;
 8001bee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d801      	bhi.n	8001bfa <HAL_GPIO_Init+0x13a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	e001      	b.n	8001bfe <HAL_GPIO_Init+0x13e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	; 0xff
 8001c04:	d802      	bhi.n	8001c0c <HAL_GPIO_Init+0x14c>
 8001c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	e002      	b.n	8001c12 <HAL_GPIO_Init+0x152>
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	3b08      	subs	r3, #8
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	210f      	movs	r1, #15
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	401a      	ands	r2, r3
 8001c24:	6a39      	ldr	r1, [r7, #32]
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8090 	beq.w	8001d60 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c46:	f043 0301 	orr.w	r3, r3, #1
 8001c4a:	6193      	str	r3, [r2, #24]
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_GPIO_Init+0x2dc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c58:	4a51      	ldr	r2, [pc, #324]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	089b      	lsrs	r3, r3, #2
 8001c5e:	3302      	adds	r3, #2
 8001c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	220f      	movs	r2, #15
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a49      	ldr	r2, [pc, #292]	; (8001da4 <HAL_GPIO_Init+0x2e4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d00d      	beq.n	8001ca0 <HAL_GPIO_Init+0x1e0>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d007      	beq.n	8001c9c <HAL_GPIO_Init+0x1dc>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_GPIO_Init+0x2ec>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d101      	bne.n	8001c98 <HAL_GPIO_Init+0x1d8>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e004      	b.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_GPIO_Init+0x1e2>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	4093      	lsls	r3, r2
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb2:	493b      	ldr	r1, [pc, #236]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b38      	ldr	r3, [pc, #224]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4937      	ldr	r1, [pc, #220]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4933      	ldr	r1, [pc, #204]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b2e      	ldr	r3, [pc, #184]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	492d      	ldr	r1, [pc, #180]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d02:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	4929      	ldr	r1, [pc, #164]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4923      	ldr	r1, [pc, #140]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	491f      	ldr	r1, [pc, #124]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d006      	beq.n	8001d52 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	4919      	ldr	r1, [pc, #100]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	4915      	ldr	r1, [pc, #84]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	3301      	adds	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f aeaf 	bne.w	8001ad4 <HAL_GPIO_Init+0x14>
  }
}
 8001d76:	bf00      	nop
 8001d78:	bf00      	nop
 8001d7a:	372c      	adds	r7, #44	; 0x2c
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	10320000 	.word	0x10320000
 8001d88:	10310000 	.word	0x10310000
 8001d8c:	10220000 	.word	0x10220000
 8001d90:	10210000 	.word	0x10210000
 8001d94:	10120000 	.word	0x10120000
 8001d98:	10110000 	.word	0x10110000
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40010800 	.word	0x40010800
 8001da8:	40010c00 	.word	0x40010c00
 8001dac:	40011000 	.word	0x40011000
 8001db0:	40010400 	.word	0x40010400

08001db4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	887b      	ldrh	r3, [r7, #2]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
 8001dd0:	e001      	b.n	8001dd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr

08001de2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
 8001dea:	460b      	mov	r3, r1
 8001dec:	807b      	strh	r3, [r7, #2]
 8001dee:	4613      	mov	r3, r2
 8001df0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df2:	787b      	ldrb	r3, [r7, #1]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df8:	887a      	ldrh	r2, [r7, #2]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dfe:	e003      	b.n	8001e08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e00:	887b      	ldrh	r3, [r7, #2]
 8001e02:	041a      	lsls	r2, r3, #16
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	611a      	str	r2, [r3, #16]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	041a      	lsls	r2, r3, #16
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	43d9      	mvns	r1, r3
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	400b      	ands	r3, r1
 8001e34:	431a      	orrs	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	611a      	str	r2, [r3, #16]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e26c      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 8087 	beq.w	8001f72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e64:	4b92      	ldr	r3, [pc, #584]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 030c 	and.w	r3, r3, #12
 8001e6c:	2b04      	cmp	r3, #4
 8001e6e:	d00c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e70:	4b8f      	ldr	r3, [pc, #572]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b08      	cmp	r3, #8
 8001e7a:	d112      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
 8001e7c:	4b8c      	ldr	r3, [pc, #560]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e88:	d10b      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8a:	4b89      	ldr	r3, [pc, #548]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d06c      	beq.n	8001f70 <HAL_RCC_OscConfig+0x12c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d168      	bne.n	8001f70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e246      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eaa:	d106      	bne.n	8001eba <HAL_RCC_OscConfig+0x76>
 8001eac:	4b80      	ldr	r3, [pc, #512]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a7f      	ldr	r2, [pc, #508]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e02e      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10c      	bne.n	8001edc <HAL_RCC_OscConfig+0x98>
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ecc:	6013      	str	r3, [r2, #0]
 8001ece:	4b78      	ldr	r3, [pc, #480]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a77      	ldr	r2, [pc, #476]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	e01d      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0xbc>
 8001ee6:	4b72      	ldr	r3, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a71      	ldr	r2, [pc, #452]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	4b6f      	ldr	r3, [pc, #444]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a6e      	ldr	r2, [pc, #440]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0xd4>
 8001f00:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a6a      	ldr	r2, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0a:	6013      	str	r3, [r2, #0]
 8001f0c:	4b68      	ldr	r3, [pc, #416]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a67      	ldr	r2, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f20:	f7ff fcb6 	bl	8001890 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f28:	f7ff fcb2 	bl	8001890 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b64      	cmp	r3, #100	; 0x64
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1fa      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0xe4>
 8001f46:	e014      	b.n	8001f72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7ff fca2 	bl	8001890 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f50:	f7ff fc9e 	bl	8001890 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b64      	cmp	r3, #100	; 0x64
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e1e6      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	4b53      	ldr	r3, [pc, #332]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x10c>
 8001f6e:	e000      	b.n	8001f72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d063      	beq.n	8002046 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 030c 	and.w	r3, r3, #12
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00b      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f8a:	4b49      	ldr	r3, [pc, #292]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d11c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x18c>
 8001f96:	4b46      	ldr	r3, [pc, #280]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d116      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fa2:	4b43      	ldr	r3, [pc, #268]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d005      	beq.n	8001fba <HAL_RCC_OscConfig+0x176>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d001      	beq.n	8001fba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e1ba      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fba:	4b3d      	ldr	r3, [pc, #244]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	4939      	ldr	r1, [pc, #228]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fce:	e03a      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d020      	beq.n	800201a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd8:	4b36      	ldr	r3, [pc, #216]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fde:	f7ff fc57 	bl	8001890 <HAL_GetTick>
 8001fe2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7ff fc53 	bl	8001890 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e19b      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b2a      	ldr	r3, [pc, #168]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e015      	b.n	8002046 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800201a:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_RCC_OscConfig+0x270>)
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002020:	f7ff fc36 	bl	8001890 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff fc32 	bl	8001890 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e17a      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d03a      	beq.n	80020c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d019      	beq.n	800208e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205a:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7ff fc16 	bl	8001890 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff fc12 	bl	8001890 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e15a      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002086:	2001      	movs	r0, #1
 8002088:	f000 faa4 	bl	80025d4 <RCC_Delay>
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <HAL_RCC_OscConfig+0x274>)
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002094:	f7ff fbfc 	bl	8001890 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800209a:	e00f      	b.n	80020bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff fbf8 	bl	8001890 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d908      	bls.n	80020bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e140      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	42420000 	.word	0x42420000
 80020b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b9e      	ldr	r3, [pc, #632]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e9      	bne.n	800209c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a6 	beq.w	8002222 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b97      	ldr	r3, [pc, #604]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	69db      	ldr	r3, [r3, #28]
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10d      	bne.n	8002102 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b94      	ldr	r3, [pc, #592]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	4a93      	ldr	r2, [pc, #588]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f0:	61d3      	str	r3, [r2, #28]
 80020f2:	4b91      	ldr	r3, [pc, #580]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fe:	2301      	movs	r3, #1
 8002100:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002102:	4b8e      	ldr	r3, [pc, #568]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210a:	2b00      	cmp	r3, #0
 800210c:	d118      	bne.n	8002140 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210e:	4b8b      	ldr	r3, [pc, #556]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a8a      	ldr	r2, [pc, #552]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002118:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211a:	f7ff fbb9 	bl	8001890 <HAL_GetTick>
 800211e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002120:	e008      	b.n	8002134 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002122:	f7ff fbb5 	bl	8001890 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	1ad3      	subs	r3, r2, r3
 800212c:	2b64      	cmp	r3, #100	; 0x64
 800212e:	d901      	bls.n	8002134 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e0fd      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	4b81      	ldr	r3, [pc, #516]	; (800233c <HAL_RCC_OscConfig+0x4f8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213c:	2b00      	cmp	r3, #0
 800213e:	d0f0      	beq.n	8002122 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d106      	bne.n	8002156 <HAL_RCC_OscConfig+0x312>
 8002148:	4b7b      	ldr	r3, [pc, #492]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a7a      	ldr	r2, [pc, #488]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e02d      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10c      	bne.n	8002178 <HAL_RCC_OscConfig+0x334>
 800215e:	4b76      	ldr	r3, [pc, #472]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a75      	ldr	r2, [pc, #468]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 0301 	bic.w	r3, r3, #1
 8002168:	6213      	str	r3, [r2, #32]
 800216a:	4b73      	ldr	r3, [pc, #460]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a72      	ldr	r2, [pc, #456]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f023 0304 	bic.w	r3, r3, #4
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	e01c      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	2b05      	cmp	r3, #5
 800217e:	d10c      	bne.n	800219a <HAL_RCC_OscConfig+0x356>
 8002180:	4b6d      	ldr	r3, [pc, #436]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	4a6c      	ldr	r2, [pc, #432]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002186:	f043 0304 	orr.w	r3, r3, #4
 800218a:	6213      	str	r3, [r2, #32]
 800218c:	4b6a      	ldr	r3, [pc, #424]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a69      	ldr	r2, [pc, #420]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	e00b      	b.n	80021b2 <HAL_RCC_OscConfig+0x36e>
 800219a:	4b67      	ldr	r3, [pc, #412]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	4a66      	ldr	r2, [pc, #408]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021a0:	f023 0301 	bic.w	r3, r3, #1
 80021a4:	6213      	str	r3, [r2, #32]
 80021a6:	4b64      	ldr	r3, [pc, #400]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a63      	ldr	r2, [pc, #396]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0304 	bic.w	r3, r3, #4
 80021b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ba:	f7ff fb69 	bl	8001890 <HAL_GetTick>
 80021be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021c2:	f7ff fb65 	bl	8001890 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e0ab      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	4b57      	ldr	r3, [pc, #348]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d0ee      	beq.n	80021c2 <HAL_RCC_OscConfig+0x37e>
 80021e4:	e014      	b.n	8002210 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb53 	bl	8001890 <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff fb4f 	bl	8001890 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e095      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002204:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1ee      	bne.n	80021ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002210:	7dfb      	ldrb	r3, [r7, #23]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d105      	bne.n	8002222 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002216:	4b48      	ldr	r3, [pc, #288]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a47      	ldr	r2, [pc, #284]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8081 	beq.w	800232e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800222c:	4b42      	ldr	r3, [pc, #264]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b08      	cmp	r3, #8
 8002236:	d061      	beq.n	80022fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d146      	bne.n	80022ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002240:	4b3f      	ldr	r3, [pc, #252]	; (8002340 <HAL_RCC_OscConfig+0x4fc>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002246:	f7ff fb23 	bl	8001890 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224e:	f7ff fb1f 	bl	8001890 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e067      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f0      	bne.n	800224e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002274:	d108      	bne.n	8002288 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002276:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	492d      	ldr	r1, [pc, #180]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002288:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a19      	ldr	r1, [r3, #32]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	430b      	orrs	r3, r1
 800229a:	4927      	ldr	r1, [pc, #156]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800229c:	4313      	orrs	r3, r2
 800229e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a0:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_RCC_OscConfig+0x4fc>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7ff faf3 	bl	8001890 <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ae:	f7ff faef 	bl	8001890 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e037      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f0      	beq.n	80022ae <HAL_RCC_OscConfig+0x46a>
 80022cc:	e02f      	b.n	800232e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_RCC_OscConfig+0x4fc>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fadc 	bl	8001890 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022dc:	f7ff fad8 	bl	8001890 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e020      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f0      	bne.n	80022dc <HAL_RCC_OscConfig+0x498>
 80022fa:	e018      	b.n	800232e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e013      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <HAL_RCC_OscConfig+0x4f4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	429a      	cmp	r2, r3
 800231a:	d106      	bne.n	800232a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	429a      	cmp	r2, r3
 8002328:	d001      	beq.n	800232e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
 8002340:	42420060 	.word	0x42420060

08002344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0d0      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b6a      	ldr	r3, [pc, #424]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d910      	bls.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b67      	ldr	r3, [pc, #412]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4965      	ldr	r1, [pc, #404]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d040      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e073      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3d      	ldr	r3, [pc, #244]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06b      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4936      	ldr	r1, [pc, #216]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff fa2c 	bl	8001890 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff fa28 	bl	8001890 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	; 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e053      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2d      	ldr	r3, [pc, #180]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d210      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4922      	ldr	r1, [pc, #136]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024be:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f821 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	; (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	; (8002510 <HAL_RCC_ClockConfig+0x1cc>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f98a 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
 800250c:	08002e38 	.word	0x08002e38
 8002510:	20000018 	.word	0x20000018
 8002514:	2000001c 	.word	0x2000001c

08002518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x30>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x36>
 8002546:	e027      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	613b      	str	r3, [r7, #16]
      break;
 800254c:	e027      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002566:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	fb02 f203 	mul.w	r2, r2, r3
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e004      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0c      	ldr	r2, [pc, #48]	; (80025bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	613b      	str	r3, [r7, #16]
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	693b      	ldr	r3, [r7, #16]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08002e48 	.word	0x08002e48
 80025b8:	08002e58 	.word	0x08002e58
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b02      	ldr	r3, [pc, #8]	; (80025d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000018 	.word	0x20000018

080025d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <RCC_Delay+0x34>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a0a      	ldr	r2, [pc, #40]	; (800260c <RCC_Delay+0x38>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0a5b      	lsrs	r3, r3, #9
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	fb02 f303 	mul.w	r3, r2, r3
 80025ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f0:	bf00      	nop
  }
  while (Delay --);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1e5a      	subs	r2, r3, #1
 80025f6:	60fa      	str	r2, [r7, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f9      	bne.n	80025f0 <RCC_Delay+0x1c>
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	20000018 	.word	0x20000018
 800260c:	10624dd3 	.word	0x10624dd3

08002610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fb8c 	bl	8000d54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 fa56 	bl	8002b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
	...

080026b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d001      	beq.n	80026c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e035      	b.n	8002734 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a16      	ldr	r2, [pc, #88]	; (8002740 <HAL_TIM_Base_Start_IT+0x90>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d009      	beq.n	80026fe <HAL_TIM_Base_Start_IT+0x4e>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f2:	d004      	beq.n	80026fe <HAL_TIM_Base_Start_IT+0x4e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a12      	ldr	r2, [pc, #72]	; (8002744 <HAL_TIM_Base_Start_IT+0x94>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d111      	bne.n	8002722 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2b06      	cmp	r3, #6
 800270e:	d010      	beq.n	8002732 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f042 0201 	orr.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002720:	e007      	b.n	8002732 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f042 0201 	orr.w	r2, r2, #1
 8002730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40000400 	.word	0x40000400

08002748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d020      	beq.n	80027ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d01b      	beq.n	80027ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0202 	mvn.w	r2, #2
 800277c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f998 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f98b 	bl	8002ab6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f99a 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d020      	beq.n	80027f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 0204 	mvn.w	r2, #4
 80027c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2202      	movs	r2, #2
 80027ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f972 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 80027e4:	e005      	b.n	80027f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f965 	bl	8002ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f974 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f003 0308 	and.w	r3, r3, #8
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d020      	beq.n	8002844 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01b      	beq.n	8002844 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0208 	mvn.w	r2, #8
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2204      	movs	r2, #4
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f94c 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f93f 	bl	8002ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f94e 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	2b00      	cmp	r3, #0
 800284c:	d020      	beq.n	8002890 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0310 	and.w	r3, r3, #16
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f06f 0210 	mvn.w	r2, #16
 8002860:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2208      	movs	r2, #8
 8002866:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f926 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 800287c:	e005      	b.n	800288a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f919 	bl	8002ab6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f928 	bl	8002ada <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00c      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d007      	beq.n	80028b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f06f 0201 	mvn.w	r2, #1
 80028ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe f992 	bl	8000bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d007      	beq.n	80028d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 fa6f 	bl	8002db6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00c      	beq.n	80028fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f8f8 	bl	8002aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00c      	beq.n	8002920 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d007      	beq.n	8002920 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0220 	mvn.w	r2, #32
 8002918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fa42 	bl	8002da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002920:	bf00      	nop
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800293c:	2b01      	cmp	r3, #1
 800293e:	d101      	bne.n	8002944 <HAL_TIM_ConfigClockSource+0x1c>
 8002940:	2302      	movs	r3, #2
 8002942:	e0b4      	b.n	8002aae <HAL_TIM_ConfigClockSource+0x186>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002962:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800296a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297c:	d03e      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0xd4>
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002982:	f200 8087 	bhi.w	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	f000 8086 	beq.w	8002a9a <HAL_TIM_ConfigClockSource+0x172>
 800298e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002992:	d87f      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b70      	cmp	r3, #112	; 0x70
 8002996:	d01a      	beq.n	80029ce <HAL_TIM_ConfigClockSource+0xa6>
 8002998:	2b70      	cmp	r3, #112	; 0x70
 800299a:	d87b      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b60      	cmp	r3, #96	; 0x60
 800299e:	d050      	beq.n	8002a42 <HAL_TIM_ConfigClockSource+0x11a>
 80029a0:	2b60      	cmp	r3, #96	; 0x60
 80029a2:	d877      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 80029a4:	2b50      	cmp	r3, #80	; 0x50
 80029a6:	d03c      	beq.n	8002a22 <HAL_TIM_ConfigClockSource+0xfa>
 80029a8:	2b50      	cmp	r3, #80	; 0x50
 80029aa:	d873      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 80029ac:	2b40      	cmp	r3, #64	; 0x40
 80029ae:	d058      	beq.n	8002a62 <HAL_TIM_ConfigClockSource+0x13a>
 80029b0:	2b40      	cmp	r3, #64	; 0x40
 80029b2:	d86f      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 80029b4:	2b30      	cmp	r3, #48	; 0x30
 80029b6:	d064      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x15a>
 80029b8:	2b30      	cmp	r3, #48	; 0x30
 80029ba:	d86b      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d060      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x15a>
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d867      	bhi.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d05c      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x15a>
 80029c8:	2b10      	cmp	r3, #16
 80029ca:	d05a      	beq.n	8002a82 <HAL_TIM_ConfigClockSource+0x15a>
 80029cc:	e062      	b.n	8002a94 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6818      	ldr	r0, [r3, #0]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6899      	ldr	r1, [r3, #8]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f000 f96a 	bl	8002cb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	609a      	str	r2, [r3, #8]
      break;
 80029fa:	e04f      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f000 f953 	bl	8002cb6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a1e:	609a      	str	r2, [r3, #8]
      break;
 8002a20:	e03c      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6818      	ldr	r0, [r3, #0]
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	6859      	ldr	r1, [r3, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f000 f8ca 	bl	8002bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2150      	movs	r1, #80	; 0x50
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 f921 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a40:	e02c      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6818      	ldr	r0, [r3, #0]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	6859      	ldr	r1, [r3, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	f000 f8e8 	bl	8002c24 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2160      	movs	r1, #96	; 0x60
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f000 f911 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a60:	e01c      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6859      	ldr	r1, [r3, #4]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f000 f8aa 	bl	8002bc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2140      	movs	r1, #64	; 0x40
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f901 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a80:	e00c      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	f000 f8f8 	bl	8002c82 <TIM_ITRx_SetConfig>
      break;
 8002a92:	e003      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e000      	b.n	8002a9c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr

08002ada <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr

08002aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
	...

08002b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a2b      	ldr	r2, [pc, #172]	; (8002bc0 <TIM_Base_SetConfig+0xc0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_Base_SetConfig+0x28>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1e:	d003      	beq.n	8002b28 <TIM_Base_SetConfig+0x28>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a28      	ldr	r2, [pc, #160]	; (8002bc4 <TIM_Base_SetConfig+0xc4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d108      	bne.n	8002b3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <TIM_Base_SetConfig+0xc0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d007      	beq.n	8002b52 <TIM_Base_SetConfig+0x52>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d003      	beq.n	8002b52 <TIM_Base_SetConfig+0x52>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1d      	ldr	r2, [pc, #116]	; (8002bc4 <TIM_Base_SetConfig+0xc4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d108      	bne.n	8002b64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <TIM_Base_SetConfig+0xc0>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d103      	bne.n	8002b98 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f023 0201 	bic.w	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	611a      	str	r2, [r3, #16]
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr
 8002bc0:	40012c00 	.word	0x40012c00
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f023 0201 	bic.w	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f023 030a 	bic.w	r3, r3, #10
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	621a      	str	r2, [r3, #32]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr

08002c24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a1b      	ldr	r3, [r3, #32]
 8002c34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	f023 0210 	bic.w	r2, r3, #16
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	031b      	lsls	r3, r3, #12
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	621a      	str	r2, [r3, #32]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr

08002c82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b085      	sub	sp, #20
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f043 0307 	orr.w	r3, r3, #7
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bf00      	nop
 8002cae:	3714      	adds	r7, #20
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b087      	sub	sp, #28
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	021a      	lsls	r2, r3, #8
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	431a      	orrs	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e041      	b.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a14      	ldr	r2, [pc, #80]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d009      	beq.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d004      	beq.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d10c      	bne.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68ba      	ldr	r2, [r7, #8]
 8002d7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2201      	movs	r2, #1
 8002d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40012c00 	.word	0x40012c00
 8002da0:	40000400 	.word	0x40000400

08002da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <__libc_init_array>:
 8002dc8:	b570      	push	{r4, r5, r6, lr}
 8002dca:	2600      	movs	r6, #0
 8002dcc:	4d0c      	ldr	r5, [pc, #48]	; (8002e00 <__libc_init_array+0x38>)
 8002dce:	4c0d      	ldr	r4, [pc, #52]	; (8002e04 <__libc_init_array+0x3c>)
 8002dd0:	1b64      	subs	r4, r4, r5
 8002dd2:	10a4      	asrs	r4, r4, #2
 8002dd4:	42a6      	cmp	r6, r4
 8002dd6:	d109      	bne.n	8002dec <__libc_init_array+0x24>
 8002dd8:	f000 f822 	bl	8002e20 <_init>
 8002ddc:	2600      	movs	r6, #0
 8002dde:	4d0a      	ldr	r5, [pc, #40]	; (8002e08 <__libc_init_array+0x40>)
 8002de0:	4c0a      	ldr	r4, [pc, #40]	; (8002e0c <__libc_init_array+0x44>)
 8002de2:	1b64      	subs	r4, r4, r5
 8002de4:	10a4      	asrs	r4, r4, #2
 8002de6:	42a6      	cmp	r6, r4
 8002de8:	d105      	bne.n	8002df6 <__libc_init_array+0x2e>
 8002dea:	bd70      	pop	{r4, r5, r6, pc}
 8002dec:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df0:	4798      	blx	r3
 8002df2:	3601      	adds	r6, #1
 8002df4:	e7ee      	b.n	8002dd4 <__libc_init_array+0xc>
 8002df6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfa:	4798      	blx	r3
 8002dfc:	3601      	adds	r6, #1
 8002dfe:	e7f2      	b.n	8002de6 <__libc_init_array+0x1e>
 8002e00:	08002e5c 	.word	0x08002e5c
 8002e04:	08002e5c 	.word	0x08002e5c
 8002e08:	08002e5c 	.word	0x08002e5c
 8002e0c:	08002e60 	.word	0x08002e60

08002e10 <memset>:
 8002e10:	4603      	mov	r3, r0
 8002e12:	4402      	add	r2, r0
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d100      	bne.n	8002e1a <memset+0xa>
 8002e18:	4770      	bx	lr
 8002e1a:	f803 1b01 	strb.w	r1, [r3], #1
 8002e1e:	e7f9      	b.n	8002e14 <memset+0x4>

08002e20 <_init>:
 8002e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e22:	bf00      	nop
 8002e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e26:	bc08      	pop	{r3}
 8002e28:	469e      	mov	lr, r3
 8002e2a:	4770      	bx	lr

08002e2c <_fini>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	bf00      	nop
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr
