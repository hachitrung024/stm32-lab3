
project-lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e44  08002e44  00012e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e68  08002e68  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08002e68  08002e68  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e68  08002e68  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e68  08002e68  00012e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e6c  08002e6c  00012e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08002e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000024  08002e94  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002e94  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c68  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb2  00000000  00000000  00029cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017476  00000000  00000000  0002cf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5e1  00000000  00000000  000443ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825ea  00000000  00000000  000519af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d3f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028bc  00000000  00000000  000d3fec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000024 	.word	0x20000024
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e2c 	.word	0x08002e2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000028 	.word	0x20000028
 8000148:	08002e2c 	.word	0x08002e2c

0800014c <buttonRun>:

static uint8_t button_press_flags[MAX_BUTTONS];
static uint8_t button_hold_flags[MAX_BUTTONS];

static uint16_t button_hold_counters[MAX_BUTTONS];
void buttonRun(){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for(uint8_t i=0; i < MAX_BUTTONS; i++){
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e06b      	b.n	8000230 <buttonRun+0xe4>
		//BEGIN for
		button_buffers0[i] = button_buffers1[i];
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79fb      	ldrb	r3, [r7, #7]
 800015c:	4938      	ldr	r1, [pc, #224]	; (8000240 <buttonRun+0xf4>)
 800015e:	5c89      	ldrb	r1, [r1, r2]
 8000160:	4a38      	ldr	r2, [pc, #224]	; (8000244 <buttonRun+0xf8>)
 8000162:	54d1      	strb	r1, [r2, r3]
		button_buffers1[i] = button_buffers2[i];
 8000164:	79fa      	ldrb	r2, [r7, #7]
 8000166:	79fb      	ldrb	r3, [r7, #7]
 8000168:	4937      	ldr	r1, [pc, #220]	; (8000248 <buttonRun+0xfc>)
 800016a:	5c89      	ldrb	r1, [r1, r2]
 800016c:	4a34      	ldr	r2, [pc, #208]	; (8000240 <buttonRun+0xf4>)
 800016e:	54d1      	strb	r1, [r2, r3]
		button_buffers2[i] = HAL_GPIO_ReadPin( button_ports[i], button_pins[i]);
 8000170:	79fb      	ldrb	r3, [r7, #7]
 8000172:	4a36      	ldr	r2, [pc, #216]	; (800024c <buttonRun+0x100>)
 8000174:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000178:	79fb      	ldrb	r3, [r7, #7]
 800017a:	4935      	ldr	r1, [pc, #212]	; (8000250 <buttonRun+0x104>)
 800017c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000180:	79fc      	ldrb	r4, [r7, #7]
 8000182:	4619      	mov	r1, r3
 8000184:	4610      	mov	r0, r2
 8000186:	f001 fe1b 	bl	8001dc0 <HAL_GPIO_ReadPin>
 800018a:	4603      	mov	r3, r0
 800018c:	461a      	mov	r2, r3
 800018e:	4b2e      	ldr	r3, [pc, #184]	; (8000248 <buttonRun+0xfc>)
 8000190:	551a      	strb	r2, [r3, r4]
		if((button_buffers0[i] == button_buffers1[i]) && (button_buffers1[i] == button_buffers2[i])){
 8000192:	79fb      	ldrb	r3, [r7, #7]
 8000194:	4a2b      	ldr	r2, [pc, #172]	; (8000244 <buttonRun+0xf8>)
 8000196:	5cd2      	ldrb	r2, [r2, r3]
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	4929      	ldr	r1, [pc, #164]	; (8000240 <buttonRun+0xf4>)
 800019c:	5ccb      	ldrb	r3, [r1, r3]
 800019e:	429a      	cmp	r2, r3
 80001a0:	d13d      	bne.n	800021e <buttonRun+0xd2>
 80001a2:	79fb      	ldrb	r3, [r7, #7]
 80001a4:	4a26      	ldr	r2, [pc, #152]	; (8000240 <buttonRun+0xf4>)
 80001a6:	5cd2      	ldrb	r2, [r2, r3]
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	4927      	ldr	r1, [pc, #156]	; (8000248 <buttonRun+0xfc>)
 80001ac:	5ccb      	ldrb	r3, [r1, r3]
 80001ae:	429a      	cmp	r2, r3
 80001b0:	d135      	bne.n	800021e <buttonRun+0xd2>
			//BEGIN stable condition
			if(button_buffers2[i] != button_buffers3[i]){
 80001b2:	79fb      	ldrb	r3, [r7, #7]
 80001b4:	4a24      	ldr	r2, [pc, #144]	; (8000248 <buttonRun+0xfc>)
 80001b6:	5cd2      	ldrb	r2, [r2, r3]
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	4926      	ldr	r1, [pc, #152]	; (8000254 <buttonRun+0x108>)
 80001bc:	5ccb      	ldrb	r3, [r1, r3]
 80001be:	429a      	cmp	r2, r3
 80001c0:	d014      	beq.n	80001ec <buttonRun+0xa0>
				//BEGIN trigger edge
				button_buffers3[i] = button_buffers2[i];
 80001c2:	79fa      	ldrb	r2, [r7, #7]
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	4920      	ldr	r1, [pc, #128]	; (8000248 <buttonRun+0xfc>)
 80001c8:	5c89      	ldrb	r1, [r1, r2]
 80001ca:	4a22      	ldr	r2, [pc, #136]	; (8000254 <buttonRun+0x108>)
 80001cc:	54d1      	strb	r1, [r2, r3]
				if(button_buffers2[i]==BUTTON_PRESSED){
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4a1d      	ldr	r2, [pc, #116]	; (8000248 <buttonRun+0xfc>)
 80001d2:	5cd3      	ldrb	r3, [r2, r3]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d127      	bne.n	8000228 <buttonRun+0xdc>
					//Edge down
					button_press_flags[i] = 1;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	4a1f      	ldr	r2, [pc, #124]	; (8000258 <buttonRun+0x10c>)
 80001dc:	2101      	movs	r1, #1
 80001de:	54d1      	strb	r1, [r2, r3]
					button_hold_counters[i] = BUTTON_HOLD_DUR;
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	4a1e      	ldr	r2, [pc, #120]	; (800025c <buttonRun+0x110>)
 80001e4:	2164      	movs	r1, #100	; 0x64
 80001e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if(button_buffers2[i] != button_buffers3[i]){
 80001ea:	e01d      	b.n	8000228 <buttonRun+0xdc>
				}
				//END trigger edge
			}else if(button_buffers3[i] == BUTTON_PRESSED){
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	4a19      	ldr	r2, [pc, #100]	; (8000254 <buttonRun+0x108>)
 80001f0:	5cd3      	ldrb	r3, [r2, r3]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d118      	bne.n	8000228 <buttonRun+0xdc>
				//Stable pressed condition
				button_hold_counters[i]--;
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	4a18      	ldr	r2, [pc, #96]	; (800025c <buttonRun+0x110>)
 80001fa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80001fe:	3a01      	subs	r2, #1
 8000200:	b291      	uxth	r1, r2
 8000202:	4a16      	ldr	r2, [pc, #88]	; (800025c <buttonRun+0x110>)
 8000204:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				if(button_hold_counters[i]==0) button_hold_flags[i] = 1;
 8000208:	79fb      	ldrb	r3, [r7, #7]
 800020a:	4a14      	ldr	r2, [pc, #80]	; (800025c <buttonRun+0x110>)
 800020c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d109      	bne.n	8000228 <buttonRun+0xdc>
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	4a12      	ldr	r2, [pc, #72]	; (8000260 <buttonRun+0x114>)
 8000218:	2101      	movs	r1, #1
 800021a:	54d1      	strb	r1, [r2, r3]
			if(button_buffers2[i] != button_buffers3[i]){
 800021c:	e004      	b.n	8000228 <buttonRun+0xdc>
			}
			//END stable condition
		} else{
			button_hold_flags[i] = 0;
 800021e:	79fb      	ldrb	r3, [r7, #7]
 8000220:	4a0f      	ldr	r2, [pc, #60]	; (8000260 <buttonRun+0x114>)
 8000222:	2100      	movs	r1, #0
 8000224:	54d1      	strb	r1, [r2, r3]
 8000226:	e000      	b.n	800022a <buttonRun+0xde>
			if(button_buffers2[i] != button_buffers3[i]){
 8000228:	bf00      	nop
	for(uint8_t i=0; i < MAX_BUTTONS; i++){
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	3301      	adds	r3, #1
 800022e:	71fb      	strb	r3, [r7, #7]
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b02      	cmp	r3, #2
 8000234:	d990      	bls.n	8000158 <buttonRun+0xc>
		}
		//END for
	}
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	370c      	adds	r7, #12
 800023c:	46bd      	mov	sp, r7
 800023e:	bd90      	pop	{r4, r7, pc}
 8000240:	20000044 	.word	0x20000044
 8000244:	20000040 	.word	0x20000040
 8000248:	20000048 	.word	0x20000048
 800024c:	20000000 	.word	0x20000000
 8000250:	2000000c 	.word	0x2000000c
 8000254:	2000004c 	.word	0x2000004c
 8000258:	20000050 	.word	0x20000050
 800025c:	20000058 	.word	0x20000058
 8000260:	20000054 	.word	0x20000054

08000264 <isButtonPressed>:
uint8_t isButtonPressed(uint8_t index){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_BUTTONS) return 0;
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	2b02      	cmp	r3, #2
 8000272:	d901      	bls.n	8000278 <isButtonPressed+0x14>
 8000274:	2300      	movs	r3, #0
 8000276:	e00b      	b.n	8000290 <isButtonPressed+0x2c>
	if(button_press_flags[index] == 1){
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	4a08      	ldr	r2, [pc, #32]	; (800029c <isButtonPressed+0x38>)
 800027c:	5cd3      	ldrb	r3, [r2, r3]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d105      	bne.n	800028e <isButtonPressed+0x2a>
		button_press_flags[index] = 0;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4a05      	ldr	r2, [pc, #20]	; (800029c <isButtonPressed+0x38>)
 8000286:	2100      	movs	r1, #0
 8000288:	54d1      	strb	r1, [r2, r3]
		return 1;
 800028a:	2301      	movs	r3, #1
 800028c:	e000      	b.n	8000290 <isButtonPressed+0x2c>
	}
	return 0;
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	20000050 	.word	0x20000050

080002a0 <isButtonHolding>:
uint8_t isButtonHolding(uint8_t index){
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	if(index >= MAX_BUTTONS) return 0;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b02      	cmp	r3, #2
 80002ae:	d901      	bls.n	80002b4 <isButtonHolding+0x14>
 80002b0:	2300      	movs	r3, #0
 80002b2:	e002      	b.n	80002ba <isButtonHolding+0x1a>
	return button_hold_flags[index];
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <isButtonHolding+0x24>)
 80002b8:	5cd3      	ldrb	r3, [r2, r3]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr
 80002c4:	20000054 	.word	0x20000054

080002c8 <setCounter>:

#include "counter.h"

uint8_t counters[MAX_COUNTER];
uint8_t red_duration, amber_duration, green_duration;
void setCounter(uint8_t index, uint8_t value){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b082      	sub	sp, #8
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	4603      	mov	r3, r0
 80002d0:	460a      	mov	r2, r1
 80002d2:	71fb      	strb	r3, [r7, #7]
 80002d4:	4613      	mov	r3, r2
 80002d6:	71bb      	strb	r3, [r7, #6]
	setTimer(0, 1000);
 80002d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80002dc:	2000      	movs	r0, #0
 80002de:	f000 fca3 	bl	8000c28 <setTimer>
	counters[index] = value;
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <setCounter+0x3c>)
 80002e6:	79ba      	ldrb	r2, [r7, #6]
 80002e8:	54ca      	strb	r2, [r1, r3]
	updateBuffer7SEG(counters[0], counters[1]);
 80002ea:	4b06      	ldr	r3, [pc, #24]	; (8000304 <setCounter+0x3c>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	4a05      	ldr	r2, [pc, #20]	; (8000304 <setCounter+0x3c>)
 80002f0:	7852      	ldrb	r2, [r2, #1]
 80002f2:	4611      	mov	r1, r2
 80002f4:	4618      	mov	r0, r3
 80002f6:	f000 f8c1 	bl	800047c <updateBuffer7SEG>
}
 80002fa:	bf00      	nop
 80002fc:	3708      	adds	r7, #8
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	20000070 	.word	0x20000070

08000308 <counterRun>:
void counterRun(){
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	if(isFlagTimer(0) && counters[0]>0 && counters[1]>0){
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fc7b 	bl	8000c08 <isFlagTimer>
 8000312:	4603      	mov	r3, r0
 8000314:	2b00      	cmp	r3, #0
 8000316:	d020      	beq.n	800035a <counterRun+0x52>
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <counterRun+0x58>)
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d01c      	beq.n	800035a <counterRun+0x52>
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <counterRun+0x58>)
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d018      	beq.n	800035a <counterRun+0x52>
		setTimer(0, 1000);
 8000328:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800032c:	2000      	movs	r0, #0
 800032e:	f000 fc7b 	bl	8000c28 <setTimer>
		counters[0]--;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <counterRun+0x58>)
 8000334:	781b      	ldrb	r3, [r3, #0]
 8000336:	3b01      	subs	r3, #1
 8000338:	b2da      	uxtb	r2, r3
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <counterRun+0x58>)
 800033c:	701a      	strb	r2, [r3, #0]
		counters[1]--;
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <counterRun+0x58>)
 8000340:	785b      	ldrb	r3, [r3, #1]
 8000342:	3b01      	subs	r3, #1
 8000344:	b2da      	uxtb	r2, r3
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <counterRun+0x58>)
 8000348:	705a      	strb	r2, [r3, #1]
		updateBuffer7SEG(counters[0], counters[1]);
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <counterRun+0x58>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	4a04      	ldr	r2, [pc, #16]	; (8000360 <counterRun+0x58>)
 8000350:	7852      	ldrb	r2, [r2, #1]
 8000352:	4611      	mov	r1, r2
 8000354:	4618      	mov	r0, r3
 8000356:	f000 f891 	bl	800047c <updateBuffer7SEG>
	}
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000070 	.word	0x20000070

08000364 <increaseDuration>:
void increaseDuration(uint8_t index){
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	71fb      	strb	r3, [r7, #7]
	if(index == 0){
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d11a      	bne.n	80003aa <increaseDuration+0x46>
		red_duration++;
 8000374:	4b2e      	ldr	r3, [pc, #184]	; (8000430 <increaseDuration+0xcc>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	3301      	adds	r3, #1
 800037a:	b2da      	uxtb	r2, r3
 800037c:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <increaseDuration+0xcc>)
 800037e:	701a      	strb	r2, [r3, #0]
		if(red_duration > 99) red_duration = green_duration + amber_duration;
 8000380:	4b2b      	ldr	r3, [pc, #172]	; (8000430 <increaseDuration+0xcc>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	2b63      	cmp	r3, #99	; 0x63
 8000386:	d907      	bls.n	8000398 <increaseDuration+0x34>
 8000388:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <increaseDuration+0xd0>)
 800038a:	781a      	ldrb	r2, [r3, #0]
 800038c:	4b2a      	ldr	r3, [pc, #168]	; (8000438 <increaseDuration+0xd4>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	4413      	add	r3, r2
 8000392:	b2da      	uxtb	r2, r3
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <increaseDuration+0xcc>)
 8000396:	701a      	strb	r2, [r3, #0]
		updateBuffer7SEG(red_duration, red_duration);
 8000398:	4b25      	ldr	r3, [pc, #148]	; (8000430 <increaseDuration+0xcc>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4a24      	ldr	r2, [pc, #144]	; (8000430 <increaseDuration+0xcc>)
 800039e:	7812      	ldrb	r2, [r2, #0]
 80003a0:	4611      	mov	r1, r2
 80003a2:	4618      	mov	r0, r3
 80003a4:	f000 f86a 	bl	800047c <updateBuffer7SEG>
	}else if(index == 2){
		green_duration++;
		if(green_duration >= red_duration) green_duration = red_duration - amber_duration;
		updateBuffer7SEG(green_duration, green_duration);
	}
}
 80003a8:	e03e      	b.n	8000428 <increaseDuration+0xc4>
	}else if(index == 1){
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d11c      	bne.n	80003ea <increaseDuration+0x86>
		amber_duration++;
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <increaseDuration+0xd4>)
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	3301      	adds	r3, #1
 80003b6:	b2da      	uxtb	r2, r3
 80003b8:	4b1f      	ldr	r3, [pc, #124]	; (8000438 <increaseDuration+0xd4>)
 80003ba:	701a      	strb	r2, [r3, #0]
		if(amber_duration >= red_duration) amber_duration = red_duration - green_duration;
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <increaseDuration+0xd4>)
 80003be:	781a      	ldrb	r2, [r3, #0]
 80003c0:	4b1b      	ldr	r3, [pc, #108]	; (8000430 <increaseDuration+0xcc>)
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	429a      	cmp	r2, r3
 80003c6:	d307      	bcc.n	80003d8 <increaseDuration+0x74>
 80003c8:	4b19      	ldr	r3, [pc, #100]	; (8000430 <increaseDuration+0xcc>)
 80003ca:	781a      	ldrb	r2, [r3, #0]
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <increaseDuration+0xd0>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	1ad3      	subs	r3, r2, r3
 80003d2:	b2da      	uxtb	r2, r3
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <increaseDuration+0xd4>)
 80003d6:	701a      	strb	r2, [r3, #0]
		updateBuffer7SEG(amber_duration, amber_duration);
 80003d8:	4b17      	ldr	r3, [pc, #92]	; (8000438 <increaseDuration+0xd4>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4a16      	ldr	r2, [pc, #88]	; (8000438 <increaseDuration+0xd4>)
 80003de:	7812      	ldrb	r2, [r2, #0]
 80003e0:	4611      	mov	r1, r2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f000 f84a 	bl	800047c <updateBuffer7SEG>
}
 80003e8:	e01e      	b.n	8000428 <increaseDuration+0xc4>
	}else if(index == 2){
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	2b02      	cmp	r3, #2
 80003ee:	d11b      	bne.n	8000428 <increaseDuration+0xc4>
		green_duration++;
 80003f0:	4b10      	ldr	r3, [pc, #64]	; (8000434 <increaseDuration+0xd0>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <increaseDuration+0xd0>)
 80003fa:	701a      	strb	r2, [r3, #0]
		if(green_duration >= red_duration) green_duration = red_duration - amber_duration;
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <increaseDuration+0xd0>)
 80003fe:	781a      	ldrb	r2, [r3, #0]
 8000400:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <increaseDuration+0xcc>)
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	429a      	cmp	r2, r3
 8000406:	d307      	bcc.n	8000418 <increaseDuration+0xb4>
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <increaseDuration+0xcc>)
 800040a:	781a      	ldrb	r2, [r3, #0]
 800040c:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <increaseDuration+0xd4>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	1ad3      	subs	r3, r2, r3
 8000412:	b2da      	uxtb	r2, r3
 8000414:	4b07      	ldr	r3, [pc, #28]	; (8000434 <increaseDuration+0xd0>)
 8000416:	701a      	strb	r2, [r3, #0]
		updateBuffer7SEG(green_duration, green_duration);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <increaseDuration+0xd0>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <increaseDuration+0xd0>)
 800041e:	7812      	ldrb	r2, [r2, #0]
 8000420:	4611      	mov	r1, r2
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f82a 	bl	800047c <updateBuffer7SEG>
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	20000072 	.word	0x20000072
 8000434:	2000006c 	.word	0x2000006c
 8000438:	2000006d 	.word	0x2000006d

0800043c <run7SEG>:
#include "display7SEG.h"

uint8_t led7SEG_index = 0;
uint8_t led7SEG_buffer[MAX_LED7SEG];

void run7SEG(){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	if(isFlagTimer(1)){
 8000440:	2001      	movs	r0, #1
 8000442:	f000 fbe1 	bl	8000c08 <isFlagTimer>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d013      	beq.n	8000474 <run7SEG+0x38>
		setTimer(1, 100);
 800044c:	2164      	movs	r1, #100	; 0x64
 800044e:	2001      	movs	r0, #1
 8000450:	f000 fbea 	bl	8000c28 <setTimer>
		if(led7SEG_index >= MAX_LED7SEG) led7SEG_index = 0;
 8000454:	4b08      	ldr	r3, [pc, #32]	; (8000478 <run7SEG+0x3c>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	2b03      	cmp	r3, #3
 800045a:	d902      	bls.n	8000462 <run7SEG+0x26>
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <run7SEG+0x3c>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
		update7SEG(led7SEG_index++);
 8000462:	4b05      	ldr	r3, [pc, #20]	; (8000478 <run7SEG+0x3c>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	1c5a      	adds	r2, r3, #1
 8000468:	b2d1      	uxtb	r1, r2
 800046a:	4a03      	ldr	r2, [pc, #12]	; (8000478 <run7SEG+0x3c>)
 800046c:	7011      	strb	r1, [r2, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 f840 	bl	80004f4 <update7SEG>
	}
}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	2000005e 	.word	0x2000005e

0800047c <updateBuffer7SEG>:
void updateBuffer7SEG(uint8_t num1, uint8_t num2){
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	460a      	mov	r2, r1
 8000486:	71fb      	strb	r3, [r7, #7]
 8000488:	4613      	mov	r3, r2
 800048a:	71bb      	strb	r3, [r7, #6]
	led7SEG_buffer[0] = num1/10;
 800048c:	79fb      	ldrb	r3, [r7, #7]
 800048e:	4a17      	ldr	r2, [pc, #92]	; (80004ec <updateBuffer7SEG+0x70>)
 8000490:	fba2 2303 	umull	r2, r3, r2, r3
 8000494:	08db      	lsrs	r3, r3, #3
 8000496:	b2da      	uxtb	r2, r3
 8000498:	4b15      	ldr	r3, [pc, #84]	; (80004f0 <updateBuffer7SEG+0x74>)
 800049a:	701a      	strb	r2, [r3, #0]
	led7SEG_buffer[1] = num1%10;
 800049c:	79fa      	ldrb	r2, [r7, #7]
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <updateBuffer7SEG+0x70>)
 80004a0:	fba3 1302 	umull	r1, r3, r3, r2
 80004a4:	08d9      	lsrs	r1, r3, #3
 80004a6:	460b      	mov	r3, r1
 80004a8:	009b      	lsls	r3, r3, #2
 80004aa:	440b      	add	r3, r1
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	1ad3      	subs	r3, r2, r3
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	4b0f      	ldr	r3, [pc, #60]	; (80004f0 <updateBuffer7SEG+0x74>)
 80004b4:	705a      	strb	r2, [r3, #1]
	led7SEG_buffer[2] = num2/10;
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <updateBuffer7SEG+0x70>)
 80004ba:	fba2 2303 	umull	r2, r3, r2, r3
 80004be:	08db      	lsrs	r3, r3, #3
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4b0b      	ldr	r3, [pc, #44]	; (80004f0 <updateBuffer7SEG+0x74>)
 80004c4:	709a      	strb	r2, [r3, #2]
	led7SEG_buffer[3] = num2%10;
 80004c6:	79ba      	ldrb	r2, [r7, #6]
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <updateBuffer7SEG+0x70>)
 80004ca:	fba3 1302 	umull	r1, r3, r3, r2
 80004ce:	08d9      	lsrs	r1, r3, #3
 80004d0:	460b      	mov	r3, r1
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	440b      	add	r3, r1
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	1ad3      	subs	r3, r2, r3
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b04      	ldr	r3, [pc, #16]	; (80004f0 <updateBuffer7SEG+0x74>)
 80004de:	70da      	strb	r2, [r3, #3]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bc80      	pop	{r7}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	cccccccd 	.word	0xcccccccd
 80004f0:	20000074 	.word	0x20000074

080004f4 <update7SEG>:
void update7SEG(uint8_t num){
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	switch (num) {
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d873      	bhi.n	80005ec <update7SEG+0xf8>
 8000504:	a201      	add	r2, pc, #4	; (adr r2, 800050c <update7SEG+0x18>)
 8000506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050a:	bf00      	nop
 800050c:	0800051d 	.word	0x0800051d
 8000510:	08000551 	.word	0x08000551
 8000514:	08000585 	.word	0x08000585
 8000518:	080005b9 	.word	0x080005b9
		case 0:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2102      	movs	r1, #2
 8000520:	483f      	ldr	r0, [pc, #252]	; (8000620 <update7SEG+0x12c>)
 8000522:	f001 fc64 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2104      	movs	r1, #4
 800052a:	483d      	ldr	r0, [pc, #244]	; (8000620 <update7SEG+0x12c>)
 800052c:	f001 fc5f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2108      	movs	r1, #8
 8000534:	483a      	ldr	r0, [pc, #232]	; (8000620 <update7SEG+0x12c>)
 8000536:	f001 fc5a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2110      	movs	r1, #16
 800053e:	4838      	ldr	r0, [pc, #224]	; (8000620 <update7SEG+0x12c>)
 8000540:	f001 fc55 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[0]);
 8000544:	4b37      	ldr	r3, [pc, #220]	; (8000624 <update7SEG+0x130>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f86d 	bl	8000628 <display7SEG>
			break;
 800054e:	e062      	b.n	8000616 <update7SEG+0x122>
		case 1:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2102      	movs	r1, #2
 8000554:	4832      	ldr	r0, [pc, #200]	; (8000620 <update7SEG+0x12c>)
 8000556:	f001 fc4a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2104      	movs	r1, #4
 800055e:	4830      	ldr	r0, [pc, #192]	; (8000620 <update7SEG+0x12c>)
 8000560:	f001 fc45 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000564:	2201      	movs	r2, #1
 8000566:	2108      	movs	r1, #8
 8000568:	482d      	ldr	r0, [pc, #180]	; (8000620 <update7SEG+0x12c>)
 800056a:	f001 fc40 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2110      	movs	r1, #16
 8000572:	482b      	ldr	r0, [pc, #172]	; (8000620 <update7SEG+0x12c>)
 8000574:	f001 fc3b 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[1]);
 8000578:	4b2a      	ldr	r3, [pc, #168]	; (8000624 <update7SEG+0x130>)
 800057a:	785b      	ldrb	r3, [r3, #1]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f853 	bl	8000628 <display7SEG>
			break;
 8000582:	e048      	b.n	8000616 <update7SEG+0x122>
		case 2:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000584:	2201      	movs	r2, #1
 8000586:	2102      	movs	r1, #2
 8000588:	4825      	ldr	r0, [pc, #148]	; (8000620 <update7SEG+0x12c>)
 800058a:	f001 fc30 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2104      	movs	r1, #4
 8000592:	4823      	ldr	r0, [pc, #140]	; (8000620 <update7SEG+0x12c>)
 8000594:	f001 fc2b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2108      	movs	r1, #8
 800059c:	4820      	ldr	r0, [pc, #128]	; (8000620 <update7SEG+0x12c>)
 800059e:	f001 fc26 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2110      	movs	r1, #16
 80005a6:	481e      	ldr	r0, [pc, #120]	; (8000620 <update7SEG+0x12c>)
 80005a8:	f001 fc21 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[2]);
 80005ac:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <update7SEG+0x130>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f839 	bl	8000628 <display7SEG>
			break;
 80005b6:	e02e      	b.n	8000616 <update7SEG+0x122>
		case 3:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	2102      	movs	r1, #2
 80005bc:	4818      	ldr	r0, [pc, #96]	; (8000620 <update7SEG+0x12c>)
 80005be:	f001 fc16 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2104      	movs	r1, #4
 80005c6:	4816      	ldr	r0, [pc, #88]	; (8000620 <update7SEG+0x12c>)
 80005c8:	f001 fc11 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80005cc:	2201      	movs	r2, #1
 80005ce:	2108      	movs	r1, #8
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <update7SEG+0x12c>)
 80005d2:	f001 fc0c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80005d6:	2200      	movs	r2, #0
 80005d8:	2110      	movs	r1, #16
 80005da:	4811      	ldr	r0, [pc, #68]	; (8000620 <update7SEG+0x12c>)
 80005dc:	f001 fc07 	bl	8001dee <HAL_GPIO_WritePin>
			display7SEG(led7SEG_buffer[3]);
 80005e0:	4b10      	ldr	r3, [pc, #64]	; (8000624 <update7SEG+0x130>)
 80005e2:	78db      	ldrb	r3, [r3, #3]
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f81f 	bl	8000628 <display7SEG>
			break;
 80005ea:	e014      	b.n	8000616 <update7SEG+0x122>
		default:
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2102      	movs	r1, #2
 80005f0:	480b      	ldr	r0, [pc, #44]	; (8000620 <update7SEG+0x12c>)
 80005f2:	f001 fbfc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	2104      	movs	r1, #4
 80005fa:	4809      	ldr	r0, [pc, #36]	; (8000620 <update7SEG+0x12c>)
 80005fc:	f001 fbf7 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000600:	2201      	movs	r2, #1
 8000602:	2108      	movs	r1, #8
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <update7SEG+0x12c>)
 8000606:	f001 fbf2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2110      	movs	r1, #16
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <update7SEG+0x12c>)
 8000610:	f001 fbed 	bl	8001dee <HAL_GPIO_WritePin>
			break;
 8000614:	bf00      	nop
	}
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40010800 	.word	0x40010800
 8000624:	20000074 	.word	0x20000074

08000628 <display7SEG>:
void display7SEG(uint8_t num){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
  switch(num){
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b09      	cmp	r3, #9
 8000636:	f200 817f 	bhi.w	8000938 <display7SEG+0x310>
 800063a:	a201      	add	r2, pc, #4	; (adr r2, 8000640 <display7SEG+0x18>)
 800063c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000640:	08000669 	.word	0x08000669
 8000644:	080006b1 	.word	0x080006b1
 8000648:	080006f9 	.word	0x080006f9
 800064c:	08000741 	.word	0x08000741
 8000650:	08000789 	.word	0x08000789
 8000654:	080007d1 	.word	0x080007d1
 8000658:	08000819 	.word	0x08000819
 800065c:	08000861 	.word	0x08000861
 8000660:	080008a9 	.word	0x080008a9
 8000664:	080008f1 	.word	0x080008f1
	  case 0:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	48c6      	ldr	r0, [pc, #792]	; (8000988 <display7SEG+0x360>)
 800066e:	f001 fbbe 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2102      	movs	r1, #2
 8000676:	48c4      	ldr	r0, [pc, #784]	; (8000988 <display7SEG+0x360>)
 8000678:	f001 fbb9 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	48c1      	ldr	r0, [pc, #772]	; (8000988 <display7SEG+0x360>)
 8000682:	f001 fbb4 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000686:	2200      	movs	r2, #0
 8000688:	2108      	movs	r1, #8
 800068a:	48bf      	ldr	r0, [pc, #764]	; (8000988 <display7SEG+0x360>)
 800068c:	f001 fbaf 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2110      	movs	r1, #16
 8000694:	48bc      	ldr	r0, [pc, #752]	; (8000988 <display7SEG+0x360>)
 8000696:	f001 fbaa 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800069a:	2200      	movs	r2, #0
 800069c:	2120      	movs	r1, #32
 800069e:	48ba      	ldr	r0, [pc, #744]	; (8000988 <display7SEG+0x360>)
 80006a0:	f001 fba5 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2140      	movs	r1, #64	; 0x40
 80006a8:	48b7      	ldr	r0, [pc, #732]	; (8000988 <display7SEG+0x360>)
 80006aa:	f001 fba0 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 80006ae:	e167      	b.n	8000980 <display7SEG+0x358>
	  case 1:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2101      	movs	r1, #1
 80006b4:	48b4      	ldr	r0, [pc, #720]	; (8000988 <display7SEG+0x360>)
 80006b6:	f001 fb9a 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80006ba:	2200      	movs	r2, #0
 80006bc:	2102      	movs	r1, #2
 80006be:	48b2      	ldr	r0, [pc, #712]	; (8000988 <display7SEG+0x360>)
 80006c0:	f001 fb95 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2104      	movs	r1, #4
 80006c8:	48af      	ldr	r0, [pc, #700]	; (8000988 <display7SEG+0x360>)
 80006ca:	f001 fb90 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	2108      	movs	r1, #8
 80006d2:	48ad      	ldr	r0, [pc, #692]	; (8000988 <display7SEG+0x360>)
 80006d4:	f001 fb8b 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	2110      	movs	r1, #16
 80006dc:	48aa      	ldr	r0, [pc, #680]	; (8000988 <display7SEG+0x360>)
 80006de:	f001 fb86 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2120      	movs	r1, #32
 80006e6:	48a8      	ldr	r0, [pc, #672]	; (8000988 <display7SEG+0x360>)
 80006e8:	f001 fb81 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 80006ec:	2201      	movs	r2, #1
 80006ee:	2140      	movs	r1, #64	; 0x40
 80006f0:	48a5      	ldr	r0, [pc, #660]	; (8000988 <display7SEG+0x360>)
 80006f2:	f001 fb7c 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 80006f6:	e143      	b.n	8000980 <display7SEG+0x358>
	  case 2:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80006f8:	2200      	movs	r2, #0
 80006fa:	2101      	movs	r1, #1
 80006fc:	48a2      	ldr	r0, [pc, #648]	; (8000988 <display7SEG+0x360>)
 80006fe:	f001 fb76 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	48a0      	ldr	r0, [pc, #640]	; (8000988 <display7SEG+0x360>)
 8000708:	f001 fb71 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2104      	movs	r1, #4
 8000710:	489d      	ldr	r0, [pc, #628]	; (8000988 <display7SEG+0x360>)
 8000712:	f001 fb6c 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	489b      	ldr	r0, [pc, #620]	; (8000988 <display7SEG+0x360>)
 800071c:	f001 fb67 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2110      	movs	r1, #16
 8000724:	4898      	ldr	r0, [pc, #608]	; (8000988 <display7SEG+0x360>)
 8000726:	f001 fb62 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800072a:	2201      	movs	r2, #1
 800072c:	2120      	movs	r1, #32
 800072e:	4896      	ldr	r0, [pc, #600]	; (8000988 <display7SEG+0x360>)
 8000730:	f001 fb5d 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2140      	movs	r1, #64	; 0x40
 8000738:	4893      	ldr	r0, [pc, #588]	; (8000988 <display7SEG+0x360>)
 800073a:	f001 fb58 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 800073e:	e11f      	b.n	8000980 <display7SEG+0x358>
	  case 3:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2101      	movs	r1, #1
 8000744:	4890      	ldr	r0, [pc, #576]	; (8000988 <display7SEG+0x360>)
 8000746:	f001 fb52 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	2102      	movs	r1, #2
 800074e:	488e      	ldr	r0, [pc, #568]	; (8000988 <display7SEG+0x360>)
 8000750:	f001 fb4d 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000754:	2200      	movs	r2, #0
 8000756:	2104      	movs	r1, #4
 8000758:	488b      	ldr	r0, [pc, #556]	; (8000988 <display7SEG+0x360>)
 800075a:	f001 fb48 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	2108      	movs	r1, #8
 8000762:	4889      	ldr	r0, [pc, #548]	; (8000988 <display7SEG+0x360>)
 8000764:	f001 fb43 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2110      	movs	r1, #16
 800076c:	4886      	ldr	r0, [pc, #536]	; (8000988 <display7SEG+0x360>)
 800076e:	f001 fb3e 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4884      	ldr	r0, [pc, #528]	; (8000988 <display7SEG+0x360>)
 8000778:	f001 fb39 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	4881      	ldr	r0, [pc, #516]	; (8000988 <display7SEG+0x360>)
 8000782:	f001 fb34 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 8000786:	e0fb      	b.n	8000980 <display7SEG+0x358>
	  case 4:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	487e      	ldr	r0, [pc, #504]	; (8000988 <display7SEG+0x360>)
 800078e:	f001 fb2e 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	487c      	ldr	r0, [pc, #496]	; (8000988 <display7SEG+0x360>)
 8000798:	f001 fb29 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	4879      	ldr	r0, [pc, #484]	; (8000988 <display7SEG+0x360>)
 80007a2:	f001 fb24 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 80007a6:	2201      	movs	r2, #1
 80007a8:	2108      	movs	r1, #8
 80007aa:	4877      	ldr	r0, [pc, #476]	; (8000988 <display7SEG+0x360>)
 80007ac:	f001 fb1f 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2110      	movs	r1, #16
 80007b4:	4874      	ldr	r0, [pc, #464]	; (8000988 <display7SEG+0x360>)
 80007b6:	f001 fb1a 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2120      	movs	r1, #32
 80007be:	4872      	ldr	r0, [pc, #456]	; (8000988 <display7SEG+0x360>)
 80007c0:	f001 fb15 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	486f      	ldr	r0, [pc, #444]	; (8000988 <display7SEG+0x360>)
 80007ca:	f001 fb10 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 80007ce:	e0d7      	b.n	8000980 <display7SEG+0x358>
	  case 5:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2101      	movs	r1, #1
 80007d4:	486c      	ldr	r0, [pc, #432]	; (8000988 <display7SEG+0x360>)
 80007d6:	f001 fb0a 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2102      	movs	r1, #2
 80007de:	486a      	ldr	r0, [pc, #424]	; (8000988 <display7SEG+0x360>)
 80007e0:	f001 fb05 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2104      	movs	r1, #4
 80007e8:	4867      	ldr	r0, [pc, #412]	; (8000988 <display7SEG+0x360>)
 80007ea:	f001 fb00 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2108      	movs	r1, #8
 80007f2:	4865      	ldr	r0, [pc, #404]	; (8000988 <display7SEG+0x360>)
 80007f4:	f001 fafb 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 80007f8:	2201      	movs	r2, #1
 80007fa:	2110      	movs	r1, #16
 80007fc:	4862      	ldr	r0, [pc, #392]	; (8000988 <display7SEG+0x360>)
 80007fe:	f001 faf6 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	2120      	movs	r1, #32
 8000806:	4860      	ldr	r0, [pc, #384]	; (8000988 <display7SEG+0x360>)
 8000808:	f001 faf1 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800080c:	2200      	movs	r2, #0
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	485d      	ldr	r0, [pc, #372]	; (8000988 <display7SEG+0x360>)
 8000812:	f001 faec 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 8000816:	e0b3      	b.n	8000980 <display7SEG+0x358>
	  case 6:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000818:	2200      	movs	r2, #0
 800081a:	2101      	movs	r1, #1
 800081c:	485a      	ldr	r0, [pc, #360]	; (8000988 <display7SEG+0x360>)
 800081e:	f001 fae6 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2102      	movs	r1, #2
 8000826:	4858      	ldr	r0, [pc, #352]	; (8000988 <display7SEG+0x360>)
 8000828:	f001 fae1 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2104      	movs	r1, #4
 8000830:	4855      	ldr	r0, [pc, #340]	; (8000988 <display7SEG+0x360>)
 8000832:	f001 fadc 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	4853      	ldr	r0, [pc, #332]	; (8000988 <display7SEG+0x360>)
 800083c:	f001 fad7 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2110      	movs	r1, #16
 8000844:	4850      	ldr	r0, [pc, #320]	; (8000988 <display7SEG+0x360>)
 8000846:	f001 fad2 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	2120      	movs	r1, #32
 800084e:	484e      	ldr	r0, [pc, #312]	; (8000988 <display7SEG+0x360>)
 8000850:	f001 facd 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2140      	movs	r1, #64	; 0x40
 8000858:	484b      	ldr	r0, [pc, #300]	; (8000988 <display7SEG+0x360>)
 800085a:	f001 fac8 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 800085e:	e08f      	b.n	8000980 <display7SEG+0x358>
	  case 7:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2101      	movs	r1, #1
 8000864:	4848      	ldr	r0, [pc, #288]	; (8000988 <display7SEG+0x360>)
 8000866:	f001 fac2 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2102      	movs	r1, #2
 800086e:	4846      	ldr	r0, [pc, #280]	; (8000988 <display7SEG+0x360>)
 8000870:	f001 fabd 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2104      	movs	r1, #4
 8000878:	4843      	ldr	r0, [pc, #268]	; (8000988 <display7SEG+0x360>)
 800087a:	f001 fab8 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2108      	movs	r1, #8
 8000882:	4841      	ldr	r0, [pc, #260]	; (8000988 <display7SEG+0x360>)
 8000884:	f001 fab3 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2110      	movs	r1, #16
 800088c:	483e      	ldr	r0, [pc, #248]	; (8000988 <display7SEG+0x360>)
 800088e:	f001 faae 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2120      	movs	r1, #32
 8000896:	483c      	ldr	r0, [pc, #240]	; (8000988 <display7SEG+0x360>)
 8000898:	f001 faa9 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 800089c:	2201      	movs	r2, #1
 800089e:	2140      	movs	r1, #64	; 0x40
 80008a0:	4839      	ldr	r0, [pc, #228]	; (8000988 <display7SEG+0x360>)
 80008a2:	f001 faa4 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 80008a6:	e06b      	b.n	8000980 <display7SEG+0x358>
	  case 8:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2101      	movs	r1, #1
 80008ac:	4836      	ldr	r0, [pc, #216]	; (8000988 <display7SEG+0x360>)
 80008ae:	f001 fa9e 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	2102      	movs	r1, #2
 80008b6:	4834      	ldr	r0, [pc, #208]	; (8000988 <display7SEG+0x360>)
 80008b8:	f001 fa99 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2104      	movs	r1, #4
 80008c0:	4831      	ldr	r0, [pc, #196]	; (8000988 <display7SEG+0x360>)
 80008c2:	f001 fa94 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2108      	movs	r1, #8
 80008ca:	482f      	ldr	r0, [pc, #188]	; (8000988 <display7SEG+0x360>)
 80008cc:	f001 fa8f 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2110      	movs	r1, #16
 80008d4:	482c      	ldr	r0, [pc, #176]	; (8000988 <display7SEG+0x360>)
 80008d6:	f001 fa8a 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2120      	movs	r1, #32
 80008de:	482a      	ldr	r0, [pc, #168]	; (8000988 <display7SEG+0x360>)
 80008e0:	f001 fa85 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	4827      	ldr	r0, [pc, #156]	; (8000988 <display7SEG+0x360>)
 80008ea:	f001 fa80 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 80008ee:	e047      	b.n	8000980 <display7SEG+0x358>
	  case 9:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, RESET);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2101      	movs	r1, #1
 80008f4:	4824      	ldr	r0, [pc, #144]	; (8000988 <display7SEG+0x360>)
 80008f6:	f001 fa7a 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2102      	movs	r1, #2
 80008fe:	4822      	ldr	r0, [pc, #136]	; (8000988 <display7SEG+0x360>)
 8000900:	f001 fa75 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2104      	movs	r1, #4
 8000908:	481f      	ldr	r0, [pc, #124]	; (8000988 <display7SEG+0x360>)
 800090a:	f001 fa70 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	2108      	movs	r1, #8
 8000912:	481d      	ldr	r0, [pc, #116]	; (8000988 <display7SEG+0x360>)
 8000914:	f001 fa6b 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000918:	2201      	movs	r2, #1
 800091a:	2110      	movs	r1, #16
 800091c:	481a      	ldr	r0, [pc, #104]	; (8000988 <display7SEG+0x360>)
 800091e:	f001 fa66 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2120      	movs	r1, #32
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <display7SEG+0x360>)
 8000928:	f001 fa61 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, RESET);
 800092c:	2200      	movs	r2, #0
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	4815      	ldr	r0, [pc, #84]	; (8000988 <display7SEG+0x360>)
 8000932:	f001 fa5c 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 8000936:	e023      	b.n	8000980 <display7SEG+0x358>
	  default:
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, SET);
 8000938:	2201      	movs	r2, #1
 800093a:	2101      	movs	r1, #1
 800093c:	4812      	ldr	r0, [pc, #72]	; (8000988 <display7SEG+0x360>)
 800093e:	f001 fa56 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, SET);
 8000942:	2201      	movs	r2, #1
 8000944:	2102      	movs	r1, #2
 8000946:	4810      	ldr	r0, [pc, #64]	; (8000988 <display7SEG+0x360>)
 8000948:	f001 fa51 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, SET);
 800094c:	2201      	movs	r2, #1
 800094e:	2104      	movs	r1, #4
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <display7SEG+0x360>)
 8000952:	f001 fa4c 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, SET);
 8000956:	2201      	movs	r2, #1
 8000958:	2108      	movs	r1, #8
 800095a:	480b      	ldr	r0, [pc, #44]	; (8000988 <display7SEG+0x360>)
 800095c:	f001 fa47 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2110      	movs	r1, #16
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <display7SEG+0x360>)
 8000966:	f001 fa42 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2120      	movs	r1, #32
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <display7SEG+0x360>)
 8000970:	f001 fa3d 	bl	8001dee <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, SET);
 8000974:	2201      	movs	r2, #1
 8000976:	2140      	movs	r1, #64	; 0x40
 8000978:	4803      	ldr	r0, [pc, #12]	; (8000988 <display7SEG+0x360>)
 800097a:	f001 fa38 	bl	8001dee <HAL_GPIO_WritePin>
		  break;
 800097e:	bf00      	nop
  }
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40010c00 	.word	0x40010c00

0800098c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000990:	f000 ff2c 	bl	80017ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000994:	f000 f834 	bl	8000a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000998:	f000 f8c2 	bl	8000b20 <MX_GPIO_Init>
  MX_TIM2_Init();
 800099c:	f000 f86c 	bl	8000a78 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 80009a0:	4813      	ldr	r0, [pc, #76]	; (80009f0 <main+0x64>)
 80009a2:	f001 fe8b 	bl	80026bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(0, 2000);
 80009a6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80009aa:	2000      	movs	r0, #0
 80009ac:	f000 f93c 	bl	8000c28 <setTimer>
  setTimer(1, 1000);
 80009b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b4:	2001      	movs	r0, #1
 80009b6:	f000 f937 	bl	8000c28 <setTimer>
  setTimer(2, 1000);
 80009ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009be:	2002      	movs	r0, #2
 80009c0:	f000 f932 	bl	8000c28 <setTimer>
  red_duration = 5;
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <main+0x68>)
 80009c6:	2205      	movs	r2, #5
 80009c8:	701a      	strb	r2, [r3, #0]
  amber_duration = 2;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <main+0x6c>)
 80009cc:	2202      	movs	r2, #2
 80009ce:	701a      	strb	r2, [r3, #0]
  green_duration = 3;
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <main+0x70>)
 80009d2:	2203      	movs	r2, #3
 80009d4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  traffic_light_fsm_sel();
 80009d6:	f000 fc07 	bl	80011e8 <traffic_light_fsm_sel>
	  traffic_light_fsm_auto();
 80009da:	f000 fa1d 	bl	8000e18 <traffic_light_fsm_auto>
	  traffic_light_fsm_man();
 80009de:	f000 fb21 	bl	8001024 <traffic_light_fsm_man>
	  traffic_light_fsm_set();
 80009e2:	f000 fdfd 	bl	80015e0 <traffic_light_fsm_set>
	  run7SEG();
 80009e6:	f7ff fd29 	bl	800043c <run7SEG>
	  counterRun();
 80009ea:	f7ff fc8d 	bl	8000308 <counterRun>
	  traffic_light_fsm_sel();
 80009ee:	e7f2      	b.n	80009d6 <main+0x4a>
 80009f0:	2000007c 	.word	0x2000007c
 80009f4:	20000072 	.word	0x20000072
 80009f8:	2000006d 	.word	0x2000006d
 80009fc:	2000006c 	.word	0x2000006c

08000a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b090      	sub	sp, #64	; 0x40
 8000a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	2228      	movs	r2, #40	; 0x28
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fa04 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a14:	1d3b      	adds	r3, r7, #4
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a32:	f107 0318 	add.w	r3, r7, #24
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fa0a 	bl	8001e50 <HAL_RCC_OscConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000a42:	f000 f8db 	bl	8000bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a46:	230f      	movs	r3, #15
 8000a48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f001 fc76 	bl	8002350 <HAL_RCC_ClockConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a6a:	f000 f8c7 	bl	8000bfc <Error_Handler>
  }
}
 8000a6e:	bf00      	nop
 8000a70:	3740      	adds	r7, #64	; 0x40
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b086      	sub	sp, #24
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a94:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a9c:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000a9e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000aa2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000aac:	2209      	movs	r2, #9
 8000aae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000abc:	4817      	ldr	r0, [pc, #92]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000abe:	f001 fdad 	bl	800261c <HAL_TIM_Base_Init>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ac8:	f000 f898 	bl	8000bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ad2:	f107 0308 	add.w	r3, r7, #8
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000ada:	f001 ff2b 	bl	8002934 <HAL_TIM_ConfigClockSource>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ae4:	f000 f88a 	bl	8000bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af0:	463b      	mov	r3, r7
 8000af2:	4619      	mov	r1, r3
 8000af4:	4809      	ldr	r0, [pc, #36]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000af6:	f002 f903 	bl	8002d00 <HAL_TIMEx_MasterConfigSynchronization>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b00:	f000 f87c 	bl	8000bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  timerInit(htim2.Init.Prescaler, htim2.Init.Period);
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <MX_TIM2_Init+0xa4>)
 8000b0a:	68d2      	ldr	r2, [r2, #12]
 8000b0c:	4611      	mov	r1, r2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f000 f8a2 	bl	8000c58 <timerInit>
  /* USER CODE END TIM2_Init 2 */

}
 8000b14:	bf00      	nop
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	2000007c 	.word	0x2000007c

08000b20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b26:	f107 0308 	add.w	r3, r7, #8
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a27      	ldr	r2, [pc, #156]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b1f      	ldr	r3, [pc, #124]	; (8000bd8 <MX_GPIO_Init+0xb8>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b64:	2200      	movs	r2, #0
 8000b66:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8000b6a:	481c      	ldr	r0, [pc, #112]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b6c:	f001 f93f 	bl	8001dee <HAL_GPIO_WritePin>
                          |LED_RED0_Pin|LED_AMBER0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
                          |LED_AMBER1_Pin|LED_GREEN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000b70:	2200      	movs	r2, #0
 8000b72:	217f      	movs	r1, #127	; 0x7f
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000b76:	f001 f93a 	bl	8001dee <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED0_Pin LED_AMBER0_Pin LED_GREEN0_Pin LED_RED1_Pin
                           LED_AMBER1_Pin LED_GREEN1_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b7a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8000b7e:	60bb      	str	r3, [r7, #8]
                          |LED_RED0_Pin|LED_AMBER0_Pin|LED_GREEN0_Pin|LED_RED1_Pin
                          |LED_AMBER1_Pin|LED_GREEN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8c:	f107 0308 	add.w	r3, r7, #8
 8000b90:	4619      	mov	r1, r3
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000b94:	f000 ff9a 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000b98:	237f      	movs	r3, #127	; 0x7f
 8000b9a:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0308 	add.w	r3, r7, #8
 8000bac:	4619      	mov	r1, r3
 8000bae:	480c      	ldr	r0, [pc, #48]	; (8000be0 <MX_GPIO_Init+0xc0>)
 8000bb0:	f000 ff8c 	bl	8001acc <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_MODE_Pin BT_SET_Pin BT_OK_Pin */
  GPIO_InitStruct.Pin = BT_MODE_Pin|BT_SET_Pin|BT_OK_Pin;
 8000bb4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000bb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0308 	add.w	r3, r7, #8
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4804      	ldr	r0, [pc, #16]	; (8000bdc <MX_GPIO_Init+0xbc>)
 8000bca:	f000 ff7f 	bl	8001acc <HAL_GPIO_Init>

}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010800 	.word	0x40010800
 8000be0:	40010c00 	.word	0x40010c00

08000be4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	timerRun();
 8000bec:	f000 f852 	bl	8000c94 <timerRun>
	buttonRun();
 8000bf0:	f7ff faac 	bl	800014c <buttonRun>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c00:	b672      	cpsid	i
}
 8000c02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <Error_Handler+0x8>
	...

08000c08 <isFlagTimer>:

static uint32_t timer_counters[MAX_TIMERS] ={0,0};
static uint8_t timer_flags[] = {0,0};


uint8_t isFlagTimer(uint8_t index){
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	return timer_flags[index];
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	4a03      	ldr	r2, [pc, #12]	; (8000c24 <isFlagTimer+0x1c>)
 8000c16:	5cd3      	ldrb	r3, [r2, r3]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	20000068 	.word	0x20000068

08000c28 <setTimer>:
void setTimer(uint8_t index, uint32_t duration){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
	timer_flags[index] = 0;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <setTimer+0x28>)
 8000c38:	2100      	movs	r1, #0
 8000c3a:	54d1      	strb	r1, [r2, r3]
	timer_counters[index] = duration;
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	4905      	ldr	r1, [pc, #20]	; (8000c54 <setTimer+0x2c>)
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000068 	.word	0x20000068
 8000c54:	20000060 	.word	0x20000060

08000c58 <timerInit>:
void timerInit(uint32_t prescaler, uint32_t period){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
	uint32_t frequency = HAL_RCC_GetHCLKFreq();
 8000c62:	f001 fcb3 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8000c66:	60f8      	str	r0, [r7, #12]
	interrupt_duration  = (prescaler+1)*(period+1)*1000/frequency;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	3201      	adds	r2, #1
 8000c70:	fb02 f303 	mul.w	r3, r2, r3
 8000c74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c78:	fb02 f203 	mul.w	r2, r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c82:	4a03      	ldr	r2, [pc, #12]	; (8000c90 <timerInit+0x38>)
 8000c84:	6013      	str	r3, [r2, #0]
//	interrupt_duration = 10;
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000014 	.word	0x20000014

08000c94 <timerRun>:
void timerRun(){
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	71fb      	strb	r3, [r7, #7]
 8000c9e:	e01d      	b.n	8000cdc <timerRun+0x48>
		if(timer_counters[i] > 0){
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <timerRun+0x5c>)
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d014      	beq.n	8000cd6 <timerRun+0x42>
			timer_counters[i] -= interrupt_duration;
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <timerRun+0x5c>)
 8000cb0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <timerRun+0x60>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	1a8a      	subs	r2, r1, r2
 8000cbc:	490c      	ldr	r1, [pc, #48]	; (8000cf0 <timerRun+0x5c>)
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counters[i] <=0){
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <timerRun+0x5c>)
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d103      	bne.n	8000cd6 <timerRun+0x42>
				timer_flags[i] = 1;
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	4a09      	ldr	r2, [pc, #36]	; (8000cf8 <timerRun+0x64>)
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0 ; i < MAX_TIMERS; i++ ){
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d9de      	bls.n	8000ca0 <timerRun+0xc>
			}
		}
	}

}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	370c      	adds	r7, #12
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bc80      	pop	{r7}
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000060 	.word	0x20000060
 8000cf4:	20000014 	.word	0x20000014
 8000cf8:	20000068 	.word	0x20000068

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d04:	699b      	ldr	r3, [r3, #24]
 8000d06:	4a14      	ldr	r2, [pc, #80]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6193      	str	r3, [r2, #24]
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d10:	699b      	ldr	r3, [r3, #24]
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d1c:	69db      	ldr	r3, [r3, #28]
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d24:	61d3      	str	r3, [r2, #28]
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <HAL_MspInit+0x5c>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d32:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <HAL_MspInit+0x60>)
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <HAL_MspInit+0x60>)
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	40010000 	.word	0x40010000

08000d60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d70:	d113      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d72:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d74:	69db      	ldr	r3, [r3, #28]
 8000d76:	4a0b      	ldr	r2, [pc, #44]	; (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	61d3      	str	r3, [r2, #28]
 8000d7e:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_TIM_Base_MspInit+0x44>)
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	201c      	movs	r0, #28
 8000d90:	f000 fe65 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d94:	201c      	movs	r0, #28
 8000d96:	f000 fe7e 	bl	8001a96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40021000 	.word	0x40021000

08000da8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <NMI_Handler+0x4>

08000dae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <HardFault_Handler+0x4>

08000db4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <MemManage_Handler+0x4>

08000dba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr

08000dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bc80      	pop	{r7}
 8000ddc:	4770      	bx	lr

08000dde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bc80      	pop	{r7}
 8000de8:	4770      	bx	lr

08000dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dee:	f000 fd43 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000dfc:	4802      	ldr	r0, [pc, #8]	; (8000e08 <TIM2_IRQHandler+0x10>)
 8000dfe:	f001 fca9 	bl	8002754 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	2000007c 	.word	0x2000007c

08000e0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr

08000e18 <traffic_light_fsm_auto>:
 */


#include "traffic_light_fsm_auto.h"

void traffic_light_fsm_auto(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	switch (status) {
 8000e1c:	4b7b      	ldr	r3, [pc, #492]	; (800100c <traffic_light_fsm_auto+0x1f4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	3b06      	subs	r3, #6
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	f200 80e7 	bhi.w	8000ff6 <traffic_light_fsm_auto+0x1de>
 8000e28:	a201      	add	r2, pc, #4	; (adr r2, 8000e30 <traffic_light_fsm_auto+0x18>)
 8000e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2e:	bf00      	nop
 8000e30:	08000e41 	.word	0x08000e41
 8000e34:	08000eb5 	.word	0x08000eb5
 8000e38:	08000f27 	.word	0x08000f27
 8000e3c:	08000f85 	.word	0x08000f85
		case AUTO_RED_GREEN:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 8000e40:	2200      	movs	r2, #0
 8000e42:	2120      	movs	r1, #32
 8000e44:	4872      	ldr	r0, [pc, #456]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000e46:	f000 ffd2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2140      	movs	r1, #64	; 0x40
 8000e4e:	4870      	ldr	r0, [pc, #448]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000e50:	f000 ffcd 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8000e54:	2201      	movs	r2, #1
 8000e56:	2180      	movs	r1, #128	; 0x80
 8000e58:	486d      	ldr	r0, [pc, #436]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000e5a:	f000 ffc8 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e64:	486a      	ldr	r0, [pc, #424]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000e66:	f000 ffc2 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4867      	ldr	r0, [pc, #412]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000e72:	f000 ffbc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8000e76:	2200      	movs	r2, #0
 8000e78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7c:	4864      	ldr	r0, [pc, #400]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000e7e:	f000 ffb6 	bl	8001dee <HAL_GPIO_WritePin>
			if(counters[1] == 0){
 8000e82:	4b64      	ldr	r3, [pc, #400]	; (8001014 <traffic_light_fsm_auto+0x1fc>)
 8000e84:	785b      	ldrb	r3, [r3, #1]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d109      	bne.n	8000e9e <traffic_light_fsm_auto+0x86>
				status = AUTO_RED_AMBER;
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <traffic_light_fsm_auto+0x1f4>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	701a      	strb	r2, [r3, #0]
				setCounter(1, amber_duration);
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <traffic_light_fsm_auto+0x200>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	f7ff fa16 	bl	80002c8 <setCounter>
			}else if(isButtonPressed(0)){
				status = INIT;
			}
			break;
 8000e9c:	e0ad      	b.n	8000ffa <traffic_light_fsm_auto+0x1e2>
			}else if(isButtonPressed(0)){
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f7ff f9e0 	bl	8000264 <isButtonPressed>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80a7 	beq.w	8000ffa <traffic_light_fsm_auto+0x1e2>
				status = INIT;
 8000eac:	4b57      	ldr	r3, [pc, #348]	; (800100c <traffic_light_fsm_auto+0x1f4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
			break;
 8000eb2:	e0a2      	b.n	8000ffa <traffic_light_fsm_auto+0x1e2>
		case AUTO_RED_AMBER:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2120      	movs	r1, #32
 8000eb8:	4855      	ldr	r0, [pc, #340]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000eba:	f000 ff98 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2140      	movs	r1, #64	; 0x40
 8000ec2:	4853      	ldr	r0, [pc, #332]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000ec4:	f000 ff93 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	4850      	ldr	r0, [pc, #320]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000ece:	f000 ff8e 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed8:	484d      	ldr	r0, [pc, #308]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000eda:	f000 ff88 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ee4:	484a      	ldr	r0, [pc, #296]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000ee6:	f000 ff82 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ef0:	4847      	ldr	r0, [pc, #284]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000ef2:	f000 ff7c 	bl	8001dee <HAL_GPIO_WritePin>
			if(counters[1]==0 || counters[0]==0){
 8000ef6:	4b47      	ldr	r3, [pc, #284]	; (8001014 <traffic_light_fsm_auto+0x1fc>)
 8000ef8:	785b      	ldrb	r3, [r3, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <traffic_light_fsm_auto+0xee>
 8000efe:	4b45      	ldr	r3, [pc, #276]	; (8001014 <traffic_light_fsm_auto+0x1fc>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d17b      	bne.n	8000ffe <traffic_light_fsm_auto+0x1e6>
				status = AUTO_GREEN_RED;
 8000f06:	4b41      	ldr	r3, [pc, #260]	; (800100c <traffic_light_fsm_auto+0x1f4>)
 8000f08:	2208      	movs	r2, #8
 8000f0a:	701a      	strb	r2, [r3, #0]
				setCounter(0, green_duration);
 8000f0c:	4b43      	ldr	r3, [pc, #268]	; (800101c <traffic_light_fsm_auto+0x204>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	2000      	movs	r0, #0
 8000f14:	f7ff f9d8 	bl	80002c8 <setCounter>
				setCounter(1, red_duration);
 8000f18:	4b41      	ldr	r3, [pc, #260]	; (8001020 <traffic_light_fsm_auto+0x208>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff f9d2 	bl	80002c8 <setCounter>
			}
			break;
 8000f24:	e06b      	b.n	8000ffe <traffic_light_fsm_auto+0x1e6>
		case AUTO_GREEN_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2120      	movs	r1, #32
 8000f2a:	4839      	ldr	r0, [pc, #228]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f2c:	f000 ff5f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2140      	movs	r1, #64	; 0x40
 8000f34:	4836      	ldr	r0, [pc, #216]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f36:	f000 ff5a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	4834      	ldr	r0, [pc, #208]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f40:	f000 ff55 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000f44:	2200      	movs	r2, #0
 8000f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4a:	4831      	ldr	r0, [pc, #196]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f4c:	f000 ff4f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f56:	482e      	ldr	r0, [pc, #184]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f58:	f000 ff49 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f62:	482b      	ldr	r0, [pc, #172]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f64:	f000 ff43 	bl	8001dee <HAL_GPIO_WritePin>
			if(counters[0]==0){
 8000f68:	4b2a      	ldr	r3, [pc, #168]	; (8001014 <traffic_light_fsm_auto+0x1fc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d148      	bne.n	8001002 <traffic_light_fsm_auto+0x1ea>
				status = AUTO_AMBER_RED;
 8000f70:	4b26      	ldr	r3, [pc, #152]	; (800100c <traffic_light_fsm_auto+0x1f4>)
 8000f72:	2209      	movs	r2, #9
 8000f74:	701a      	strb	r2, [r3, #0]
				setCounter(0, amber_duration);
 8000f76:	4b28      	ldr	r3, [pc, #160]	; (8001018 <traffic_light_fsm_auto+0x200>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f7ff f9a3 	bl	80002c8 <setCounter>
			}
			break;
 8000f82:	e03e      	b.n	8001002 <traffic_light_fsm_auto+0x1ea>
		case AUTO_AMBER_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2120      	movs	r1, #32
 8000f88:	4821      	ldr	r0, [pc, #132]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f8a:	f000 ff30 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	481f      	ldr	r0, [pc, #124]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f94:	f000 ff2b 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	481c      	ldr	r0, [pc, #112]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000f9e:	f000 ff26 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fa8:	4819      	ldr	r0, [pc, #100]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000faa:	f000 ff20 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb4:	4816      	ldr	r0, [pc, #88]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000fb6:	f000 ff1a 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <traffic_light_fsm_auto+0x1f8>)
 8000fc2:	f000 ff14 	bl	8001dee <HAL_GPIO_WritePin>
			if(counters[0]==0 || counters[1] == 0){
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <traffic_light_fsm_auto+0x1fc>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <traffic_light_fsm_auto+0x1be>
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <traffic_light_fsm_auto+0x1fc>)
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d117      	bne.n	8001006 <traffic_light_fsm_auto+0x1ee>
				status = AUTO_RED_GREEN;
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <traffic_light_fsm_auto+0x1f4>)
 8000fd8:	2206      	movs	r2, #6
 8000fda:	701a      	strb	r2, [r3, #0]
				setCounter(0, red_duration);
 8000fdc:	4b10      	ldr	r3, [pc, #64]	; (8001020 <traffic_light_fsm_auto+0x208>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f7ff f970 	bl	80002c8 <setCounter>
				setCounter(1, green_duration);
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <traffic_light_fsm_auto+0x204>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff f96a 	bl	80002c8 <setCounter>
			}
			break;
 8000ff4:	e007      	b.n	8001006 <traffic_light_fsm_auto+0x1ee>
		default:
			break;
 8000ff6:	bf00      	nop
 8000ff8:	e006      	b.n	8001008 <traffic_light_fsm_auto+0x1f0>
			break;
 8000ffa:	bf00      	nop
 8000ffc:	e004      	b.n	8001008 <traffic_light_fsm_auto+0x1f0>
			break;
 8000ffe:	bf00      	nop
 8001000:	e002      	b.n	8001008 <traffic_light_fsm_auto+0x1f0>
			break;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <traffic_light_fsm_auto+0x1f0>
			break;
 8001006:	bf00      	nop
	}
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000078 	.word	0x20000078
 8001010:	40010800 	.word	0x40010800
 8001014:	20000070 	.word	0x20000070
 8001018:	2000006d 	.word	0x2000006d
 800101c:	2000006c 	.word	0x2000006c
 8001020:	20000072 	.word	0x20000072

08001024 <traffic_light_fsm_man>:
 *      Author: hachi
 */

#include "traffic_light_fsm_man.h"

void traffic_light_fsm_man(){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	switch (status) {
 8001028:	4b6d      	ldr	r3, [pc, #436]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	3b0b      	subs	r3, #11
 800102e:	2b03      	cmp	r3, #3
 8001030:	f200 80ca 	bhi.w	80011c8 <traffic_light_fsm_man+0x1a4>
 8001034:	a201      	add	r2, pc, #4	; (adr r2, 800103c <traffic_light_fsm_man+0x18>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	0800104d 	.word	0x0800104d
 8001040:	080010d7 	.word	0x080010d7
 8001044:	08001119 	.word	0x08001119
 8001048:	0800118d 	.word	0x0800118d
		break;
		case MAN_RED_GREEN:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	2120      	movs	r1, #32
 8001050:	4864      	ldr	r0, [pc, #400]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001052:	f000 fecc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001056:	2201      	movs	r2, #1
 8001058:	2140      	movs	r1, #64	; 0x40
 800105a:	4862      	ldr	r0, [pc, #392]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800105c:	f000 fec7 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8001060:	2201      	movs	r2, #1
 8001062:	2180      	movs	r1, #128	; 0x80
 8001064:	485f      	ldr	r0, [pc, #380]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001066:	f000 fec2 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800106a:	2201      	movs	r2, #1
 800106c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001070:	485c      	ldr	r0, [pc, #368]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001072:	f000 febc 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8001076:	2201      	movs	r2, #1
 8001078:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107c:	4859      	ldr	r0, [pc, #356]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800107e:	f000 feb6 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001082:	2200      	movs	r2, #0
 8001084:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001088:	4856      	ldr	r0, [pc, #344]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800108a:	f000 feb0 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fdba 	bl	8000c08 <isFlagTimer>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <traffic_light_fsm_man+0x7e>
				status = INIT;
 800109a:	4b51      	ldr	r3, [pc, #324]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				status = SEL_MAN;
			}else if(isButtonPressed(1)){
				status = MAN_RED_AMBER;
				setTimer(0, 2000);
			}
			break;
 80010a0:	e094      	b.n	80011cc <traffic_light_fsm_man+0x1a8>
			}else if(isButtonPressed(0)){
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff f8de 	bl	8000264 <isButtonPressed>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <traffic_light_fsm_man+0x92>
				status = SEL_MAN;
 80010ae:	4b4c      	ldr	r3, [pc, #304]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 80010b0:	2202      	movs	r2, #2
 80010b2:	701a      	strb	r2, [r3, #0]
			break;
 80010b4:	e08a      	b.n	80011cc <traffic_light_fsm_man+0x1a8>
			}else if(isButtonPressed(1)){
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff f8d4 	bl	8000264 <isButtonPressed>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f000 8084 	beq.w	80011cc <traffic_light_fsm_man+0x1a8>
				status = MAN_RED_AMBER;
 80010c4:	4b46      	ldr	r3, [pc, #280]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	701a      	strb	r2, [r3, #0]
				setTimer(0, 2000);
 80010ca:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff fdaa 	bl	8000c28 <setTimer>
			break;
 80010d4:	e07a      	b.n	80011cc <traffic_light_fsm_man+0x1a8>
		case MAN_RED_AMBER:
			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010dc:	4841      	ldr	r0, [pc, #260]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 80010de:	f000 fe86 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	483e      	ldr	r0, [pc, #248]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 80010ea:	f000 fe80 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010f4:	483b      	ldr	r0, [pc, #236]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 80010f6:	f000 fe7a 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff fd84 	bl	8000c08 <isFlagTimer>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d064      	beq.n	80011d0 <traffic_light_fsm_man+0x1ac>
				status = MAN_GREEN_RED;
 8001106:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 8001108:	220d      	movs	r2, #13
 800110a:	701a      	strb	r2, [r3, #0]
				setTimer(0, 10000);
 800110c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001110:	2000      	movs	r0, #0
 8001112:	f7ff fd89 	bl	8000c28 <setTimer>
			}
			break;
 8001116:	e05b      	b.n	80011d0 <traffic_light_fsm_man+0x1ac>
		case MAN_GREEN_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2120      	movs	r1, #32
 800111c:	4831      	ldr	r0, [pc, #196]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800111e:	f000 fe66 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	482f      	ldr	r0, [pc, #188]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001128:	f000 fe61 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2180      	movs	r1, #128	; 0x80
 8001130:	482c      	ldr	r0, [pc, #176]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001132:	f000 fe5c 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 7180 	mov.w	r1, #256	; 0x100
 800113c:	4829      	ldr	r0, [pc, #164]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800113e:	f000 fe56 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8001142:	2201      	movs	r2, #1
 8001144:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001148:	4826      	ldr	r0, [pc, #152]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800114a:	f000 fe50 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800114e:	2201      	movs	r2, #1
 8001150:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001154:	4823      	ldr	r0, [pc, #140]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001156:	f000 fe4a 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff fd54 	bl	8000c08 <isFlagTimer>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <traffic_light_fsm_man+0x14a>
				status = INIT;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 8001168:	2200      	movs	r2, #0
 800116a:	701a      	strb	r2, [r3, #0]
			}else if(isButtonPressed(1)){
				status = MAN_AMBER_RED;
				setTimer(0, 2000);
			}
			break;
 800116c:	e032      	b.n	80011d4 <traffic_light_fsm_man+0x1b0>
			}else if(isButtonPressed(1)){
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff f878 	bl	8000264 <isButtonPressed>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d02c      	beq.n	80011d4 <traffic_light_fsm_man+0x1b0>
				status = MAN_AMBER_RED;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 800117c:	220e      	movs	r2, #14
 800117e:	701a      	strb	r2, [r3, #0]
				setTimer(0, 2000);
 8001180:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001184:	2000      	movs	r0, #0
 8001186:	f7ff fd4f 	bl	8000c28 <setTimer>
			break;
 800118a:	e023      	b.n	80011d4 <traffic_light_fsm_man+0x1b0>
		case MAN_AMBER_RED:
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 800118c:	2201      	movs	r2, #1
 800118e:	2120      	movs	r1, #32
 8001190:	4814      	ldr	r0, [pc, #80]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 8001192:	f000 fe2c 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, RESET);
 8001196:	2200      	movs	r2, #0
 8001198:	2140      	movs	r1, #64	; 0x40
 800119a:	4812      	ldr	r0, [pc, #72]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 800119c:	f000 fe27 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2180      	movs	r1, #128	; 0x80
 80011a4:	480f      	ldr	r0, [pc, #60]	; (80011e4 <traffic_light_fsm_man+0x1c0>)
 80011a6:	f000 fe22 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(0)){
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff fd2c 	bl	8000c08 <isFlagTimer>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d010      	beq.n	80011d8 <traffic_light_fsm_man+0x1b4>
				status = MAN_RED_GREEN;
 80011b6:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <traffic_light_fsm_man+0x1bc>)
 80011b8:	220b      	movs	r2, #11
 80011ba:	701a      	strb	r2, [r3, #0]
				setTimer(0, 10000);
 80011bc:	f242 7110 	movw	r1, #10000	; 0x2710
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fd31 	bl	8000c28 <setTimer>
			}
			break;
 80011c6:	e007      	b.n	80011d8 <traffic_light_fsm_man+0x1b4>
		default:
			break;
 80011c8:	bf00      	nop
 80011ca:	e006      	b.n	80011da <traffic_light_fsm_man+0x1b6>
			break;
 80011cc:	bf00      	nop
 80011ce:	e004      	b.n	80011da <traffic_light_fsm_man+0x1b6>
			break;
 80011d0:	bf00      	nop
 80011d2:	e002      	b.n	80011da <traffic_light_fsm_man+0x1b6>
			break;
 80011d4:	bf00      	nop
 80011d6:	e000      	b.n	80011da <traffic_light_fsm_man+0x1b6>
			break;
 80011d8:	bf00      	nop
	}
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000078 	.word	0x20000078
 80011e4:	40010800 	.word	0x40010800

080011e8 <traffic_light_fsm_sel>:
 */


#include "traffic_light_fsm_sel.h"

void traffic_light_fsm_sel(){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	switch (status) {
 80011ec:	4bbf      	ldr	r3, [pc, #764]	; (80014ec <traffic_light_fsm_sel+0x304>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	f200 81e1 	bhi.w	80015b8 <traffic_light_fsm_sel+0x3d0>
 80011f6:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <traffic_light_fsm_sel+0x14>)
 80011f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fc:	08001215 	.word	0x08001215
 8001200:	08001237 	.word	0x08001237
 8001204:	080012d7 	.word	0x080012d7
 8001208:	08001379 	.word	0x08001379
 800120c:	08001433 	.word	0x08001433
 8001210:	08001501 	.word	0x08001501
		case INIT:
			if(1){
				status = SEL_AUTO;
 8001214:	4bb5      	ldr	r3, [pc, #724]	; (80014ec <traffic_light_fsm_sel+0x304>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
				setCounter(0, 0);
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff f853 	bl	80002c8 <setCounter>
				setCounter(1, 0);
 8001222:	2100      	movs	r1, #0
 8001224:	2001      	movs	r0, #1
 8001226:	f7ff f84f 	bl	80002c8 <setCounter>
				setTimer(0, 5000);
 800122a:	f241 3188 	movw	r1, #5000	; 0x1388
 800122e:	2000      	movs	r0, #0
 8001230:	f7ff fcfa 	bl	8000c28 <setTimer>
			}
			break;
 8001234:	e1cb      	b.n	80015ce <traffic_light_fsm_sel+0x3e6>
		case SEL_AUTO:
			display7SEG(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f7ff f9f6 	bl	8000628 <display7SEG>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2120      	movs	r1, #32
 8001240:	48ab      	ldr	r0, [pc, #684]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001242:	f000 fdd4 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	2140      	movs	r1, #64	; 0x40
 800124a:	48a9      	ldr	r0, [pc, #676]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800124c:	f000 fdcf 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	48a6      	ldr	r0, [pc, #664]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001256:	f000 fdca 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001260:	48a3      	ldr	r0, [pc, #652]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001262:	f000 fdc4 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 7100 	mov.w	r1, #512	; 0x200
 800126c:	48a0      	ldr	r0, [pc, #640]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800126e:	f000 fdbe 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001278:	489d      	ldr	r0, [pc, #628]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800127a:	f000 fdb8 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(0) || isButtonPressed(2)){
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fcc2 	bl	8000c08 <isFlagTimer>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <traffic_light_fsm_sel+0xae>
 800128a:	2002      	movs	r0, #2
 800128c:	f7fe ffea 	bl	8000264 <isButtonPressed>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00f      	beq.n	80012b6 <traffic_light_fsm_sel+0xce>
				status = AUTO_RED_GREEN;
 8001296:	4b95      	ldr	r3, [pc, #596]	; (80014ec <traffic_light_fsm_sel+0x304>)
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]
				setCounter(0, red_duration);
 800129c:	4b95      	ldr	r3, [pc, #596]	; (80014f4 <traffic_light_fsm_sel+0x30c>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff f810 	bl	80002c8 <setCounter>
				setCounter(1, green_duration);
 80012a8:	4b93      	ldr	r3, [pc, #588]	; (80014f8 <traffic_light_fsm_sel+0x310>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	2001      	movs	r0, #1
 80012b0:	f7ff f80a 	bl	80002c8 <setCounter>
			}else if(isButtonPressed(0)){
				status = SEL_MAN;
				setTimer(0, 5000);
			}
			break;
 80012b4:	e182      	b.n	80015bc <traffic_light_fsm_sel+0x3d4>
			}else if(isButtonPressed(0)){
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7fe ffd4 	bl	8000264 <isButtonPressed>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 817c 	beq.w	80015bc <traffic_light_fsm_sel+0x3d4>
				status = SEL_MAN;
 80012c4:	4b89      	ldr	r3, [pc, #548]	; (80014ec <traffic_light_fsm_sel+0x304>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 80012ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80012ce:	2000      	movs	r0, #0
 80012d0:	f7ff fcaa 	bl	8000c28 <setTimer>
			break;
 80012d4:	e172      	b.n	80015bc <traffic_light_fsm_sel+0x3d4>
		case SEL_MAN:
			display7SEG(2);
 80012d6:	2002      	movs	r0, #2
 80012d8:	f7ff f9a6 	bl	8000628 <display7SEG>
			if(isFlagTimer(2)){
 80012dc:	2002      	movs	r0, #2
 80012de:	f7ff fc93 	bl	8000c08 <isFlagTimer>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d01f      	beq.n	8001328 <traffic_light_fsm_sel+0x140>
				setTimer(2, 500);
 80012e8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012ec:	2002      	movs	r0, #2
 80012ee:	f7ff fc9b 	bl	8000c28 <setTimer>
				HAL_GPIO_TogglePin(LED_RED0_GPIO_Port, LED_RED0_Pin);
 80012f2:	2120      	movs	r1, #32
 80012f4:	487e      	ldr	r0, [pc, #504]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 80012f6:	f000 fd92 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin);
 80012fa:	2140      	movs	r1, #64	; 0x40
 80012fc:	487c      	ldr	r0, [pc, #496]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 80012fe:	f000 fd8e 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin);
 8001302:	2180      	movs	r1, #128	; 0x80
 8001304:	487a      	ldr	r0, [pc, #488]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001306:	f000 fd8a 	bl	8001e1e <HAL_GPIO_TogglePin>

				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	4878      	ldr	r0, [pc, #480]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001310:	f000 fd85 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin);
 8001314:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001318:	4875      	ldr	r0, [pc, #468]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800131a:	f000 fd80 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 800131e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001322:	4873      	ldr	r0, [pc, #460]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001324:	f000 fd7b 	bl	8001e1e <HAL_GPIO_TogglePin>
			}

			if(isFlagTimer(0)){
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff fc6d 	bl	8000c08 <isFlagTimer>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <traffic_light_fsm_sel+0x152>
				status = INIT;
 8001334:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <traffic_light_fsm_sel+0x304>)
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 800133a:	2002      	movs	r0, #2
 800133c:	f7fe ff92 	bl	8000264 <isButtonPressed>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d008      	beq.n	8001358 <traffic_light_fsm_sel+0x170>
				status = MAN_RED_GREEN;
 8001346:	4b69      	ldr	r3, [pc, #420]	; (80014ec <traffic_light_fsm_sel+0x304>)
 8001348:	220b      	movs	r2, #11
 800134a:	701a      	strb	r2, [r3, #0]
				setTimer(0, 10000);
 800134c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001350:	2000      	movs	r0, #0
 8001352:	f7ff fc69 	bl	8000c28 <setTimer>
			}else if(isButtonPressed(0)){
				status = SEL_RED;
				setTimer(0, 5000);
			}
			break;
 8001356:	e133      	b.n	80015c0 <traffic_light_fsm_sel+0x3d8>
			}else if(isButtonPressed(0)){
 8001358:	2000      	movs	r0, #0
 800135a:	f7fe ff83 	bl	8000264 <isButtonPressed>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 812d 	beq.w	80015c0 <traffic_light_fsm_sel+0x3d8>
				status = SEL_RED;
 8001366:	4b61      	ldr	r3, [pc, #388]	; (80014ec <traffic_light_fsm_sel+0x304>)
 8001368:	2203      	movs	r2, #3
 800136a:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 800136c:	f241 3188 	movw	r1, #5000	; 0x1388
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff fc59 	bl	8000c28 <setTimer>
			break;
 8001376:	e123      	b.n	80015c0 <traffic_light_fsm_sel+0x3d8>
		case SEL_RED:
			display7SEG(3);
 8001378:	2003      	movs	r0, #3
 800137a:	f7ff f955 	bl	8000628 <display7SEG>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 800137e:	2201      	movs	r2, #1
 8001380:	2140      	movs	r1, #64	; 0x40
 8001382:	485b      	ldr	r0, [pc, #364]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001384:	f000 fd33 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8001388:	2201      	movs	r2, #1
 800138a:	2180      	movs	r1, #128	; 0x80
 800138c:	4858      	ldr	r0, [pc, #352]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800138e:	f000 fd2e 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8001392:	2201      	movs	r2, #1
 8001394:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001398:	4855      	ldr	r0, [pc, #340]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800139a:	f000 fd28 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013a4:	4852      	ldr	r0, [pc, #328]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 80013a6:	f000 fd22 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(2)){
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff fc2c 	bl	8000c08 <isFlagTimer>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d00d      	beq.n	80013d2 <traffic_light_fsm_sel+0x1ea>
				setTimer(2, 500);
 80013b6:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80013ba:	2002      	movs	r0, #2
 80013bc:	f7ff fc34 	bl	8000c28 <setTimer>
				HAL_GPIO_TogglePin(LED_RED0_GPIO_Port, LED_RED0_Pin);
 80013c0:	2120      	movs	r1, #32
 80013c2:	484b      	ldr	r0, [pc, #300]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 80013c4:	f000 fd2b 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 80013c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013cc:	4848      	ldr	r0, [pc, #288]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 80013ce:	f000 fd26 	bl	8001e1e <HAL_GPIO_TogglePin>
			}
			if(isFlagTimer(0)){
 80013d2:	2000      	movs	r0, #0
 80013d4:	f7ff fc18 	bl	8000c08 <isFlagTimer>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <traffic_light_fsm_sel+0x1fc>
				status = INIT;
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <traffic_light_fsm_sel+0x304>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7fe ff3d 	bl	8000264 <isButtonPressed>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d010      	beq.n	8001412 <traffic_light_fsm_sel+0x22a>
				status = SET_RED;
 80013f0:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <traffic_light_fsm_sel+0x304>)
 80013f2:	2214      	movs	r2, #20
 80013f4:	701a      	strb	r2, [r3, #0]
				setTimer(0, 20000);
 80013f6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80013fa:	2000      	movs	r0, #0
 80013fc:	f7ff fc14 	bl	8000c28 <setTimer>
				updateBuffer7SEG(red_duration, red_duration);
 8001400:	4b3c      	ldr	r3, [pc, #240]	; (80014f4 <traffic_light_fsm_sel+0x30c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	4a3b      	ldr	r2, [pc, #236]	; (80014f4 <traffic_light_fsm_sel+0x30c>)
 8001406:	7812      	ldrb	r2, [r2, #0]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff f836 	bl	800047c <updateBuffer7SEG>
			}else if(isButtonPressed(0)){
				status = SEL_AMBER;
				setTimer(0, 5000);
			}
			break;
 8001410:	e0d8      	b.n	80015c4 <traffic_light_fsm_sel+0x3dc>
			}else if(isButtonPressed(0)){
 8001412:	2000      	movs	r0, #0
 8001414:	f7fe ff26 	bl	8000264 <isButtonPressed>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	f000 80d2 	beq.w	80015c4 <traffic_light_fsm_sel+0x3dc>
				status = SEL_AMBER;
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <traffic_light_fsm_sel+0x304>)
 8001422:	2204      	movs	r2, #4
 8001424:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 8001426:	f241 3188 	movw	r1, #5000	; 0x1388
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbfc 	bl	8000c28 <setTimer>
			break;
 8001430:	e0c8      	b.n	80015c4 <traffic_light_fsm_sel+0x3dc>
		case SEL_AMBER:
			display7SEG(4);
 8001432:	2004      	movs	r0, #4
 8001434:	f7ff f8f8 	bl	8000628 <display7SEG>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2120      	movs	r1, #32
 800143c:	482c      	ldr	r0, [pc, #176]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800143e:	f000 fcd6 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 8001442:	2201      	movs	r2, #1
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	482a      	ldr	r0, [pc, #168]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001448:	f000 fcd1 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800144c:	2201      	movs	r2, #1
 800144e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001452:	4827      	ldr	r0, [pc, #156]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001454:	f000 fccb 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800145e:	4824      	ldr	r0, [pc, #144]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001460:	f000 fcc5 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(2)){
 8001464:	2002      	movs	r0, #2
 8001466:	f7ff fbcf 	bl	8000c08 <isFlagTimer>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d00d      	beq.n	800148c <traffic_light_fsm_sel+0x2a4>
				setTimer(2, 500);
 8001470:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001474:	2002      	movs	r0, #2
 8001476:	f7ff fbd7 	bl	8000c28 <setTimer>
				HAL_GPIO_TogglePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin);
 800147a:	2140      	movs	r1, #64	; 0x40
 800147c:	481c      	ldr	r0, [pc, #112]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 800147e:	f000 fcce 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin);
 8001482:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001486:	481a      	ldr	r0, [pc, #104]	; (80014f0 <traffic_light_fsm_sel+0x308>)
 8001488:	f000 fcc9 	bl	8001e1e <HAL_GPIO_TogglePin>
			}
			if(isFlagTimer(0)){
 800148c:	2000      	movs	r0, #0
 800148e:	f7ff fbbb 	bl	8000c08 <isFlagTimer>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <traffic_light_fsm_sel+0x2b6>
				status = INIT;
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <traffic_light_fsm_sel+0x304>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 800149e:	2002      	movs	r0, #2
 80014a0:	f7fe fee0 	bl	8000264 <isButtonPressed>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d010      	beq.n	80014cc <traffic_light_fsm_sel+0x2e4>
				status = SET_AMBER;
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <traffic_light_fsm_sel+0x304>)
 80014ac:	2215      	movs	r2, #21
 80014ae:	701a      	strb	r2, [r3, #0]
				setTimer(0, 20000);
 80014b0:	f644 6120 	movw	r1, #20000	; 0x4e20
 80014b4:	2000      	movs	r0, #0
 80014b6:	f7ff fbb7 	bl	8000c28 <setTimer>
				updateBuffer7SEG(amber_duration, amber_duration);
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <traffic_light_fsm_sel+0x314>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <traffic_light_fsm_sel+0x314>)
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe ffd9 	bl	800047c <updateBuffer7SEG>
			}else if(isButtonPressed(0)){
				status = SEL_GREEN;
				setTimer(0, 5000);
			}
			break;
 80014ca:	e07d      	b.n	80015c8 <traffic_light_fsm_sel+0x3e0>
			}else if(isButtonPressed(0)){
 80014cc:	2000      	movs	r0, #0
 80014ce:	f7fe fec9 	bl	8000264 <isButtonPressed>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d077      	beq.n	80015c8 <traffic_light_fsm_sel+0x3e0>
				status = SEL_GREEN;
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <traffic_light_fsm_sel+0x304>)
 80014da:	2205      	movs	r2, #5
 80014dc:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 80014de:	f241 3188 	movw	r1, #5000	; 0x1388
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fba0 	bl	8000c28 <setTimer>
			break;
 80014e8:	e06e      	b.n	80015c8 <traffic_light_fsm_sel+0x3e0>
 80014ea:	bf00      	nop
 80014ec:	20000078 	.word	0x20000078
 80014f0:	40010800 	.word	0x40010800
 80014f4:	20000072 	.word	0x20000072
 80014f8:	2000006c 	.word	0x2000006c
 80014fc:	2000006d 	.word	0x2000006d
		case SEL_GREEN:
			display7SEG(5);
 8001500:	2005      	movs	r0, #5
 8001502:	f7ff f891 	bl	8000628 <display7SEG>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 8001506:	2201      	movs	r2, #1
 8001508:	2120      	movs	r1, #32
 800150a:	4832      	ldr	r0, [pc, #200]	; (80015d4 <traffic_light_fsm_sel+0x3ec>)
 800150c:	f000 fc6f 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2140      	movs	r1, #64	; 0x40
 8001514:	482f      	ldr	r0, [pc, #188]	; (80015d4 <traffic_light_fsm_sel+0x3ec>)
 8001516:	f000 fc6a 	bl	8001dee <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001520:	482c      	ldr	r0, [pc, #176]	; (80015d4 <traffic_light_fsm_sel+0x3ec>)
 8001522:	f000 fc64 	bl	8001dee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER1_GPIO_Port, LED_AMBER1_Pin, SET);
 8001526:	2201      	movs	r2, #1
 8001528:	f44f 7100 	mov.w	r1, #512	; 0x200
 800152c:	4829      	ldr	r0, [pc, #164]	; (80015d4 <traffic_light_fsm_sel+0x3ec>)
 800152e:	f000 fc5e 	bl	8001dee <HAL_GPIO_WritePin>
			if(isFlagTimer(2)){
 8001532:	2002      	movs	r0, #2
 8001534:	f7ff fb68 	bl	8000c08 <isFlagTimer>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d00d      	beq.n	800155a <traffic_light_fsm_sel+0x372>
				setTimer(2, 500);
 800153e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001542:	2002      	movs	r0, #2
 8001544:	f7ff fb70 	bl	8000c28 <setTimer>
				HAL_GPIO_TogglePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin);
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	4822      	ldr	r0, [pc, #136]	; (80015d4 <traffic_light_fsm_sel+0x3ec>)
 800154c:	f000 fc67 	bl	8001e1e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 8001550:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <traffic_light_fsm_sel+0x3ec>)
 8001556:	f000 fc62 	bl	8001e1e <HAL_GPIO_TogglePin>
			}
			if(isFlagTimer(0)){
 800155a:	2000      	movs	r0, #0
 800155c:	f7ff fb54 	bl	8000c08 <isFlagTimer>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d002      	beq.n	800156c <traffic_light_fsm_sel+0x384>
				status = INIT;
 8001566:	4b1c      	ldr	r3, [pc, #112]	; (80015d8 <traffic_light_fsm_sel+0x3f0>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(2)){
 800156c:	2002      	movs	r0, #2
 800156e:	f7fe fe79 	bl	8000264 <isButtonPressed>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d010      	beq.n	800159a <traffic_light_fsm_sel+0x3b2>
				status = SET_GREEN;
 8001578:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <traffic_light_fsm_sel+0x3f0>)
 800157a:	2216      	movs	r2, #22
 800157c:	701a      	strb	r2, [r3, #0]
				setTimer(0, 20000);
 800157e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fb50 	bl	8000c28 <setTimer>
				updateBuffer7SEG(green_duration, green_duration);
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <traffic_light_fsm_sel+0x3f4>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <traffic_light_fsm_sel+0x3f4>)
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff72 	bl	800047c <updateBuffer7SEG>
			}else if(isButtonPressed(0)){
				status = SEL_AUTO;
				setTimer(0, 5000);
			}
			break;
 8001598:	e018      	b.n	80015cc <traffic_light_fsm_sel+0x3e4>
			}else if(isButtonPressed(0)){
 800159a:	2000      	movs	r0, #0
 800159c:	f7fe fe62 	bl	8000264 <isButtonPressed>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d012      	beq.n	80015cc <traffic_light_fsm_sel+0x3e4>
				status = SEL_AUTO;
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <traffic_light_fsm_sel+0x3f0>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	701a      	strb	r2, [r3, #0]
				setTimer(0, 5000);
 80015ac:	f241 3188 	movw	r1, #5000	; 0x1388
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff fb39 	bl	8000c28 <setTimer>
			break;
 80015b6:	e009      	b.n	80015cc <traffic_light_fsm_sel+0x3e4>
		default:
			break;
 80015b8:	bf00      	nop
 80015ba:	e008      	b.n	80015ce <traffic_light_fsm_sel+0x3e6>
			break;
 80015bc:	bf00      	nop
 80015be:	e006      	b.n	80015ce <traffic_light_fsm_sel+0x3e6>
			break;
 80015c0:	bf00      	nop
 80015c2:	e004      	b.n	80015ce <traffic_light_fsm_sel+0x3e6>
			break;
 80015c4:	bf00      	nop
 80015c6:	e002      	b.n	80015ce <traffic_light_fsm_sel+0x3e6>
			break;
 80015c8:	bf00      	nop
 80015ca:	e000      	b.n	80015ce <traffic_light_fsm_sel+0x3e6>
			break;
 80015cc:	bf00      	nop
	}
}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40010800 	.word	0x40010800
 80015d8:	20000078 	.word	0x20000078
 80015dc:	2000006c 	.word	0x2000006c

080015e0 <traffic_light_fsm_set>:
 *      Author: hachi
 */

#include "traffic_light_fsm_set.h"

void traffic_light_fsm_set(){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	switch (status) {
 80015e4:	4b69      	ldr	r3, [pc, #420]	; (800178c <traffic_light_fsm_set+0x1ac>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b16      	cmp	r3, #22
 80015ea:	f000 8087 	beq.w	80016fc <traffic_light_fsm_set+0x11c>
 80015ee:	2b16      	cmp	r3, #22
 80015f0:	f300 80c3 	bgt.w	800177a <traffic_light_fsm_set+0x19a>
 80015f4:	2b14      	cmp	r3, #20
 80015f6:	d002      	beq.n	80015fe <traffic_light_fsm_set+0x1e>
 80015f8:	2b15      	cmp	r3, #21
 80015fa:	d040      	beq.n	800167e <traffic_light_fsm_set+0x9e>
				amber_duration = red_duration - green_duration;
				status = INIT;
			}
			break;
		default:
			break;
 80015fc:	e0bd      	b.n	800177a <traffic_light_fsm_set+0x19a>
			HAL_GPIO_WritePin(LED_RED0_GPIO_Port, LED_RED0_Pin, SET);
 80015fe:	2201      	movs	r2, #1
 8001600:	2120      	movs	r1, #32
 8001602:	4863      	ldr	r0, [pc, #396]	; (8001790 <traffic_light_fsm_set+0x1b0>)
 8001604:	f000 fbf3 	bl	8001dee <HAL_GPIO_WritePin>
			if(isButtonPressed(1)){
 8001608:	2001      	movs	r0, #1
 800160a:	f7fe fe2b 	bl	8000264 <isButtonPressed>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d007      	beq.n	8001624 <traffic_light_fsm_set+0x44>
				increaseDuration(0);
 8001614:	2000      	movs	r0, #0
 8001616:	f7fe fea5 	bl	8000364 <increaseDuration>
				setTimer(0, 20000);
 800161a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800161e:	2000      	movs	r0, #0
 8001620:	f7ff fb02 	bl	8000c28 <setTimer>
			if(isButtonHolding(1)){
 8001624:	2001      	movs	r0, #1
 8001626:	f7fe fe3b 	bl	80002a0 <isButtonHolding>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00d      	beq.n	800164c <traffic_light_fsm_set+0x6c>
				if(isFlagTimer(2)){
 8001630:	2002      	movs	r0, #2
 8001632:	f7ff fae9 	bl	8000c08 <isFlagTimer>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <traffic_light_fsm_set+0x6c>
					setTimer(2, 500);
 800163c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001640:	2002      	movs	r0, #2
 8001642:	f7ff faf1 	bl	8000c28 <setTimer>
					increaseDuration(0);
 8001646:	2000      	movs	r0, #0
 8001648:	f7fe fe8c 	bl	8000364 <increaseDuration>
			if(isButtonPressed(2)|| isFlagTimer(0)){
 800164c:	2002      	movs	r0, #2
 800164e:	f7fe fe09 	bl	8000264 <isButtonPressed>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d106      	bne.n	8001666 <traffic_light_fsm_set+0x86>
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fad5 	bl	8000c08 <isFlagTimer>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 808c 	beq.w	800177e <traffic_light_fsm_set+0x19e>
				green_duration = red_duration - amber_duration;
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <traffic_light_fsm_set+0x1b4>)
 8001668:	781a      	ldrb	r2, [r3, #0]
 800166a:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <traffic_light_fsm_set+0x1b8>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <traffic_light_fsm_set+0x1bc>)
 8001674:	701a      	strb	r2, [r3, #0]
				status = INIT;
 8001676:	4b45      	ldr	r3, [pc, #276]	; (800178c <traffic_light_fsm_set+0x1ac>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			break;
 800167c:	e07f      	b.n	800177e <traffic_light_fsm_set+0x19e>
			HAL_GPIO_WritePin(LED_AMBER0_GPIO_Port, LED_AMBER0_Pin, SET);
 800167e:	2201      	movs	r2, #1
 8001680:	2140      	movs	r1, #64	; 0x40
 8001682:	4843      	ldr	r0, [pc, #268]	; (8001790 <traffic_light_fsm_set+0x1b0>)
 8001684:	f000 fbb3 	bl	8001dee <HAL_GPIO_WritePin>
			if(isButtonPressed(1)){
 8001688:	2001      	movs	r0, #1
 800168a:	f7fe fdeb 	bl	8000264 <isButtonPressed>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d007      	beq.n	80016a4 <traffic_light_fsm_set+0xc4>
				increaseDuration(1);
 8001694:	2001      	movs	r0, #1
 8001696:	f7fe fe65 	bl	8000364 <increaseDuration>
				setTimer(0, 20000);
 800169a:	f644 6120 	movw	r1, #20000	; 0x4e20
 800169e:	2000      	movs	r0, #0
 80016a0:	f7ff fac2 	bl	8000c28 <setTimer>
			if(isButtonHolding(1)){
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7fe fdfb 	bl	80002a0 <isButtonHolding>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00d      	beq.n	80016cc <traffic_light_fsm_set+0xec>
				if(isFlagTimer(2)){
 80016b0:	2002      	movs	r0, #2
 80016b2:	f7ff faa9 	bl	8000c08 <isFlagTimer>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d007      	beq.n	80016cc <traffic_light_fsm_set+0xec>
					setTimer(2, 500);
 80016bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016c0:	2002      	movs	r0, #2
 80016c2:	f7ff fab1 	bl	8000c28 <setTimer>
					increaseDuration(1);
 80016c6:	2001      	movs	r0, #1
 80016c8:	f7fe fe4c 	bl	8000364 <increaseDuration>
			if(isButtonPressed(2)|| isFlagTimer(0)){
 80016cc:	2002      	movs	r0, #2
 80016ce:	f7fe fdc9 	bl	8000264 <isButtonPressed>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <traffic_light_fsm_set+0x104>
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff fa95 	bl	8000c08 <isFlagTimer>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d04e      	beq.n	8001782 <traffic_light_fsm_set+0x1a2>
				green_duration = red_duration - amber_duration;
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <traffic_light_fsm_set+0x1b4>)
 80016e6:	781a      	ldrb	r2, [r3, #0]
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <traffic_light_fsm_set+0x1b8>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	4b2a      	ldr	r3, [pc, #168]	; (800179c <traffic_light_fsm_set+0x1bc>)
 80016f2:	701a      	strb	r2, [r3, #0]
				status = INIT;
 80016f4:	4b25      	ldr	r3, [pc, #148]	; (800178c <traffic_light_fsm_set+0x1ac>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	701a      	strb	r2, [r3, #0]
			break;
 80016fa:	e042      	b.n	8001782 <traffic_light_fsm_set+0x1a2>
			HAL_GPIO_WritePin(LED_GREEN0_GPIO_Port, LED_GREEN0_Pin, SET);
 80016fc:	2201      	movs	r2, #1
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	4823      	ldr	r0, [pc, #140]	; (8001790 <traffic_light_fsm_set+0x1b0>)
 8001702:	f000 fb74 	bl	8001dee <HAL_GPIO_WritePin>
			if(isButtonPressed(1)){
 8001706:	2001      	movs	r0, #1
 8001708:	f7fe fdac 	bl	8000264 <isButtonPressed>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d007      	beq.n	8001722 <traffic_light_fsm_set+0x142>
				increaseDuration(2);
 8001712:	2002      	movs	r0, #2
 8001714:	f7fe fe26 	bl	8000364 <increaseDuration>
				setTimer(0, 20000);
 8001718:	f644 6120 	movw	r1, #20000	; 0x4e20
 800171c:	2000      	movs	r0, #0
 800171e:	f7ff fa83 	bl	8000c28 <setTimer>
			if(isButtonHolding(1)){
 8001722:	2001      	movs	r0, #1
 8001724:	f7fe fdbc 	bl	80002a0 <isButtonHolding>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00d      	beq.n	800174a <traffic_light_fsm_set+0x16a>
				if(isFlagTimer(2)){
 800172e:	2002      	movs	r0, #2
 8001730:	f7ff fa6a 	bl	8000c08 <isFlagTimer>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d007      	beq.n	800174a <traffic_light_fsm_set+0x16a>
					setTimer(2, 500);
 800173a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff fa72 	bl	8000c28 <setTimer>
					increaseDuration(2);
 8001744:	2002      	movs	r0, #2
 8001746:	f7fe fe0d 	bl	8000364 <increaseDuration>
			if(isButtonPressed(2)|| isFlagTimer(0)){
 800174a:	2002      	movs	r0, #2
 800174c:	f7fe fd8a 	bl	8000264 <isButtonPressed>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d105      	bne.n	8001762 <traffic_light_fsm_set+0x182>
 8001756:	2000      	movs	r0, #0
 8001758:	f7ff fa56 	bl	8000c08 <isFlagTimer>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d011      	beq.n	8001786 <traffic_light_fsm_set+0x1a6>
				amber_duration = red_duration - green_duration;
 8001762:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <traffic_light_fsm_set+0x1b4>)
 8001764:	781a      	ldrb	r2, [r3, #0]
 8001766:	4b0d      	ldr	r3, [pc, #52]	; (800179c <traffic_light_fsm_set+0x1bc>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <traffic_light_fsm_set+0x1b8>)
 8001770:	701a      	strb	r2, [r3, #0]
				status = INIT;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <traffic_light_fsm_set+0x1ac>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
			break;
 8001778:	e005      	b.n	8001786 <traffic_light_fsm_set+0x1a6>
			break;
 800177a:	bf00      	nop
 800177c:	e004      	b.n	8001788 <traffic_light_fsm_set+0x1a8>
			break;
 800177e:	bf00      	nop
 8001780:	e002      	b.n	8001788 <traffic_light_fsm_set+0x1a8>
			break;
 8001782:	bf00      	nop
 8001784:	e000      	b.n	8001788 <traffic_light_fsm_set+0x1a8>
			break;
 8001786:	bf00      	nop
	}
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000078 	.word	0x20000078
 8001790:	40010800 	.word	0x40010800
 8001794:	20000072 	.word	0x20000072
 8001798:	2000006d 	.word	0x2000006d
 800179c:	2000006c 	.word	0x2000006c

080017a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a0:	f7ff fb34 	bl	8000e0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a4:	480b      	ldr	r0, [pc, #44]	; (80017d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017a6:	490c      	ldr	r1, [pc, #48]	; (80017d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80017aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017ac:	e002      	b.n	80017b4 <LoopCopyDataInit>

080017ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b2:	3304      	adds	r3, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b8:	d3f9      	bcc.n	80017ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ba:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017bc:	4c09      	ldr	r4, [pc, #36]	; (80017e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c0:	e001      	b.n	80017c6 <LoopFillZerobss>

080017c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c4:	3204      	adds	r2, #4

080017c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c8:	d3fb      	bcc.n	80017c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ca:	f001 fb03 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ce:	f7ff f8dd 	bl	800098c <main>
  bx lr
 80017d2:	4770      	bx	lr
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80017dc:	08002e70 	.word	0x08002e70
  ldr r2, =_sbss
 80017e0:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80017e4:	200000c8 	.word	0x200000c8

080017e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_2_IRQHandler>
	...

080017ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_Init+0x28>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_Init+0x28>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fc:	2003      	movs	r0, #3
 80017fe:	f000 f923 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001802:	200f      	movs	r0, #15
 8001804:	f000 f808 	bl	8001818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001808:	f7ff fa78 	bl	8000cfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40022000 	.word	0x40022000

08001818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x54>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_InitTick+0x58>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f000 f93b 	bl	8001ab2 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f903 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x5c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20000018 	.word	0x20000018
 8001870:	20000020 	.word	0x20000020
 8001874:	2000001c 	.word	0x2000001c

08001878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b05      	ldr	r3, [pc, #20]	; (8001894 <HAL_IncTick+0x1c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x20>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x20>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	20000020 	.word	0x20000020
 8001898:	200000c4 	.word	0x200000c4

0800189c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b02      	ldr	r3, [pc, #8]	; (80018ac <HAL_GetTick+0x10>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	200000c4 	.word	0x200000c4

080018b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	68ba      	ldr	r2, [r7, #8]
 80018c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018cc:	4013      	ands	r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e2:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <__NVIC_SetPriorityGrouping+0x44>)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	60d3      	str	r3, [r2, #12]
}
 80018e8:	bf00      	nop
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <__NVIC_GetPriorityGrouping+0x18>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	f003 0307 	and.w	r3, r3, #7
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800191e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	db0b      	blt.n	800193e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	f003 021f 	and.w	r2, r3, #31
 800192c:	4906      	ldr	r1, [pc, #24]	; (8001948 <__NVIC_EnableIRQ+0x34>)
 800192e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	2001      	movs	r0, #1
 8001936:	fa00 f202 	lsl.w	r2, r0, r2
 800193a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100

0800194c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	6039      	str	r1, [r7, #0]
 8001956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	2b00      	cmp	r3, #0
 800195e:	db0a      	blt.n	8001976 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	490c      	ldr	r1, [pc, #48]	; (8001998 <__NVIC_SetPriority+0x4c>)
 8001966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196a:	0112      	lsls	r2, r2, #4
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	440b      	add	r3, r1
 8001970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001974:	e00a      	b.n	800198c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4908      	ldr	r1, [pc, #32]	; (800199c <__NVIC_SetPriority+0x50>)
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	f003 030f 	and.w	r3, r3, #15
 8001982:	3b04      	subs	r3, #4
 8001984:	0112      	lsls	r2, r2, #4
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	440b      	add	r3, r1
 800198a:	761a      	strb	r2, [r3, #24]
}
 800198c:	bf00      	nop
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000e100 	.word	0xe000e100
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b089      	sub	sp, #36	; 0x24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f1c3 0307 	rsb	r3, r3, #7
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	bf28      	it	cs
 80019be:	2304      	movcs	r3, #4
 80019c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3304      	adds	r3, #4
 80019c6:	2b06      	cmp	r3, #6
 80019c8:	d902      	bls.n	80019d0 <NVIC_EncodePriority+0x30>
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	3b03      	subs	r3, #3
 80019ce:	e000      	b.n	80019d2 <NVIC_EncodePriority+0x32>
 80019d0:	2300      	movs	r3, #0
 80019d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d4:	f04f 32ff 	mov.w	r2, #4294967295
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43da      	mvns	r2, r3
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	401a      	ands	r2, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43d9      	mvns	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f8:	4313      	orrs	r3, r2
         );
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3724      	adds	r7, #36	; 0x24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff90 	bl	800194c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff2d 	bl	80018b0 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a70:	f7ff ff42 	bl	80018f8 <__NVIC_GetPriorityGrouping>
 8001a74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	6978      	ldr	r0, [r7, #20]
 8001a7c:	f7ff ff90 	bl	80019a0 <NVIC_EncodePriority>
 8001a80:	4602      	mov	r2, r0
 8001a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff5f 	bl	800194c <__NVIC_SetPriority>
}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff35 	bl	8001914 <__NVIC_EnableIRQ>
}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff ffa2 	bl	8001a04 <SysTick_Config>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b08b      	sub	sp, #44	; 0x2c
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	e148      	b.n	8001d72 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	f040 8137 	bne.w	8001d6c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	4aa3      	ldr	r2, [pc, #652]	; (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d05e      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b08:	4aa1      	ldr	r2, [pc, #644]	; (8001d90 <HAL_GPIO_Init+0x2c4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d875      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b0e:	4aa1      	ldr	r2, [pc, #644]	; (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d058      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b14:	4a9f      	ldr	r2, [pc, #636]	; (8001d94 <HAL_GPIO_Init+0x2c8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d86f      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b1a:	4a9f      	ldr	r2, [pc, #636]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d052      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b20:	4a9d      	ldr	r2, [pc, #628]	; (8001d98 <HAL_GPIO_Init+0x2cc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d869      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b26:	4a9d      	ldr	r2, [pc, #628]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d04c      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a9b      	ldr	r2, [pc, #620]	; (8001d9c <HAL_GPIO_Init+0x2d0>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d863      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b32:	4a9b      	ldr	r2, [pc, #620]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d046      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
 8001b38:	4a99      	ldr	r2, [pc, #612]	; (8001da0 <HAL_GPIO_Init+0x2d4>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d85d      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b3e:	2b12      	cmp	r3, #18
 8001b40:	d82a      	bhi.n	8001b98 <HAL_GPIO_Init+0xcc>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d859      	bhi.n	8001bfa <HAL_GPIO_Init+0x12e>
 8001b46:	a201      	add	r2, pc, #4	; (adr r2, 8001b4c <HAL_GPIO_Init+0x80>)
 8001b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b4c:	08001bc7 	.word	0x08001bc7
 8001b50:	08001ba1 	.word	0x08001ba1
 8001b54:	08001bb3 	.word	0x08001bb3
 8001b58:	08001bf5 	.word	0x08001bf5
 8001b5c:	08001bfb 	.word	0x08001bfb
 8001b60:	08001bfb 	.word	0x08001bfb
 8001b64:	08001bfb 	.word	0x08001bfb
 8001b68:	08001bfb 	.word	0x08001bfb
 8001b6c:	08001bfb 	.word	0x08001bfb
 8001b70:	08001bfb 	.word	0x08001bfb
 8001b74:	08001bfb 	.word	0x08001bfb
 8001b78:	08001bfb 	.word	0x08001bfb
 8001b7c:	08001bfb 	.word	0x08001bfb
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bfb 	.word	0x08001bfb
 8001b88:	08001bfb 	.word	0x08001bfb
 8001b8c:	08001bfb 	.word	0x08001bfb
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bbd 	.word	0x08001bbd
 8001b98:	4a82      	ldr	r2, [pc, #520]	; (8001da4 <HAL_GPIO_Init+0x2d8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d013      	beq.n	8001bc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b9e:	e02c      	b.n	8001bfa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	623b      	str	r3, [r7, #32]
          break;
 8001ba6:	e029      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	3304      	adds	r3, #4
 8001bae:	623b      	str	r3, [r7, #32]
          break;
 8001bb0:	e024      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e01f      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	330c      	adds	r3, #12
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e01a      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d102      	bne.n	8001bd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bce:	2304      	movs	r3, #4
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e013      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d105      	bne.n	8001be8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bdc:	2308      	movs	r3, #8
 8001bde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69fa      	ldr	r2, [r7, #28]
 8001be4:	611a      	str	r2, [r3, #16]
          break;
 8001be6:	e009      	b.n	8001bfc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	615a      	str	r2, [r3, #20]
          break;
 8001bf2:	e003      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x130>
          break;
 8001bfa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2bff      	cmp	r3, #255	; 0xff
 8001c00:	d801      	bhi.n	8001c06 <HAL_GPIO_Init+0x13a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	e001      	b.n	8001c0a <HAL_GPIO_Init+0x13e>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	3304      	adds	r3, #4
 8001c0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d802      	bhi.n	8001c18 <HAL_GPIO_Init+0x14c>
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	e002      	b.n	8001c1e <HAL_GPIO_Init+0x152>
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1a:	3b08      	subs	r3, #8
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	210f      	movs	r1, #15
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8090 	beq.w	8001d6c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c4c:	4b56      	ldr	r3, [pc, #344]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a55      	ldr	r2, [pc, #340]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <HAL_GPIO_Init+0x2dc>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c64:	4a51      	ldr	r2, [pc, #324]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	3302      	adds	r3, #2
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_GPIO_Init+0x2e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1e0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_GPIO_Init+0x2e8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1dc>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_GPIO_Init+0x2ec>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1d8>
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	e004      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e002      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_GPIO_Init+0x1e2>
 8001cac:	2300      	movs	r3, #0
 8001cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cb0:	f002 0203 	and.w	r2, r2, #3
 8001cb4:	0092      	lsls	r2, r2, #2
 8001cb6:	4093      	lsls	r3, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cbe:	493b      	ldr	r1, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x2e0>)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	089b      	lsrs	r3, r3, #2
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cd8:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cda:	689a      	ldr	r2, [r3, #8]
 8001cdc:	4937      	ldr	r1, [pc, #220]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	608b      	str	r3, [r1, #8]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ce6:	4b35      	ldr	r3, [pc, #212]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	4933      	ldr	r1, [pc, #204]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	492d      	ldr	r1, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	60cb      	str	r3, [r1, #12]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d0e:	4b2b      	ldr	r3, [pc, #172]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d10:	68da      	ldr	r2, [r3, #12]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4929      	ldr	r1, [pc, #164]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4923      	ldr	r1, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
 8001d34:	e006      	b.n	8001d44 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	491f      	ldr	r1, [pc, #124]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d40:	4013      	ands	r3, r2
 8001d42:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d006      	beq.n	8001d5e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d50:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	4919      	ldr	r1, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	600b      	str	r3, [r1, #0]
 8001d5c:	e006      	b.n	8001d6c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	43db      	mvns	r3, r3
 8001d66:	4915      	ldr	r1, [pc, #84]	; (8001dbc <HAL_GPIO_Init+0x2f0>)
 8001d68:	4013      	ands	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	3301      	adds	r3, #1
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f47f aeaf 	bne.w	8001ae0 <HAL_GPIO_Init+0x14>
  }
}
 8001d82:	bf00      	nop
 8001d84:	bf00      	nop
 8001d86:	372c      	adds	r7, #44	; 0x2c
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	10320000 	.word	0x10320000
 8001d94:	10310000 	.word	0x10310000
 8001d98:	10220000 	.word	0x10220000
 8001d9c:	10210000 	.word	0x10210000
 8001da0:	10120000 	.word	0x10120000
 8001da4:	10110000 	.word	0x10110000
 8001da8:	40021000 	.word	0x40021000
 8001dac:	40010000 	.word	0x40010000
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40011000 	.word	0x40011000
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	887b      	ldrh	r3, [r7, #2]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d002      	beq.n	8001dde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e001      	b.n	8001de2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	807b      	strh	r3, [r7, #2]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfe:	787b      	ldrb	r3, [r7, #1]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d003      	beq.n	8001e0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e0a:	e003      	b.n	8001e14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	611a      	str	r2, [r3, #16]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b085      	sub	sp, #20
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e30:	887a      	ldrh	r2, [r7, #2]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	041a      	lsls	r2, r3, #16
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	43d9      	mvns	r1, r3
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	400b      	ands	r3, r1
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	611a      	str	r2, [r3, #16]
}
 8001e46:	bf00      	nop
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr

08001e50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e26c      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 8087 	beq.w	8001f7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e70:	4b92      	ldr	r3, [pc, #584]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 030c 	and.w	r3, r3, #12
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d00c      	beq.n	8001e96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e7c:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f003 030c 	and.w	r3, r3, #12
 8001e84:	2b08      	cmp	r3, #8
 8001e86:	d112      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e94:	d10b      	bne.n	8001eae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e96:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d06c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x12c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d168      	bne.n	8001f7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e246      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x76>
 8001eb8:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a7f      	ldr	r2, [pc, #508]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	e02e      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x98>
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a7a      	ldr	r2, [pc, #488]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed8:	6013      	str	r3, [r2, #0]
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a77      	ldr	r2, [pc, #476]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	e01d      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0xbc>
 8001ef2:	4b72      	ldr	r3, [pc, #456]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a71      	ldr	r2, [pc, #452]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001efc:	6013      	str	r3, [r2, #0]
 8001efe:	4b6f      	ldr	r3, [pc, #444]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a6e      	ldr	r2, [pc, #440]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xd4>
 8001f0c:	4b6b      	ldr	r3, [pc, #428]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6a      	ldr	r2, [pc, #424]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f16:	6013      	str	r3, [r2, #0]
 8001f18:	4b68      	ldr	r3, [pc, #416]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a67      	ldr	r2, [pc, #412]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d013      	beq.n	8001f54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fcb6 	bl	800189c <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f34:	f7ff fcb2 	bl	800189c <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b64      	cmp	r3, #100	; 0x64
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1fa      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b5d      	ldr	r3, [pc, #372]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0xe4>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff fca2 	bl	800189c <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff fc9e 	bl	800189c <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1e6      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6e:	4b53      	ldr	r3, [pc, #332]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x10c>
 8001f7a:	e000      	b.n	8001f7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d063      	beq.n	8002052 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f8a:	4b4c      	ldr	r3, [pc, #304]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00b      	beq.n	8001fae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f96:	4b49      	ldr	r3, [pc, #292]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b08      	cmp	r3, #8
 8001fa0:	d11c      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fae:	4b43      	ldr	r3, [pc, #268]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e1ba      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc6:	4b3d      	ldr	r3, [pc, #244]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4939      	ldr	r1, [pc, #228]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fda:	e03a      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d020      	beq.n	8002026 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe4:	4b36      	ldr	r3, [pc, #216]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fea:	f7ff fc57 	bl	800189c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff2:	f7ff fc53 	bl	800189c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e19b      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002004:	4b2d      	ldr	r3, [pc, #180]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0f0      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	695b      	ldr	r3, [r3, #20]
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4927      	ldr	r1, [pc, #156]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002020:	4313      	orrs	r3, r2
 8002022:	600b      	str	r3, [r1, #0]
 8002024:	e015      	b.n	8002052 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002026:	4b26      	ldr	r3, [pc, #152]	; (80020c0 <HAL_RCC_OscConfig+0x270>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fc36 	bl	800189c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002034:	f7ff fc32 	bl	800189c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e17a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d03a      	beq.n	80020d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	699b      	ldr	r3, [r3, #24]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d019      	beq.n	800209a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002066:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 8002068:	2201      	movs	r2, #1
 800206a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800206c:	f7ff fc16 	bl	800189c <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002074:	f7ff fc12 	bl	800189c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e15a      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_RCC_OscConfig+0x26c>)
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0f0      	beq.n	8002074 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002092:	2001      	movs	r0, #1
 8002094:	f000 faa4 	bl	80025e0 <RCC_Delay>
 8002098:	e01c      	b.n	80020d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_RCC_OscConfig+0x274>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7ff fbfc 	bl	800189c <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a6:	e00f      	b.n	80020c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7ff fbf8 	bl	800189c <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d908      	bls.n	80020c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e140      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	42420000 	.word	0x42420000
 80020c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	4b9e      	ldr	r3, [pc, #632]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1e9      	bne.n	80020a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 0304 	and.w	r3, r3, #4
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80a6 	beq.w	800222e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020e2:	2300      	movs	r3, #0
 80020e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e6:	4b97      	ldr	r3, [pc, #604]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10d      	bne.n	800210e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b94      	ldr	r3, [pc, #592]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	69db      	ldr	r3, [r3, #28]
 80020f6:	4a93      	ldr	r2, [pc, #588]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	61d3      	str	r3, [r2, #28]
 80020fe:	4b91      	ldr	r3, [pc, #580]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800210a:	2301      	movs	r3, #1
 800210c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210e:	4b8e      	ldr	r3, [pc, #568]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d118      	bne.n	800214c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a8a      	ldr	r2, [pc, #552]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002126:	f7ff fbb9 	bl	800189c <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	e008      	b.n	8002140 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212e:	f7ff fbb5 	bl	800189c <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	2b64      	cmp	r3, #100	; 0x64
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0fd      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002140:	4b81      	ldr	r3, [pc, #516]	; (8002348 <HAL_RCC_OscConfig+0x4f8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0f0      	beq.n	800212e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x312>
 8002154:	4b7b      	ldr	r3, [pc, #492]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a7a      	ldr	r2, [pc, #488]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6213      	str	r3, [r2, #32]
 8002160:	e02d      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x334>
 800216a:	4b76      	ldr	r3, [pc, #472]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	4a75      	ldr	r2, [pc, #468]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	6213      	str	r3, [r2, #32]
 8002176:	4b73      	ldr	r3, [pc, #460]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	4a72      	ldr	r2, [pc, #456]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800217c:	f023 0304 	bic.w	r3, r3, #4
 8002180:	6213      	str	r3, [r2, #32]
 8002182:	e01c      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	2b05      	cmp	r3, #5
 800218a:	d10c      	bne.n	80021a6 <HAL_RCC_OscConfig+0x356>
 800218c:	4b6d      	ldr	r3, [pc, #436]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	4a6c      	ldr	r2, [pc, #432]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	f043 0304 	orr.w	r3, r3, #4
 8002196:	6213      	str	r3, [r2, #32]
 8002198:	4b6a      	ldr	r3, [pc, #424]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	4a69      	ldr	r2, [pc, #420]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800219e:	f043 0301 	orr.w	r3, r3, #1
 80021a2:	6213      	str	r3, [r2, #32]
 80021a4:	e00b      	b.n	80021be <HAL_RCC_OscConfig+0x36e>
 80021a6:	4b67      	ldr	r3, [pc, #412]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a66      	ldr	r2, [pc, #408]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b64      	ldr	r3, [pc, #400]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a63      	ldr	r2, [pc, #396]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d015      	beq.n	80021f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c6:	f7ff fb69 	bl	800189c <HAL_GetTick>
 80021ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	e00a      	b.n	80021e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb65 	bl	800189c <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80021dc:	4293      	cmp	r3, r2
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0ab      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e4:	4b57      	ldr	r3, [pc, #348]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d0ee      	beq.n	80021ce <HAL_RCC_OscConfig+0x37e>
 80021f0:	e014      	b.n	800221c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f2:	f7ff fb53 	bl	800189c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	e00a      	b.n	8002210 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fa:	f7ff fb4f 	bl	800189c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	f241 3288 	movw	r2, #5000	; 0x1388
 8002208:	4293      	cmp	r3, r2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e095      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002210:	4b4c      	ldr	r3, [pc, #304]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1ee      	bne.n	80021fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800221c:	7dfb      	ldrb	r3, [r7, #23]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d105      	bne.n	800222e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002222:	4b48      	ldr	r3, [pc, #288]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4a47      	ldr	r2, [pc, #284]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002228:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 8081 	beq.w	800233a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002238:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d061      	beq.n	8002308 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d146      	bne.n	80022da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224c:	4b3f      	ldr	r3, [pc, #252]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002252:	f7ff fb23 	bl	800189c <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff fb1f 	bl	800189c <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e067      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226c:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d108      	bne.n	8002294 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002282:	4b30      	ldr	r3, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002294:	4b2b      	ldr	r3, [pc, #172]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a19      	ldr	r1, [r3, #32]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	430b      	orrs	r3, r1
 80022a6:	4927      	ldr	r1, [pc, #156]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ac:	4b27      	ldr	r3, [pc, #156]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff faf3 	bl	800189c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff faef 	bl	800189c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e037      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x46a>
 80022d8:	e02f      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <HAL_RCC_OscConfig+0x4fc>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7ff fadc 	bl	800189c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7ff fad8 	bl	800189c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e020      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x498>
 8002306:	e018      	b.n	800233a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d101      	bne.n	8002314 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e013      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_RCC_OscConfig+0x4f4>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	429a      	cmp	r2, r3
 8002326:	d106      	bne.n	8002336 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3718      	adds	r7, #24
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	40007000 	.word	0x40007000
 800234c:	42420060 	.word	0x42420060

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4965      	ldr	r1, [pc, #404]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80023ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7ff fa2c 	bl	800189c <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7ff fa28 	bl	800189c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f98a 	bl	8001818 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	08002e44 	.word	0x08002e44
 800251c:	20000018 	.word	0x20000018
 8002520:	2000001c 	.word	0x2000001c

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x30>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x36>
 8002552:	e027      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	e027      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0c9b      	lsrs	r3, r3, #18
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	4a17      	ldr	r2, [pc, #92]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0c5b      	lsrs	r3, r3, #17
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0d      	ldr	r2, [pc, #52]	; (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	fb02 f203 	mul.w	r2, r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e004      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	613b      	str	r3, [r7, #16]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 80025a6:	613b      	str	r3, [r7, #16]
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	693b      	ldr	r3, [r7, #16]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	08002e54 	.word	0x08002e54
 80025c4:	08002e64 	.word	0x08002e64
 80025c8:	003d0900 	.word	0x003d0900

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b02      	ldr	r3, [pc, #8]	; (80025dc <HAL_RCC_GetHCLKFreq+0x10>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	20000018 	.word	0x20000018

080025e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025e8:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <RCC_Delay+0x34>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a0a      	ldr	r2, [pc, #40]	; (8002618 <RCC_Delay+0x38>)
 80025ee:	fba2 2303 	umull	r2, r3, r2, r3
 80025f2:	0a5b      	lsrs	r3, r3, #9
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	fb02 f303 	mul.w	r3, r2, r3
 80025fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025fc:	bf00      	nop
  }
  while (Delay --);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	1e5a      	subs	r2, r3, #1
 8002602:	60fa      	str	r2, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1f9      	bne.n	80025fc <RCC_Delay+0x1c>
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	20000018 	.word	0x20000018
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e041      	b.n	80026b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe fb8c 	bl	8000d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f000 fa56 	bl	8002b0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e035      	b.n	8002740 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a16      	ldr	r2, [pc, #88]	; (800274c <HAL_TIM_Base_Start_IT+0x90>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_TIM_Base_Start_IT+0x4e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026fe:	d004      	beq.n	800270a <HAL_TIM_Base_Start_IT+0x4e>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <HAL_TIM_Base_Start_IT+0x94>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d111      	bne.n	800272e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b06      	cmp	r3, #6
 800271a:	d010      	beq.n	800273e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272c:	e007      	b.n	800273e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f042 0201 	orr.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	bc80      	pop	{r7}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40000400 	.word	0x40000400

08002754 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d020      	beq.n	80027b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0202 	mvn.w	r2, #2
 8002788:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f998 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f98b 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f99a 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0204 	mvn.w	r2, #4
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f972 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f965 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f974 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d020      	beq.n	8002850 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01b      	beq.n	8002850 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0208 	mvn.w	r2, #8
 8002820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2204      	movs	r2, #4
 8002826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d003      	beq.n	800283e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f94c 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 800283c:	e005      	b.n	800284a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f93f 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f94e 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d020      	beq.n	800289c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d01b      	beq.n	800289c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0210 	mvn.w	r2, #16
 800286c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2208      	movs	r2, #8
 8002872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	69db      	ldr	r3, [r3, #28]
 800287a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f926 	bl	8002ad4 <HAL_TIM_IC_CaptureCallback>
 8002888:	e005      	b.n	8002896 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f919 	bl	8002ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f928 	bl	8002ae6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d007      	beq.n	80028c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f06f 0201 	mvn.w	r2, #1
 80028b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe f992 	bl	8000be4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00c      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 fa6f 	bl	8002dc2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00c      	beq.n	8002908 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f8f8 	bl	8002af8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0320 	and.w	r3, r3, #32
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0220 	mvn.w	r2, #32
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa42 	bl	8002db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800292c:	bf00      	nop
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_TIM_ConfigClockSource+0x1c>
 800294c:	2302      	movs	r3, #2
 800294e:	e0b4      	b.n	8002aba <HAL_TIM_ConfigClockSource+0x186>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800296e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68ba      	ldr	r2, [r7, #8]
 800297e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002988:	d03e      	beq.n	8002a08 <HAL_TIM_ConfigClockSource+0xd4>
 800298a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800298e:	f200 8087 	bhi.w	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002996:	f000 8086 	beq.w	8002aa6 <HAL_TIM_ConfigClockSource+0x172>
 800299a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800299e:	d87f      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b70      	cmp	r3, #112	; 0x70
 80029a2:	d01a      	beq.n	80029da <HAL_TIM_ConfigClockSource+0xa6>
 80029a4:	2b70      	cmp	r3, #112	; 0x70
 80029a6:	d87b      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b60      	cmp	r3, #96	; 0x60
 80029aa:	d050      	beq.n	8002a4e <HAL_TIM_ConfigClockSource+0x11a>
 80029ac:	2b60      	cmp	r3, #96	; 0x60
 80029ae:	d877      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b50      	cmp	r3, #80	; 0x50
 80029b2:	d03c      	beq.n	8002a2e <HAL_TIM_ConfigClockSource+0xfa>
 80029b4:	2b50      	cmp	r3, #80	; 0x50
 80029b6:	d873      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029b8:	2b40      	cmp	r3, #64	; 0x40
 80029ba:	d058      	beq.n	8002a6e <HAL_TIM_ConfigClockSource+0x13a>
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d86f      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b30      	cmp	r3, #48	; 0x30
 80029c2:	d064      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x15a>
 80029c4:	2b30      	cmp	r3, #48	; 0x30
 80029c6:	d86b      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d060      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x15a>
 80029cc:	2b20      	cmp	r3, #32
 80029ce:	d867      	bhi.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d05c      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x15a>
 80029d4:	2b10      	cmp	r3, #16
 80029d6:	d05a      	beq.n	8002a8e <HAL_TIM_ConfigClockSource+0x15a>
 80029d8:	e062      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6899      	ldr	r1, [r3, #8]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f000 f96a 	bl	8002cc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	609a      	str	r2, [r3, #8]
      break;
 8002a06:	e04f      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6818      	ldr	r0, [r3, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6899      	ldr	r1, [r3, #8]
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f000 f953 	bl	8002cc2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a2a:	609a      	str	r2, [r3, #8]
      break;
 8002a2c:	e03c      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6818      	ldr	r0, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	6859      	ldr	r1, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f000 f8ca 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2150      	movs	r1, #80	; 0x50
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 f921 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a4c:	e02c      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	6859      	ldr	r1, [r3, #4]
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	f000 f8e8 	bl	8002c30 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2160      	movs	r1, #96	; 0x60
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 f911 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a6c:	e01c      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	6859      	ldr	r1, [r3, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	f000 f8aa 	bl	8002bd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	2140      	movs	r1, #64	; 0x40
 8002a86:	4618      	mov	r0, r3
 8002a88:	f000 f901 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a8c:	e00c      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f000 f8f8 	bl	8002c8e <TIM_ITRx_SetConfig>
      break;
 8002a9e:	e003      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e000      	b.n	8002aa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bc80      	pop	{r7}
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
	...

08002b0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <TIM_Base_SetConfig+0xc0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d007      	beq.n	8002b34 <TIM_Base_SetConfig+0x28>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0x28>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a28      	ldr	r2, [pc, #160]	; (8002bd0 <TIM_Base_SetConfig+0xc4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d108      	bne.n	8002b46 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <TIM_Base_SetConfig+0xc0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d007      	beq.n	8002b5e <TIM_Base_SetConfig+0x52>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b54:	d003      	beq.n	8002b5e <TIM_Base_SetConfig+0x52>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <TIM_Base_SetConfig+0xc4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d108      	bne.n	8002b70 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a0d      	ldr	r2, [pc, #52]	; (8002bcc <TIM_Base_SetConfig+0xc0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d103      	bne.n	8002ba4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d005      	beq.n	8002bc2 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f023 0201 	bic.w	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr
 8002bcc:	40012c00 	.word	0x40012c00
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a1b      	ldr	r3, [r3, #32]
 8002be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0201 	bic.w	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 030a 	bic.w	r3, r3, #10
 8002c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c12:	697a      	ldr	r2, [r7, #20]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
}
 8002c26:	bf00      	nop
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b087      	sub	sp, #28
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	f023 0210 	bic.w	r2, r3, #16
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b085      	sub	sp, #20
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f043 0307 	orr.w	r3, r3, #7
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	609a      	str	r2, [r3, #8]
}
 8002cb8:	bf00      	nop
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	021a      	lsls	r2, r3, #8
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	609a      	str	r2, [r3, #8]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d101      	bne.n	8002d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d14:	2302      	movs	r3, #2
 8002d16:	e041      	b.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d009      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d64:	d004      	beq.n	8002d70 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a10      	ldr	r2, [pc, #64]	; (8002dac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d10c      	bne.n	8002d8a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68ba      	ldr	r2, [r7, #8]
 8002d88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	40012c00 	.word	0x40012c00
 8002dac:	40000400 	.word	0x40000400

08002db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b083      	sub	sp, #12
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bc80      	pop	{r7}
 8002dd2:	4770      	bx	lr

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	4d0c      	ldr	r5, [pc, #48]	; (8002e0c <__libc_init_array+0x38>)
 8002dda:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	f000 f822 	bl	8002e2c <_init>
 8002de8:	2600      	movs	r6, #0
 8002dea:	4d0a      	ldr	r5, [pc, #40]	; (8002e14 <__libc_init_array+0x40>)
 8002dec:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <__libc_init_array+0x44>)
 8002dee:	1b64      	subs	r4, r4, r5
 8002df0:	10a4      	asrs	r4, r4, #2
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	08002e68 	.word	0x08002e68
 8002e10:	08002e68 	.word	0x08002e68
 8002e14:	08002e68 	.word	0x08002e68
 8002e18:	08002e6c 	.word	0x08002e6c

08002e1c <memset>:
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4402      	add	r2, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <_init>:
 8002e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e2e:	bf00      	nop
 8002e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e32:	bc08      	pop	{r3}
 8002e34:	469e      	mov	lr, r3
 8002e36:	4770      	bx	lr

08002e38 <_fini>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	bf00      	nop
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr
